{"version":3,"sources":["mainTheme.ts","components/App/Wrapper.tsx","components/App/index.tsx","serviceWorker.js","config/aeonsData.ts","config/turnOrderSetups.ts","config/index.ts","config/marketSetups.ts","Redux/Store/Settings/Expansions/SelectedExpansions.ts","Redux/Store/Settings/Expansions/SelectedCards.ts","Redux/Store/Settings/Expansions/SelectedNemeses.ts","Redux/Store/Settings/Expansions/SelectedMages.ts","Redux/Store/Settings/Expansions/index.ts","Redux/Store/Settings/SupplySetups/index.ts","Redux/Store/Nemesis/index.ts","Redux/Store/Settings/index.ts","Redux/helpers.ts","Redux/Store/Mages/Count/index.ts","Redux/Store/Mages/Recruited/index.ts","Redux/Store/Mages/index.ts","Redux/Store/Supply/Selection/index.ts","Redux/Store/Supply/RandomSetup/helpers.ts","Redux/Store/Supply/RandomSetup/index.ts","Redux/Store/Supply/index.ts","Redux/Store/TurnOrder/ActiveGame/index.ts","Redux/Store/TurnOrder/Configuration/index.ts","Redux/Store/index.ts","Redux/Store/TurnOrder/index.ts","Redux/Store/MainContentLoading/index.ts","index.tsx","Redux/configureStore.ts"],"names":["muiTheme","createMuiTheme","palette","primary","blue","secondary","pink","typography","useNextVariants","playerColors","player1","normal","light","player2","player3","player4","mainTheme","heading","fontSize","pxToRem","spacing","drawerWidth","muiTransitions","appBarShift","transitions","create","easing","easeOut","duration","enteringScreen","content","sharp","leavingScreen","contentShift","colors","text","turnOrderCards","_objectSpread","player12","concat","player34","wild","wild-token","nemesis","maelstrom","blitz","cards","gem","color","background","relic","spell","mage","Wrapper","styled","withConfig","displayName","componentId","App","React","memo","react_default","a","createElement","styled_components_browser_esm","theme","styles","App_Wrapper","CssBaseline_default","Card_default","style","padding","Typography_default","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DATA","NA","id","name","type","nemeses","expansion","mages","cost","IW","SD","TA","WE","TV","OD","Nameless","Legacy","Depths","BS","AE","promos","TURNORDERCARDS","player1-1","player1-2","player1-3","player1-4","player2-1","player2-2","player3-1","player4-1","player12-1","player12-2","player34-1","player34-2","wildToken","nemesis-1","nemesis-2","TURNORDERSETUPS","onePlayer","variations","default","4toc","twoPlayers","threePlayers","fourPlayers","splitPlayers","EXPANSIONS","Object","keys","normalize","array","reduce","acc","entity","entities","config_objectSpread","defineProperty","ids","toConsumableArray","NORMALIZEDDATA","expansions","expansionIds","nemesisIds","mageIds","cardIds","DEFAULTSUPPLYCOUNT","MARKETSETUPS","market1Inc","active","tiles","operation","threshold","market1","market2","market3","values","market4","market5","market6","random","ActionTypes","initialState","SelectedExpansions_objectSpread","selected","actions","toggleAll","createAction","TOGGLE_ALL","toggleExpansion","TOGGLE_EXPANSION","setToDB","SET_TO_DB","setToDBSuccessful","SET_TO_DB_SUCCESS","setToDBFailed","SET_TO_DB_FAILURE","fetchFromDB","FETCH_FROM_DB","fetchFromDBSuccessful","selectedExpansions","FETCH_FROM_DB_SUCCESS","fetchFromDBFailed","FETCH_FROM_DB_FAILURE","allExpansionsAreSelected","every","exp","getSelectedExpansionsState","Settings","Expansions","SelectedExpansions","getSelectedExpansionsArray","createSelector","filter","getAllExpansionsSelected","getHasStandaloneExpansion","some","getStandaloneExpansionIds","getMiniExpansionIds","getPromoIds","sort","b","promoA","promoB","selectors","getStandaloneExpansions","map","getMiniExpansions","getPromos","SelectedCards_objectSpread","toggleCard","TOGGLE_CARD","selectedCards","getSelectedCardsState","SelectedCards","getCardIdsArray","getCardIdsByExpansionId","_","expansionId","cardId","getCardsByExpansionId","getGemsByExpansionId","card","getRelicsByExpansionId","getSpellsByExpansionId","getSelectedCardIds","getSelectedCards","SelectedNemeses_objectSpread","toggleNemesis","TOGGLE_NEMESIS","selectedNemeses","getSelectedNemesesState","SelectedNemeses","getNemesisIdsArray","getNemesisIdsByExpansionId","nemesisId","getNemesesByExpansionId","getSelectedNemesesIds","getSelectedNemeses","SelectedMages_objectSpread","toggleMage","TOGGLE_MAGE","selectedMages","getSelectedMagesState","SelectedMages","getMageIdsArray","getMageIdsByExpansionId","mageId","getMagesByExpansionId","getSelectedMagesIds","getSelectedMages","Reducer","combineReducers","arguments","length","undefined","action","allExpansionsSelected","newExpansionsState","newState","selectedExpansionsToSave","loop","Cmd","run","setToDb","args","successActionCreator","failActionCreator","payload","getFromDb","includes","selectedCardsToSave","Predefined","Custom","noOp","toggleSetup","setup","setupType","TOGGLE_SETUP","createCustomSetup","CREATE_CUSTOM_SETUP","shortid","generate","saveCustomSetup","SAVE_CUSTOM_SETUP","cancelEdit","CANCEL_EDIT_SETUP","editCustomSetup","EDIT_CUSTOM_SETUP","deleteCustomSetup","DELETE_CUSTOM_SETUP","allSetsAreSelected","SupplySetups_objectSpread","val","getPredefined","SupplySetups","getCustom","getCustomAndPredefined","predefined","custom","getAllAsArray","customAndPredefined","allSets","set","allSetsSelected","_action$payload","isDirty","isNew","_state$Custom","rest","objectWithoutProperties","_toPropertyKey","_state$Custom2","createSlotList","amount","Array","from","shuffleDeck","deck","availableCards","slots","getEntity","getRandomEntity","slot","result","availableEntities","Math","floor","Count","Recruited","SET","SET_RANDOM","availableMages","count","min","createMageList","Selected","getRandomCardsByType","tileSetups","cardType","cardSlots","_ref","blueprints","blueprint","i","filteredByCost","setupBlueprint","indexOf","filterByCost","createCardList","_ref2","Cards","Selection","RandomSetup","SELECT_SETUP","Selection_objectSpread","SupplySelection","RESET","CREATE","_createSupply","gems","relics","spells","createSupply","RandomSetup_objectSpread","newStateWithDBWrite","setTurnOrderToDbSuccess","setTurnOrderToDbFailure","discard","started","init","INIT","draw","DRAW","newRound","NEW_ROUND","addToTop","ADD_TO_TOP","addToBottom","ADD_TO_BOTTOM","shuffleIntoDeck","SHUFFLE_INTO_DECK","SET_TURNORDER_TO_DB_SUCCESS","SET_TURNORDER_TO_DB_FAILURE","startGame","START_GAME","resetGame","RESET_GAME","INITIAL_PLAYER_SETUP","Mode","SelectedPlayerCount","SelectedSetup","setMode","mode","SET_MODE","selectPlayerCount","playerCountId","SELECT_PLAYER_COUNT","selectSetup","setupId","getMode","TurnOrder","Configuration","getSelectedSetup","getConfiguration","selectedSetup","adjustSetup","ActiveGame","Configuration_objectSpread","activeGameActions","cardDrawn","ActiveGame_objectSpread","cardToAdd","find","cardToShuffle","newDeck","MainContentLoading","Nemesis","Mages","Supply","RootReducer","reduceReducers","USER_CONFIGURATION_GET","list","availableNemeses","store","enhancers","applyMiddleware","apply","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","generateClassName","createGenerateClassName","jss","src_objectSpread","jssPreset","insertionPoint","document","getElementById","ReactDOM","render","es","JssProvider_default","components_App","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,SAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,uBACND,GAAI,sBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,aACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,sBACND,GAAI,qBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,KAIZC,GAAI,CACFP,GAAI,KACJC,KAAM,gBACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,aACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,UAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,KAIZE,GAAI,CACFR,GAAI,KACJC,KAAM,mBACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,cACND,GAAI,gBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,OACND,GAAI,SAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,KAIZG,GAAI,CACFT,GAAI,KACJC,KAAM,eACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,eACND,GAAI,iBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,KACXH,KAAM,KACND,GAAI,OAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,KAIZI,GAAI,CACFV,GAAI,KACJC,KAAM,cACNC,KAAM,aACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,aACND,GAAI,aAEN,CACEI,UAAW,KACXH,KAAM,eACND,GAAI,eAEN,CACEI,UAAW,KACXH,KAAM,kBACND,GAAI,iBAEN,CACEI,UAAW,KACXH,KAAM,cACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,WACND,GAAI,YAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,MACND,GAAI,OAEN,CACEI,UAAW,KACXH,KAAM,cACND,GAAI,eAEN,CACEI,UAAW,KACXH,KAAM,SACND,GAAI,UAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,aAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,uBACND,GAAI,sBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,KAIZK,GAAI,CACFX,GAAI,KACJC,KAAM,OACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,qBACND,GAAI,oBAEN,CACEI,UAAW,KACXH,KAAM,mBACND,GAAI,mBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,YAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,KAIZM,GAAI,CACFZ,GAAI,KACJC,KAAM,aACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,sBACND,GAAI,qBAEN,CACEI,UAAW,KACXH,KAAM,eACND,GAAI,iBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,SACND,GAAI,UAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,YAGR1D,MAAO,CACL,CACE4D,KAAM,QACNE,UAAW,KACXH,KAAM,OACND,GAAI,OACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,KAIZO,SAAU,CACRb,GAAI,WACJC,KAAM,WACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,WACXH,KAAM,cACND,GAAI,cAEN,CACEI,UAAW,WACXH,KAAM,cACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,WACXH,KAAM,WACND,GAAI,aAGR1D,MAAO,CACL,CACE4D,KAAM,QACNE,UAAW,WACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,QACND,GAAI,QACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,WACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,KAIZQ,OAAQ,CACNd,GAAI,SACJC,KAAM,SACNC,KAAM,aACNC,QAAS,CACP,CACEC,UAAW,SACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,SACXH,KAAM,YACND,GAAI,aAEN,CACEI,UAAW,SACXH,KAAM,cACND,GAAI,cAEN,CACEI,UAAW,SACXH,KAAM,kBACND,GAAI,kBAEN,CACEI,UAAW,SACXH,KAAM,kBACND,GAAI,kBAEN,CACEI,UAAW,SACXH,KAAM,iBACND,GAAI,kBAGRK,MAAO,CACL,CACED,UAAW,SACXH,KAAM,eACND,GAAI,eAEN,CACEI,UAAW,SACXH,KAAM,gBACND,GAAI,gBAEN,CACEI,UAAW,SACXH,KAAM,gBACND,GAAI,gBAEN,CACEI,UAAW,SACXH,KAAM,cACND,GAAI,eAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,KAIZS,OAAQ,CACNf,GAAI,SACJC,KAAM,SACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,SACXH,KAAM,cACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,SACXH,KAAM,MACND,GAAI,OAEN,CACEI,UAAW,SACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,SACXH,KAAM,QACND,GAAI,UAGR1D,MAAO,CACL,CACE4D,KAAM,QACNE,UAAW,SACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,wBACND,GAAI,uBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,iBACND,GAAI,iBACJM,KAAM,KAIZU,GAAI,CACFhB,GAAI,KACJC,KAAM,iBACNC,KAAM,OACNC,QAAS,GACTE,MAAO,GACP/D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,KAIZW,GAAI,CACFjB,GAAI,KACJC,KAAM,YACNC,KAAM,aACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,iBACND,GAAI,iBAEN,CACEI,UAAW,KACXH,KAAM,eACND,GAAI,eAEN,CACEI,UAAW,KACXH,KAAM,qBACND,GAAI,oBAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,cAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,WACND,GAAI,YAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,aAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,UAGR1D,MAAO,CACL,CACE4D,KAAM,MACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,OACND,GAAI,OACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAA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","file":"static/js/main.887ca72d.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport pink from '@material-ui/core/colors/pink'\n\nexport const muiTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: pink,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n})\n\nconst playerColors = {\n  player1: {\n    normal: '#8BC34A',\n    light: '#F1F8E9',\n  },\n  player2: {\n    normal: '#FF9800',\n    light: '#FFF3E0',\n  },\n  player3: {\n    normal: '#2196F3',\n    light: '#E3F2FD',\n  },\n  player4: {\n    normal: '#9C27B0',\n    light: '#F3E5F5',\n  },\n}\n\nexport const mainTheme = {\n  heading: {\n    fontSize: muiTheme.typography.pxToRem(15),\n  },\n  spacing: muiTheme.spacing,\n  drawerWidth: 240,\n  muiTransitions: {\n    appBarShift: muiTheme.transitions.create(['margin', 'width'], {\n      easing: muiTheme.transitions.easing.easeOut,\n      duration: muiTheme.transitions.duration.enteringScreen,\n    }),\n    content: muiTheme.transitions.create('margin', {\n      easing: muiTheme.transitions.easing.sharp,\n      duration: muiTheme.transitions.duration.leavingScreen,\n    }),\n    contentShift: muiTheme.transitions.create('margin', {\n      easing: muiTheme.transitions.easing.easeOut,\n      duration: muiTheme.transitions.duration.enteringScreen,\n    }),\n  },\n  colors: {\n    primary: muiTheme.palette.primary,\n    secondary: muiTheme.palette.secondary,\n    text: muiTheme.palette.text,\n    playerColors,\n    turnOrderCards: {\n      ...playerColors,\n      player12: {\n        normal: `linear-gradient(135deg, ${playerColors.player1.normal} 0%, ${\n          playerColors.player1.normal\n        } 50%, ${playerColors.player2.normal} 50%, ${\n          playerColors.player2.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player1.light} 0%, ${\n          playerColors.player1.light\n        } 50%, ${playerColors.player2.light} 50%, ${\n          playerColors.player2.light\n        } 100%)`,\n      },\n      player34: {\n        normal: `linear-gradient(135deg, ${playerColors.player3.normal} 0%, ${\n          playerColors.player3.normal\n        } 50%, ${playerColors.player4.normal} 50%, ${\n          playerColors.player4.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player3.light} 0%, ${\n          playerColors.player3.light\n        } 50%, ${playerColors.player4.light} 50%, ${\n          playerColors.player4.light\n        } 100%)`,\n      },\n      wild: {\n        normal: '#9E9E9E',\n        light: '#FAFAFA',\n      },\n      'wild-token': {\n        normal: `linear-gradient(135deg, ${playerColors.player1.normal} 0%, ${\n          playerColors.player1.normal\n        } 33%, ${playerColors.player2.normal} 33%, ${\n          playerColors.player2.normal\n        } 66%, ${playerColors.player3.normal} 66%, ${\n          playerColors.player3.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player1.light} 0%, ${\n          playerColors.player1.light\n        } 33%, ${playerColors.player2.light} 33%, ${\n          playerColors.player2.light\n        } 66%, ${playerColors.player3.light} 66%, ${\n          playerColors.player3.light\n        } 100%)`,\n      },\n      nemesis: {\n        normal: '#f44336',\n        light: '#ffebee',\n      },\n      maelstrom: {\n        normal: '#795548',\n        light: '#EFEBE9',\n      },\n      blitz: {\n        normal: '#607D8B',\n        light: '#ECEFF1',\n      },\n    },\n    cards: {\n      gem: {\n        color: '#B39DDB',\n        background: '#EDE7F6',\n      },\n      relic: {\n        color: '#90CAF9',\n        background: '#E3F2FD',\n      },\n      spell: {\n        color: '#FFCC80',\n        background: '#FFF3E0',\n      },\n      nemesis: {\n        color: '#E0E0E0',\n      },\n      mage: {\n        color: '#E0E0E0',\n      },\n    },\n  },\n}\n\nexport type TurnOrderColors = typeof mainTheme.colors.turnOrderCards\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  max-width: 500px;\n  min-width: 300px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-bottom: 72px;\n`\n\nexport default Wrapper\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\n\nimport 'rpg-awesome/css/rpg-awesome.min.css'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\n\nimport { mainTheme, muiTheme } from '../../mainTheme'\n\n// import MainApp from './MainApp'\nimport Wrapper from './Wrapper'\n\ntype Props = { classes: any }\n\nconst App = React.memo(() => (\n  <ThemeProvider theme={mainTheme}>\n    <MuiThemeProvider theme={muiTheme}>\n      <Wrapper>\n        <CssBaseline />\n        <Card style={{\n          padding: '20px'\n        }}>\n          <Typography>\n            Hey fellow breach mage. We recently released version 1.8.0 which\n            lead to a few technical changes. Therefore we had to change our hosting\n            and add a custom domain.\n\n            <br/>\n            <br/>\n\n            From now on you will find our Aeons End Randomizer here:\n            <a href='https://aeons-end-randomizer.de' target='_blank' rel='noopener noreferrer'>https://aeons-end-randomizer.de</a>\n\n            <br/>\n            <br/>\n\n            Unfortunately that also means that you will have to re-configure your settings.\n            But hey - you can now customize which cards / mages / nemesis you would like to include into\n            your randomization.\n\n            <br/>\n            <br/>\n\n            <b>NOTE: If you used the 'save to homescreen' feature, you will have to do so again with the new domain!</b>\n          </Typography>\n        </Card>\n      </Wrapper>\n    </MuiThemeProvider>\n  </ThemeProvider>\n))\n\nApp.displayName = 'App'\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { IExpansionData } from '../types'\n\nexport const DATA: IExpansionData = {\n  NA: {\n    id: 'NA',\n    name: 'The New Age',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'NA',\n        name: 'Maggoth',\n        id: 'Maggoth',\n      },\n      {\n        expansion: 'NA',\n        name: 'Arachnos',\n        id: 'Arachnos',\n      },\n      {\n        expansion: 'NA',\n        name: 'Ageless Walker',\n        id: 'Ageless Walker',\n      },\n      {\n        expansion: 'NA',\n        name: 'Fenrix',\n        id: 'Fenrix',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'NA',\n        name: 'Sahala',\n        id: 'Sahala',\n      },\n      {\n        expansion: 'NA',\n        name: 'Gygar',\n        id: 'Gygar',\n      },\n      {\n        expansion: 'NA',\n        name: 'Soskel',\n        id: 'Soskel',\n      },\n      {\n        expansion: 'NA',\n        name: 'Taqren',\n        id: 'Taqren',\n      },\n      {\n        expansion: 'NA',\n        name: 'Talix',\n        id: 'Talix',\n      },\n      {\n        expansion: 'NA',\n        name: 'Rhia',\n        id: 'Rhia',\n      },\n      {\n        expansion: 'NA',\n        name: 'Claudia',\n        id: 'Claudia',\n      },\n      {\n        expansion: 'NA',\n        name: 'Lost',\n        id: 'Lost',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Lurking Sionite',\n        id: 'LurkingSionite',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Unrefined Blaststone',\n        id: 'UnrefinedBlaststone',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Exogranite',\n        id: 'Exogranite',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Recurring Jasper',\n        id: 'RecurringJasper',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Energized Rubidium',\n        id: 'EnergizedRubidium',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'NA',\n        name: 'Resonant Pearl',\n        id: 'ResonantPearl',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Caged Fire',\n        id: 'CagedFire',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Galvanized Bauble',\n        id: 'GalvanizedBauble',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Aether Conduit',\n        id: 'AetherConduit',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Well of Energy',\n        id: 'WellOfEnergy',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Pain Conduit',\n        id: 'PainConduit',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Link Conduit',\n        id: 'LinkConduit',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'NA',\n        name: 'Marble Galaxy',\n        id: 'MarbleGalaxy',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Deluge of Power',\n        id: 'DelugeOfPower',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Reverberating Shock',\n        id: 'ReverberatingShock',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Fatal Harmony',\n        id: 'FatalHarmony',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Bouncing Boom',\n        id: 'BouncingBoom',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Spirit Lift',\n        id: 'SpiritLift',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Tethered Darts',\n        id: 'Tethered Darts',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Force Amplifier',\n        id: 'ForceAmplifier',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Imbued Smash',\n        id: 'ImbuedSmash',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'NA',\n        name: 'Pattern Strike',\n        id: 'PatternStrike',\n        cost: 7,\n      },\n    ],\n  },\n  IW: {\n    id: 'IW',\n    name: 'Into The Wild',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'IW',\n        name: 'Necroswarm',\n        id: 'Necroswarm',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'IW',\n        name: 'Inco',\n        id: 'Inco',\n      },\n      {\n        expansion: 'IW',\n        name: 'Razra',\n        id: 'Razra',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'IW',\n        name: 'Jeweled Brain',\n        id: 'JeweledBrain',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'IW',\n        name: 'Blast Sphere',\n        id: 'BlastSphere',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'IW',\n        name: 'Wound Mender',\n        id: 'WoundMender',\n        cost: 8,\n      },\n    ],\n  },\n  SD: {\n    id: 'SE',\n    name: 'Shattered Dreams',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'SD',\n        name: 'The Wailing',\n        id: 'The Wailing',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'SD',\n        name: 'Nook',\n        id: 'Nook',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'SD',\n        name: 'Olivinite',\n        id: 'Olivinite',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'SD',\n        name: 'Cache Glass',\n        id: 'CacheGlass',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'SD',\n        name: 'Reflective Conduit',\n        id: 'ReflectiveConduit',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'SD',\n        name: 'Will Weaver',\n        id: 'WillWeaver',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Breach Seeker',\n        id: 'BreachSeeker',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Crescendo Ray',\n        id: 'CrescendoRay',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Storm Vapors',\n        id: 'StormVapors',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Mantra of Strength',\n        id: 'MantraOfStrength',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Embody Flame',\n        id: 'EmbodyFlame',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'SD',\n        name: 'Snap Ritual',\n        id: 'SnapRitual',\n        cost: 6,\n      },\n    ],\n  },\n  TA: {\n    id: 'TA',\n    name: 'The Ancients',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'TA',\n        name: 'The Wanderer',\n        id: 'The Wanderer',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'TA',\n        name: 'Mazra',\n        id: 'Mazra',\n      },\n      {\n        expansion: 'TA',\n        name: 'Qu',\n        id: 'Qu',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'TA',\n        name: 'Shining Fluorite',\n        id: 'ShiningFluorite',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TA',\n        name: 'Polyphase Turbine',\n        id: 'PolyphaseTurbine',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TA',\n        name: 'Breach Extractor',\n        id: 'BreachExtractor',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TA',\n        name: 'Focusing Conduit',\n        id: 'FocusingConduit',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TA',\n        name: 'Dual Flash',\n        id: 'DualFlash',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TA',\n        name: 'Dust Caller',\n        id: 'DustCaller',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TA',\n        name: 'Symbiotic Synapse',\n        id: 'SymbioticSynapse',\n        cost: 7,\n      },\n    ],\n  },\n  WE: {\n    id: 'WE',\n    name: 'War Eternal',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'WE',\n        name: 'Gate Witch',\n        id: 'GateWitch',\n      },\n      {\n        expansion: 'WE',\n        name: 'Hollow Crown',\n        id: 'HollowCrown',\n      },\n      {\n        expansion: 'WE',\n        name: 'Magus Of Cloaks',\n        id: 'MagusOfCloaks',\n      },\n      {\n        expansion: 'WE',\n        name: 'Umbra Titan',\n        id: 'UmbraTitan',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'WE',\n        name: 'Dezmodia',\n        id: 'Dezmodia',\n      },\n      {\n        expansion: 'WE',\n        name: 'Garu',\n        id: 'Garu',\n      },\n      {\n        expansion: 'WE',\n        name: 'Gex',\n        id: 'Gex',\n      },\n      {\n        expansion: 'WE',\n        name: 'Mazahaedron',\n        id: 'Mazahaedron',\n      },\n      {\n        expansion: 'WE',\n        name: 'MistWE',\n        id: 'MistWE',\n      },\n      {\n        expansion: 'WE',\n        name: 'Quilius',\n        id: 'Quilius',\n      },\n      {\n        expansion: 'WE',\n        name: 'Ulgimor',\n        id: 'Ulgimor',\n      },\n      {\n        expansion: 'WE',\n        name: 'Yan Magda',\n        id: 'YanMagda',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Erratic Ingot',\n        id: 'ErraticIngot',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Reduce To Ash',\n        id: 'ReduceToAsh',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Vortex Gauntlet',\n        id: 'VortexGauntlet',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Carbonize',\n        id: 'Carbonize',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Equilibrium',\n        id: 'Equilibrium',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Volcanic Glass',\n        id: 'VolcanicGlass',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Convection Field',\n        id: 'ConvectionField',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Jagged Lightning',\n        id: 'JaggedLightning',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Bloodstone Jewel',\n        id: 'BloodstoneJewel',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Kindle',\n        id: 'Kindle',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Thoughtform Familiar',\n        id: 'ThoughtformFamiliar',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Crystallize',\n        id: 'Crystallize',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Fiery Torrent',\n        id: 'FieryTorrent',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Celestial Spire',\n        id: 'CelestialSpire',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Conjure The Lost',\n        id: 'ConjureTheLost',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Nova Forge',\n        id: 'NovaForge',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Dread Diamond',\n        id: 'DreadDiamond',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Cairn Compass',\n        id: 'CairnCompass',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Scoria Slag',\n        id: 'ScoriaSlag',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Breach Ore',\n        id: 'BreachOre',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Fiend Catcher',\n        id: 'FiendCatcher',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Pyrotechnic Surge',\n        id: 'PyrotechnicSurge',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Aurora',\n        id: 'Aurora',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Conclave Scroll',\n        id: 'ConclaveScroll',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Primordial Fetish',\n        id: 'PrimordialFetish',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Frozen Magmite',\n        id: 'FrozenMagmite',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Mages Totem',\n        id: 'MagesTotem',\n        cost: 2,\n      },\n    ],\n  },\n  TV: {\n    id: 'TV',\n    name: 'Void',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'TV',\n        name: 'Knight Of Shackles',\n        id: 'KnightOfShackles',\n      },\n      {\n        expansion: 'TV',\n        name: 'Maiden Of Thorns',\n        id: 'MaidenOfThorns',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'TV',\n        name: 'Sparrow',\n        id: 'Sparrow',\n      },\n      {\n        expansion: 'TV',\n        name: 'XaxosTV',\n        id: 'XaxosTV',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'TV',\n        name: 'Fossilized Scarab',\n        id: 'FossilizedScarab',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Thermal Dart',\n        id: 'ThermalDart',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Resonate',\n        id: 'Resonate',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Conflagration',\n        id: 'Conflagration',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TV',\n        name: 'Dimensional Key',\n        id: 'DimensionalKey',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Inner Fire',\n        id: 'InnerFire',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Fulminate',\n        id: 'Fulminate',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TV',\n        name: 'Eternity Charm',\n        id: 'EternityCharm',\n        cost: 3,\n      },\n    ],\n  },\n  OD: {\n    id: 'OD',\n    name: 'Outer Dark',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'OD',\n        name: 'Thrice Dead Prophet',\n        id: 'ThriceDeadProphet',\n      },\n      {\n        expansion: 'OD',\n        name: 'Wraithmonger',\n        id: 'Wraithmonger',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'OD',\n        name: 'Indira',\n        id: 'Indira',\n      },\n      {\n        expansion: 'OD',\n        name: 'Remnant',\n        id: 'Remnant',\n      },\n    ],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Char',\n        id: 'Char',\n        cost: 8,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Alien Element',\n        id: 'AlienElement',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Scorch',\n        id: 'Scorch',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Pyromancy',\n        id: 'Pyromancy',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Feedback Aura',\n        id: 'FeedbackAura',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Catalyst',\n        id: 'Catalyst',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Pain Stone',\n        id: 'PainStone',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'OD',\n        name: 'Astral Cube',\n        id: 'AstralCube',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'OD',\n        name: 'Riddle Sphere',\n        id: 'RiddleSphere',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Nether Conduit',\n        id: 'NetherConduit',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Haunted Berylite',\n        id: 'HauntedBerylite',\n        cost: 3,\n      },\n    ],\n  },\n  Nameless: {\n    id: 'Nameless',\n    name: 'Nameless',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'Nameless',\n        name: 'Blight Lord',\n        id: 'BlightLord',\n      },\n      {\n        expansion: 'Nameless',\n        name: 'Wayward One',\n        id: 'WaywardOne',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Nameless',\n        name: 'Malastar',\n        id: 'Malastar',\n      },\n    ],\n    cards: [\n      {\n        type: 'Relic',\n        expansion: 'Nameless',\n        name: 'Molten Hammer',\n        id: 'MoltenHammer',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Radiance',\n        id: 'Radiance',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Blaze',\n        id: 'Blaze',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Scrying Bolt',\n        id: 'ScryingBolt',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Sages Brand',\n        id: 'SagesBrand',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Nameless',\n        name: 'Leeching Agate',\n        id: 'LeechingAgate',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Nameless',\n        name: 'Temporal Helix',\n        id: 'TemporalHelix',\n        cost: 7,\n      },\n    ],\n  },\n  Legacy: {\n    id: 'Legacy',\n    name: 'Legacy',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'Legacy',\n        name: 'Bladius',\n        id: 'Bladius',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Deathmind',\n        id: 'Deathmind',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Fungal Mesh',\n        id: 'FungalMesh',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Maelstrom Risen',\n        id: 'MaelstromRisen',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Spawning Horror',\n        id: 'SpawningHorror',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Xaxos Ascended',\n        id: 'XaxosAscended',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Green',\n        id: 'LegacyGreen',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Yellow',\n        id: 'LegacyYellow',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Orange',\n        id: 'LegacyOrange',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Blue',\n        id: 'LegacyBlue',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Branching Radite',\n        id: 'BranchingRadite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Fire Chakram',\n        id: 'FireChakram',\n        cost: 2,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Brane Knife',\n        id: 'BraneKnife',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Fulmite Slab',\n        id: 'FulmiteSlab',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Gilded Marble',\n        id: 'GildedMarble',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Voltaic Relay',\n        id: 'VoltaicRelay',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Sparking Siphon',\n        id: 'SparkingSiphon',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Communion',\n        id: 'BreachCommunion',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Infernal Mirror',\n        id: 'InfernalMirror',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Geophage',\n        id: 'Geophage',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Force Transfusion',\n        id: 'ForceTransfusion',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Conductive Grit',\n        id: 'ConductiveGrit',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Ancient Cyanolith',\n        id: 'AncientCyanolith',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Ethereal Hand',\n        id: 'EtherealHand',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Bending Beam',\n        id: 'BendingBeam',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Entangled Shard',\n        id: 'EntangledShard',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Arcane Salvo',\n        id: 'ArcaneSalvo',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Phased Portalite',\n        id: 'PhasedPortalite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Pyro Geist',\n        id: 'PyroGeist',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Flare',\n        id: 'BreachFlare',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Thunderous Oath',\n        id: 'ThunderousOath',\n        cost: 8,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Soothing Torporene',\n        id: 'SoothingTorporene',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Arcing Silicate',\n        id: 'ArcingSilicate',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Warping Haze',\n        id: 'WarpingHaze',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Incinerating Fist',\n        id: 'IncineratingFist',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Reality Stabilizer',\n        id: 'RealityStabilizer',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Collision',\n        id: 'BreachCollision',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Fiery Conclusion',\n        id: 'FieryConclusion',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Starfire Frenzy',\n        id: 'StarfireFrenzy',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Crumbling Compound',\n        id: 'CrumblingCompound',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Prophetic Lens',\n        id: 'PropheticLens',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Adrenal Batteries',\n        id: 'AdrenalBatteries',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Refined Lumenium',\n        id: 'RefinedLumenium',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Void Mill',\n        id: 'VoidMill',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Gravity Node',\n        id: 'GravityNode',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Neural Wreath',\n        id: 'NeuralWreath',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Sphere OfInversion',\n        id: 'SphereOfInversion',\n        cost: 9,\n      },\n    ],\n  },\n  Depths: {\n    id: 'Depths',\n    name: 'Depths',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'Depths',\n        name: 'Horde Crone',\n        id: 'HordeCrone',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Depths',\n        name: 'Nym',\n        id: 'Nym',\n      },\n      {\n        expansion: 'Depths',\n        name: 'Reeve',\n        id: 'Reeve',\n      },\n      {\n        expansion: 'Depths',\n        name: 'Zhana',\n        id: 'Zhana',\n      },\n    ],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Void Bond',\n        id: 'VoidBond',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Combustion',\n        id: 'Combustion',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Depths',\n        name: 'Vim Dynamo',\n        id: 'VimDynamo',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Disintegrating Scythe',\n        id: 'DisintegratingScythe',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Monstrous Inferno',\n        id: 'MonstrousInferno',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Devouring Shadow',\n        id: 'DevouringShadow',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Depths',\n        name: 'Banishing Topaz',\n        id: 'BanishingTopaz',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Depths',\n        name: 'Transmogrifier',\n        id: 'Transmogrifier',\n        cost: 4,\n      },\n    ],\n  },\n  BS: {\n    id: 'BS',\n    name: 'Buried Secrets',\n    type: 'mini',\n    nemeses: [],\n    mages: [],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Triplite Core',\n        id: 'TripliteCore',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Nerve Jab',\n        id: 'NerveJab',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Double Tap',\n        id: 'DoubleTap',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Oblivium Resin',\n        id: 'ObliviumResin',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Summonite',\n        id: 'Summonite',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Manifold Container',\n        id: 'ManifoldContainer',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Draining Touch',\n        id: 'DrainingTouch',\n        cost: 2,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Jolting Crust',\n        id: 'JoltingCrust',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Mentite Chunk',\n        id: 'MentiteChunk',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Soul Cords',\n        id: 'SoulCords',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Voidium Spike',\n        id: 'VoidiumSpike',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Precision Shot',\n        id: 'PrecisionShot',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Muted Lacosite',\n        id: 'MutedLacosite',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Blade Of Wisdom',\n        id: 'BladeOfWisdom',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Stunning Force',\n        id: 'StunningForce',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Flash Of Intellect',\n        id: 'FlashOfIntellect',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Scholars Opus',\n        id: 'ScholarsOpus',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Bottled Star',\n        id: 'BottledStar',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Burning Current',\n        id: 'BurningCurrent',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Psychic Eruption',\n        id: 'PsychicEruption',\n        cost: 8,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Living Gauntlet',\n        id: 'LivingGauntlet',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Shining Tetrite',\n        id: 'ShiningTetrite',\n        cost: 6,\n      },\n    ],\n  },\n  AE: {\n    id: 'AE',\n    name: 'Aeons End',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'AE',\n        name: 'Carapace Queen',\n        id: 'CarapaceQueen',\n      },\n      {\n        expansion: 'AE',\n        name: 'Crooked Mask',\n        id: 'CrookedMask',\n      },\n      {\n        expansion: 'AE',\n        name: 'Prince Of Gluttons',\n        id: 'PrinceOfGluttons',\n      },\n      {\n        expansion: 'AE',\n        name: 'Rageborne',\n        id: 'RageBorne',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'AE',\n        name: 'Adelheim',\n        id: 'Adelheim',\n      },\n      {\n        expansion: 'AE',\n        name: 'Brama',\n        id: 'Brama',\n      },\n      {\n        expansion: 'AE',\n        name: 'Jian',\n        id: 'Jian',\n      },\n      {\n        expansion: 'AE',\n        name: 'Kadir',\n        id: 'Kadir',\n      },\n      {\n        expansion: 'AE',\n        name: 'Lash',\n        id: 'Lash',\n      },\n      {\n        expansion: 'AE',\n        name: 'Mist',\n        id: 'Mist',\n      },\n      {\n        expansion: 'AE',\n        name: 'Phaedraxa',\n        id: 'Phaedraxa',\n      },\n      {\n        expansion: 'AE',\n        name: 'Xaxos',\n        id: 'Xaxos',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Diamond Cluster',\n        id: 'DiamondCluster',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Chaos Arc',\n        id: 'ChaosArc',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Ignite',\n        id: 'Ignite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Essence Theft',\n        id: 'EssenceTheft',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Searing Ruby',\n        id: 'SearingRuby',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Feral Lightning',\n        id: 'FeralLightning',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Planar Insight',\n        id: 'PlanarInsight',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Spectral Echo',\n        id: 'SpectralEcho',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Burning Opal',\n        id: 'BurningOpal',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Consuming Void',\n        id: 'ConsumingVoid',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Unstable Prism',\n        id: 'UnstablePrism',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Clouded Sapphire',\n        id: 'CloudedSapphire',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Mages Talisman',\n        id: 'MagesTalisman',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Flexing Dagger',\n        id: 'FlexingDagger',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Lava Tendril',\n        id: 'LavaTendril',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Bottled Vortex',\n        id: 'BottledVortex',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Arcane Nexus',\n        id: 'ArcaneNexus',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Dark Fire',\n        id: 'DarkFire',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Phoenix Flame',\n        id: 'PhoenixFlame',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Jade',\n        id: 'Jade',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Amplify Vision',\n        id: 'AmplifyVision',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Vriswood Amber',\n        id: 'VriswoodAmber',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Blasting Staff',\n        id: 'BlastingStaff',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Sifters Pearl',\n        id: 'SiftersPearl',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Wildfire Whip',\n        id: 'WildfireWhip',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Focusing Orb',\n        id: 'FocusingOrb',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Oblivion Swell',\n        id: 'OblivionSwell',\n        cost: 5,\n      },\n    ],\n  },\n  promos: {\n    id: 'promos',\n    name: 'Promos',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Drown in Flames',\n        id: 'DrownInFlames',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Fleeting Vision',\n        id: 'FleetingVision',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Splinter Missile',\n        id: 'SplinterMissile',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'promos',\n        name: 'Echo Stone',\n        id: 'EchoStone',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Thieving Spirit',\n        id: 'ThievingSpirit',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'promos',\n        name: 'Fractured Quartz',\n        id: 'FracturedQuartz',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'promos',\n        name: 'Rock Launcher',\n        id: 'RockLauncher',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'promos',\n        name: 'Abacus of Ignition',\n        id: 'AbacusOfIgnition',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Illuminating Flame',\n        id: 'IlluminatingFlame',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'promos',\n        name: 'Chronal Arc',\n        id: 'ChronalArc',\n        cost: 7,\n      },\n    ],\n  },\n}\n","import { ITurnOrderSetups, ITurnOrderCard } from '../types'\n\nexport const TURNORDERCARDS: { [key: string]: ITurnOrderCard } = {\n  'player1-1': { id: 'player1-1', name: 'Player 1', type: 'player1' },\n  'player1-2': { id: 'player1-2', name: 'Player 1', type: 'player1' },\n  'player1-3': { id: 'player1-3', name: 'Player 1', type: 'player1' },\n  'player1-4': { id: 'player1-4', name: 'Player 1', type: 'player1' },\n\n  'player2-1': { id: 'player2-1', name: 'Player 2', type: 'player2' },\n  'player2-2': { id: 'player2-2', name: 'Player 2', type: 'player2' },\n\n  'player3-1': { id: 'player3-1', name: 'Player 3', type: 'player3' },\n  'player4-1': { id: 'player4-1', name: 'Player 4', type: 'player4' },\n\n  'player12-1': { id: 'player12-1', name: 'Player 1/2', type: 'player12' },\n  'player12-2': { id: 'player12-2', name: 'Player 1/2', type: 'player12' },\n  'player34-1': { id: 'player34-1', name: 'Player 3/4', type: 'player34' },\n  'player34-2': { id: 'player34-2', name: 'Player 3/4', type: 'player34' },\n\n  wild: { id: 'wild', name: 'Wild', type: 'wild' },\n  wildToken: { id: 'wildToken', name: 'Wild Token', type: 'wild-token' },\n\n  'nemesis-1': { id: 'nemesis-1', name: 'Nemesis', type: 'nemesis' },\n  'nemesis-2': { id: 'nemesis-2', name: 'Nemesis', type: 'nemesis' },\n\n  maelstrom: {\n    id: 'maelstrom',\n    name: 'Maelstrom Assault',\n    type: 'maelstrom',\n  },\n\n  blitz: {\n    id: 'blitz',\n    name: 'Blitz',\n    type: 'blitz',\n  },\n}\n\nexport const TURNORDERSETUPS: ITurnOrderSetups = {\n  onePlayer: {\n    id: 'onePlayer',\n    name: '1',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default (3 ToC)',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player1-3'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      '4toc': {\n        id: '4toc',\n        name: '4 ToC',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player1-3'],\n          TURNORDERCARDS['player1-4'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  twoPlayers: {\n    id: 'twoPlayers',\n    name: '2',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player2-2'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  threePlayers: {\n    id: 'threePlayers',\n    name: '3',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['wild'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      wildToken: {\n        id: 'wildToken',\n        name: 'Wild Token',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['wildToken'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  fourPlayers: {\n    id: 'fourPlayers',\n    name: '4',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['player4-1'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      splitPlayers: {\n        id: 'splitPlayers',\n        name: 'Split Player Cards (1/2, 3/4)',\n        turnOrderCards: [\n          TURNORDERCARDS['player12-1'],\n          TURNORDERCARDS['player12-2'],\n          TURNORDERCARDS['player34-1'],\n          TURNORDERCARDS['player34-2'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n}\n","import { DATA } from './aeonsData'\nimport { MARKETSETUPS } from './marketSetups'\nimport { TURNORDERSETUPS, TURNORDERCARDS } from './turnOrderSetups'\nimport * as types from '../types'\n\nconst EXPANSIONS = Object.keys(DATA)\nconst DEFAULTSUPPLYCOUNT = 9\n\nconst normalize = (array: Array<any>) =>\n  array.reduce(\n    (acc, entity) => ({\n      entities: {\n        ...acc.entities,\n        [entity.id]: entity,\n      },\n      ids: [...acc.ids, entity.id],\n    }),\n    {\n      entities: {},\n      ids: [],\n    } as {\n      entities: { [key: string]: Object }\n      ids: string[]\n    }\n  )\n\nconst NORMALIZEDDATA = EXPANSIONS.reduce(\n  (acc: types.NormalizedData, id: string) => {\n    const expansion = DATA[id]\n    const nemeses = normalize(expansion.nemeses)\n    const mages = normalize(expansion.mages)\n    const cards = normalize(expansion.cards)\n\n    return {\n      expansions: {\n        ...acc.expansions,\n        [id]: {\n          id,\n          name: expansion.name,\n          type: expansion.type,\n        },\n      },\n      nemeses: {\n        ...acc.nemeses,\n        ...nemeses.entities,\n      },\n      mages: {\n        ...acc.mages,\n        ...mages.entities,\n      },\n      cards: {\n        ...acc.cards,\n        ...cards.entities,\n      },\n      expansionIds: [...acc.expansionIds, id],\n      nemesisIds: [...acc.nemesisIds, ...nemeses.ids],\n      mageIds: [...acc.mageIds, ...mages.ids],\n      cardIds: [...acc.cardIds, ...cards.ids],\n    }\n  },\n  {\n    expansions: {},\n    nemeses: {},\n    mages: {},\n    cards: {},\n    expansionIds: [],\n    nemesisIds: [],\n    mageIds: [],\n    cardIds: [],\n  } as types.NormalizedData\n)\n\nexport default {\n  DATA,\n  NORMALIZEDDATA,\n  DEFAULTSUPPLYCOUNT,\n  MARKETSETUPS,\n  TURNORDERSETUPS,\n  TURNORDERCARDS,\n}\n","import { IMarketSetups } from '../types'\n\nexport const MARKETSETUPS: IMarketSetups = {\n  market1Inc: {\n    id: 'market1Inc',\n    name: 'Market Setup 1 (inclusive)',\n    type: 'custom',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<=', threshold: 5 },\n      { type: 'Spell', operation: '<=', threshold: 5 },\n      { type: 'Spell', operation: '>=', threshold: 5 },\n      { type: 'Spell', operation: '>=', threshold: 5 },\n    ],\n  },\n  market1: {\n    id: 'market1',\n    name: 'Market Setup 1',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n    ],\n  },\n  market2: {\n    id: 'market2',\n    name: 'Market Setup 2',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 3 },\n      { type: 'Gem', operation: '>', threshold: 3 },\n      { type: 'Gem', operation: '>', threshold: 3 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  market3: {\n    id: 'market3',\n    name: 'Market Setup 3',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: 'OR', values: [4, 5] },\n      { type: 'Gem', operation: 'OR', values: [4, 5] },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '=', threshold: 3 },\n      { type: 'Spell', operation: '=', threshold: 4 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n    ],\n  },\n  market4: {\n    id: 'market4',\n    name: 'Market Setup 4',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '>', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: '<', threshold: 4 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: 'ANY' },\n    ],\n  },\n  market5: {\n    id: 'market5',\n    name: 'Market Setup 5',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '=', threshold: 2 },\n      { type: 'Gem', operation: '=', threshold: 3 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 5 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '=', threshold: 4 },\n      { type: 'Spell', operation: '=', threshold: 5 },\n      { type: 'Spell', operation: '=', threshold: 6 },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  market6: {\n    id: 'market6',\n    name: 'Market Setup 6',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '=', threshold: 3 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Relic', operation: '<', threshold: 4 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: 'OR', values: [3, 4] },\n      { type: 'Spell', operation: 'OR', values: [5, 6] },\n      { type: 'Spell', operation: 'OR', values: [5, 6] },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  random: {\n    id: 'random',\n    name: 'Random Setup (Default)',\n    type: 'official',\n    default: true, // this flag removes the setup from the settings, so it will always be active\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n    ],\n  },\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport * as types from '../../../../types'\nimport config from '../../../../config'\nimport { RootState } from '../..'\n\nconst EXPANSIONS_DB_KEY = 'expansions-1.8'\n\n///////////\n// STATE //\n///////////\n\ntype Expansions = {\n  [key: string]: types.Expansion & { selected: boolean }\n}\n\nexport type State = Readonly<{\n  expansions: Expansions\n  expansionIds: string[]\n}>\n\nexport const initialState: State = {\n  expansions: config.NORMALIZEDDATA.expansionIds.reduce(\n    (acc, id) => ({\n      ...acc,\n      [id]: {\n        ...config.NORMALIZEDDATA.expansions[id],\n        selected: false,\n      },\n    }),\n    {}\n  ),\n  expansionIds: config.NORMALIZEDDATA.expansionIds,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_ALL = 'Settings/Expansions/SelectedExpansions/TOGGLE_ALL',\n  TOGGLE_EXPANSION = 'Settings/Expansions/SelectedExpansions/TOGGLE_EXPANSION',\n  SET_TO_DB = 'Settings/Expansions/SelectedExpansions/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SelectedExpansions/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SelectedExpansions/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  toggleAll: () => createAction(ActionTypes.TOGGLE_ALL),\n  toggleExpansion: (id: string) =>\n    createAction(ActionTypes.TOGGLE_EXPANSION, id),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (selectedExpansions: string[]) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, selectedExpansions),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nconst allExpansionsAreSelected = (expansions: Expansions) =>\n  Object.values(expansions).every(exp => exp.selected)\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_ALL: {\n      const allExpansionsSelected = allExpansionsAreSelected(state.expansions)\n      const newExpansionsState = Object.values(state.expansions).reduce(\n        (acc, exp) => ({\n          ...acc,\n          [exp.id]: {\n            ...exp,\n            selected: !allExpansionsSelected,\n          },\n        }),\n        {}\n      )\n\n      const newState: State = {\n        ...state,\n        expansions: newExpansionsState,\n      }\n\n      const selectedExpansionsToSave = state.expansionIds.filter(\n        id => newState.expansions[id].selected\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [EXPANSIONS_DB_KEY, selectedExpansionsToSave],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.TOGGLE_EXPANSION: {\n      const newState = {\n        ...state,\n        expansions: {\n          ...state.expansions,\n          [action.payload]: {\n            ...state.expansions[action.payload],\n            selected: !state.expansions[action.payload].selected,\n          },\n        },\n      }\n\n      const selectedExpansionsToSave = state.expansionIds.filter(\n        id => newState.expansions[id].selected\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [EXPANSIONS_DB_KEY, selectedExpansionsToSave],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [EXPANSIONS_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      if (!action.payload) {\n        return initialState\n      }\n\n      const selectedExpansions: string[] = action.payload\n      const newState = Object.values(state.expansions).reduce(\n        (acc, exp) => ({\n          ...acc,\n          expansions: {\n            ...acc.expansions,\n            [exp.id]: {\n              ...exp,\n              selected: selectedExpansions.includes(exp.id),\n            },\n          },\n        }),\n        state\n      )\n\n      return newState || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getSelectedExpansionsState = (state: RootState) =>\n  state.Settings.Expansions.SelectedExpansions\n\nconst getSelectedExpansionsArray = createSelector(\n  [getSelectedExpansionsState],\n  state => state.expansionIds.filter(id => state.expansions[id].selected)\n)\n\nconst getAllExpansionsSelected = createSelector(\n  [getSelectedExpansionsState],\n  state => allExpansionsAreSelected(state.expansions)\n)\n\nconst getHasStandaloneExpansion = createSelector(\n  [getSelectedExpansionsArray],\n  selectedExpansions =>\n    selectedExpansions.some(\n      expansion => config.DATA[expansion].type === 'standalone'\n    )\n)\n\nconst getStandaloneExpansionIds = createSelector(\n  [getSelectedExpansionsState],\n  state =>\n    state.expansionIds.filter(id => state.expansions[id].type === 'standalone')\n)\nconst getMiniExpansionIds = createSelector(\n  [getSelectedExpansionsState],\n  state => state.expansionIds.filter(id => state.expansions[id].type === 'mini')\n)\nconst getPromoIds = createSelector(\n  [getSelectedExpansionsState],\n  state =>\n    state.expansionIds\n      .filter(id => state.expansions[id].type === 'promo')\n      .sort((a, b) => {\n        const promoA = state.expansions[a].name\n        const promoB = state.expansions[b].name\n\n        if (promoA < promoB) {\n          return -1\n        }\n\n        if (promoA > promoB) {\n          return 1\n        }\n\n        return 0\n      })\n)\n\nconst getStandaloneExpansions = createSelector(\n  [getSelectedExpansionsState, getStandaloneExpansionIds],\n  (state, ids) => ids.map(id => state.expansions[id])\n)\nconst getMiniExpansions = createSelector(\n  [getSelectedExpansionsState, getMiniExpansionIds],\n  (state, ids) => ids.map(id => state.expansions[id])\n)\nconst getPromos = createSelector(\n  [getSelectedExpansionsState, getPromoIds],\n  (state, ids) => ids.map(id => state.expansions[id])\n)\n\nexport const selectors = {\n  getSelectedExpansionsState,\n  getSelectedExpansionsArray,\n  getAllExpansionsSelected,\n  getHasStandaloneExpansion,\n  getStandaloneExpansionIds,\n  getMiniExpansionIds,\n  getPromoIds,\n  getStandaloneExpansions,\n  getMiniExpansions,\n  getPromos,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport * as types from '../../../../types'\nimport config from '../../../../config'\nimport { RootState } from '../..'\n\nconst CARDS_DB_KEY = 'cards-1.8'\n\n///////////\n// STATE //\n///////////\n\ntype Cards = {\n  [key: string]: types.ICard & { selected: boolean }\n}\n\nexport type State = Readonly<{\n  cards: Cards\n  cardIds: string[]\n}>\n\nexport const initialState: State = {\n  cards: config.NORMALIZEDDATA.cardIds.reduce(\n    (acc, id) => ({\n      ...acc,\n      [id]: {\n        ...config.NORMALIZEDDATA.cards[id],\n        selected: true,\n      },\n    }),\n    {}\n  ),\n  cardIds: config.NORMALIZEDDATA.cardIds,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_CARD = 'Settings/Expansions/SelectedCards/TOGGLE_CARD',\n  SET_TO_DB = 'Settings/Expansions/SelectedCards/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SelectedCards/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SelectedCards/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SelectedCards/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SelectedCards/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SelectedCards/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  toggleCard: (id: string) => createAction(ActionTypes.TOGGLE_CARD, id),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (selectedCards: string[]) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, selectedCards),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_CARD: {\n      const newState = {\n        ...state,\n        cards: {\n          ...state.cards,\n          [action.payload]: {\n            ...state.cards[action.payload],\n            selected: !state.cards[action.payload].selected,\n          },\n        },\n      }\n\n      const selectedCardsToSave = state.cardIds.filter(\n        id => newState.cards[id].selected\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [CARDS_DB_KEY, selectedCardsToSave],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [CARDS_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      if (!action.payload) {\n        return initialState\n      }\n\n      const selectedCards: string[] = action.payload\n      const newState = Object.values(state.cards).reduce(\n        (acc, card) => ({\n          ...acc,\n          cards: {\n            ...acc.cards,\n            [card.id]: {\n              ...card,\n              selected: selectedCards.includes(card.id),\n            },\n          },\n        }),\n        state\n      )\n\n      return newState || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\n// All\n\nconst getSelectedCardsState = (state: RootState) =>\n  state.Settings.Expansions.SelectedCards\n\nconst getExpansionId = (_: any, id: string) => id\n\nconst getCardIdsArray = createSelector(\n  [getSelectedCardsState],\n  state => state.cardIds\n)\n\nconst getCardIdsByExpansionId = createSelector(\n  [getSelectedCardsState, getCardIdsArray, getExpansionId],\n  (state, cardIds, expansionId) =>\n    cardIds.filter(cardId => state.cards[cardId].expansion === expansionId)\n)\n\nconst getCardsByExpansionId = createSelector(\n  [getSelectedCardsState, getCardIdsByExpansionId],\n  (state, cardIds) => cardIds.map(cardId => state.cards[cardId])\n)\n\nconst getGemsByExpansionId = createSelector(\n  [getCardsByExpansionId],\n  cards => cards.filter(card => card.type === 'Gem')\n)\n\nconst getRelicsByExpansionId = createSelector(\n  [getCardsByExpansionId],\n  cards => cards.filter(card => card.type === 'Relic')\n)\n\nconst getSpellsByExpansionId = createSelector(\n  [getCardsByExpansionId],\n  cards => cards.filter(card => card.type === 'Spell')\n)\n\n// Selected\n\nconst getSelectedCardIds = createSelector(\n  [getSelectedCardsState],\n  state => state.cardIds.filter(id => state.cards[id].selected)\n)\n\nconst getSelectedCards = createSelector(\n  [getSelectedCardsState, getSelectedCardIds],\n  (state, cardIds) => cardIds.map(cardId => state.cards[cardId])\n)\n\nexport const selectors = {\n  getSelectedCards,\n  getGemsByExpansionId,\n  getRelicsByExpansionId,\n  getSpellsByExpansionId,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport * as types from '../../../../types'\nimport config from '../../../../config'\nimport { RootState } from '../..'\n\nconst NEMESES_DB_KEY = 'nemeses-1.8'\n\n///////////\n// STATE //\n///////////\n\ntype Nemeses = {\n  [key: string]: types.ICreature & { selected: boolean }\n}\n\nexport type State = Readonly<{\n  nemeses: Nemeses\n  nemesisIds: string[]\n}>\n\nexport const initialState: State = {\n  nemeses: config.NORMALIZEDDATA.nemesisIds.reduce(\n    (acc, id) => ({\n      ...acc,\n      [id]: {\n        ...config.NORMALIZEDDATA.nemeses[id],\n        selected: true,\n      },\n    }),\n    {}\n  ),\n  nemesisIds: config.NORMALIZEDDATA.nemesisIds,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_NEMESIS = 'Settings/Expansions/SelectedNemeses/TOGGLE_NEMESIS',\n  SET_TO_DB = 'Settings/Expansions/SelectedNemeses/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SelectedNemeses/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SelectedNemeses/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SelectedNemeses/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SelectedNemeses/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SelectedNemeses/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  toggleNemesis: (id: string) => createAction(ActionTypes.TOGGLE_NEMESIS, id),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (selectedNemeses: string[]) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, selectedNemeses),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_NEMESIS: {\n      const newState = {\n        ...state,\n        nemeses: {\n          ...state.nemeses,\n          [action.payload]: {\n            ...state.nemeses[action.payload],\n            selected: !state.nemeses[action.payload].selected,\n          },\n        },\n      }\n\n      const selectedCardsToSave = state.nemesisIds.filter(\n        id => newState.nemeses[id].selected\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [NEMESES_DB_KEY, selectedCardsToSave],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [NEMESES_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      if (!action.payload) {\n        return initialState\n      }\n\n      const selectedCards: string[] = action.payload\n      const newState = Object.values(state.nemeses).reduce(\n        (acc, card) => ({\n          ...acc,\n          nemeses: {\n            ...acc.nemeses,\n            [card.id]: {\n              ...card,\n              selected: selectedCards.includes(card.id),\n            },\n          },\n        }),\n        state\n      )\n\n      return newState || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\n// All\n\nconst getSelectedNemesesState = (state: RootState) =>\n  state.Settings.Expansions.SelectedNemeses\n\nconst getExpansionId = (_: any, id: string) => id\n\nconst getNemesisIdsArray = createSelector(\n  [getSelectedNemesesState],\n  state => state.nemesisIds\n)\n\nconst getNemesisIdsByExpansionId = createSelector(\n  [getSelectedNemesesState, getNemesisIdsArray, getExpansionId],\n  (state, nemesisIds, expansionId) =>\n    nemesisIds.filter(\n      nemesisId => state.nemeses[nemesisId].expansion === expansionId\n    )\n)\n\nconst getNemesesByExpansionId = createSelector(\n  [getSelectedNemesesState, getNemesisIdsByExpansionId],\n  (state, nemesisIds) => nemesisIds.map(nemesisId => state.nemeses[nemesisId])\n)\n\n// Selected\n\nconst getSelectedNemesesIds = createSelector(\n  [getSelectedNemesesState],\n  state => state.nemesisIds.filter(id => state.nemeses[id].selected)\n)\n\nconst getSelectedNemeses = createSelector(\n  [getSelectedNemesesState, getSelectedNemesesIds],\n  (state, nemesisIds) => nemesisIds.map(nemesisId => state.nemeses[nemesisId])\n)\n\nexport const selectors = {\n  getSelectedNemeses,\n  getNemesesByExpansionId,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport * as types from '../../../../types'\nimport config from '../../../../config'\nimport { RootState } from '../..'\n\nconst MAGES_DB_KEY = 'mages-1.8'\n\n///////////\n// STATE //\n///////////\n\ntype Mages = {\n  [key: string]: types.ICreature & { selected: boolean }\n}\n\nexport type State = Readonly<{\n  mages: Mages\n  mageIds: string[]\n}>\n\nexport const initialState: State = {\n  mages: config.NORMALIZEDDATA.mageIds.reduce(\n    (acc, id) => ({\n      ...acc,\n      [id]: {\n        ...config.NORMALIZEDDATA.mages[id],\n        selected: true,\n      },\n    }),\n    {}\n  ),\n  mageIds: config.NORMALIZEDDATA.mageIds,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_MAGE = 'Settings/Expansions/SelectedMages/TOGGLE_MAGE',\n  SET_TO_DB = 'Settings/Expansions/SelectedMages/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SelectedMages/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SelectedMages/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SelectedMages/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SelectedMages/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SelectedMages/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  toggleMage: (id: string) => createAction(ActionTypes.TOGGLE_MAGE, id),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (selectedMages: string[]) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, selectedMages),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_MAGE: {\n      const newState = {\n        ...state,\n        mages: {\n          ...state.mages,\n          [action.payload]: {\n            ...state.mages[action.payload],\n            selected: !state.mages[action.payload].selected,\n          },\n        },\n      }\n\n      const selectedCardsToSave = state.mageIds.filter(\n        id => newState.mages[id].selected\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [MAGES_DB_KEY, selectedCardsToSave],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [MAGES_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      if (!action.payload) {\n        return initialState\n      }\n\n      const selectedCards: string[] = action.payload\n      const newState = Object.values(state.mages).reduce(\n        (acc, card) => ({\n          ...acc,\n          mages: {\n            ...acc.mages,\n            [card.id]: {\n              ...card,\n              selected: selectedCards.includes(card.id),\n            },\n          },\n        }),\n        state\n      )\n\n      return newState || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\n// All\n\nconst getSelectedMagesState = (state: RootState) =>\n  state.Settings.Expansions.SelectedMages\n\nconst getExpansionId = (_: any, id: string) => id\n\nconst getMageIdsArray = createSelector(\n  [getSelectedMagesState],\n  state => state.mageIds\n)\n\nconst getMageIdsByExpansionId = createSelector(\n  [getSelectedMagesState, getMageIdsArray, getExpansionId],\n  (state, mageIds, expansionId) =>\n    mageIds.filter(mageId => state.mages[mageId].expansion === expansionId)\n)\n\nconst getMagesByExpansionId = createSelector(\n  [getSelectedMagesState, getMageIdsByExpansionId],\n  (state, mageIds) => mageIds.map(mageId => state.mages[mageId])\n)\n\n// Selected\n\nconst getSelectedMagesIds = createSelector(\n  [getSelectedMagesState],\n  state => state.mageIds.filter(id => state.mages[id].selected)\n)\n\nconst getSelectedMages = createSelector(\n  [getSelectedMagesState, getSelectedMagesIds],\n  (state, mageIds) => mageIds.map(mageId => state.mages[mageId])\n)\n\nexport const selectors = {\n  getSelectedMages,\n  getMagesByExpansionId,\n}\n","import { combineReducers } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport * as SelectedExpansions from './SelectedExpansions'\nimport * as SelectedCards from './SelectedCards'\nimport * as SelectedNemeses from './SelectedNemeses'\nimport * as SelectedMages from './SelectedMages'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  SelectedExpansions: SelectedExpansions.State\n  SelectedCards: SelectedCards.State\n  SelectedNemeses: SelectedNemeses.State\n  SelectedMages: SelectedMages.State\n}\n\nexport const initialState: State = {\n  SelectedExpansions: SelectedExpansions.initialState,\n  SelectedCards: SelectedCards.initialState,\n  SelectedNemeses: SelectedNemeses.initialState,\n  SelectedMages: SelectedMages.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport type Action =\n  | SelectedExpansions.Action\n  | SelectedCards.Action\n  | SelectedNemeses.Action\n  | SelectedMages.Action\n\nexport const actions = {\n  SelectedExpansions: SelectedExpansions.actions,\n  SelectedCards: SelectedCards.actions,\n  SelectedNemeses: SelectedNemeses.actions,\n  SelectedMages: SelectedMages.actions,\n}\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers<State, Action>({\n  SelectedExpansions: SelectedExpansions.Reducer,\n  SelectedCards: SelectedCards.Reducer,\n  SelectedNemeses: SelectedNemeses.Reducer,\n  SelectedMages: SelectedMages.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getSelectedCardsForSelectedExpansions = createSelector(\n  [\n    SelectedExpansions.selectors.getSelectedExpansionsArray,\n    SelectedCards.selectors.getSelectedCards,\n  ],\n  (expansionIds, cards) =>\n    cards.filter(card => expansionIds.includes(card.expansion))\n)\n\nconst getSelectedNemesesForSelectedExpansions = createSelector(\n  [\n    SelectedExpansions.selectors.getSelectedExpansionsArray,\n    SelectedNemeses.selectors.getSelectedNemeses,\n  ],\n  (expansionIds, nemeses) =>\n    nemeses.filter(nemesis => expansionIds.includes(nemesis.expansion))\n)\n\nconst getSelectedMagesForSelectedExpansions = createSelector(\n  [\n    SelectedExpansions.selectors.getSelectedExpansionsArray,\n    SelectedMages.selectors.getSelectedMages,\n  ],\n  (expansionIds, mages) =>\n    mages.filter(mage => expansionIds.includes(mage.expansion))\n)\n\nexport const selectors = {\n  SelectedExpansions: SelectedExpansions.selectors,\n  SelectedCards: SelectedCards.selectors,\n  SelectedNemeses: SelectedNemeses.selectors,\n  SelectedMages: SelectedMages.selectors,\n  getSelectedCardsForSelectedExpansions,\n  getSelectedNemesesForSelectedExpansions,\n  getSelectedMagesForSelectedExpansions,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\nimport shortid from 'shortid'\n\nimport config from '../../../../config'\nimport * as types from '../../../../types'\nimport { RootState } from '../../'\n\nconst SUPPLY_DB_KEY = 'supplySetups-1.6' // FIXME this is a quickfix, see https://github.com/on3iro/aeons-end-randomizer/issues/138\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Predefined: types.IMarketSetups\n  Custom: types.IMarketSetups\n}\nexport const initialState: State = {\n  Predefined: config.MARKETSETUPS,\n  Custom: {},\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_ALL = 'Settings/SupplySetups/TOGGLE_ALL',\n  TOGGLE_SETUP = 'Settings/SupplySetups/TOGGLE_SETUP',\n  CREATE_CUSTOM_SETUP = 'Settings/SupplySetups/CREATE_CUSTOM_SETUP',\n  SAVE_CUSTOM_SETUP = 'Settings/SupplySetups/SAVE_CUSTOM_SETUP',\n  CANCEL_EDIT_SETUP = 'Settings/SupplySetups/CANCEL_EDIT_SETUP',\n  EDIT_CUSTOM_SETUP = 'Settings/SupplySetups/EDIT_CUSTOM_SETUP',\n  DELETE_CUSTOM_SETUP = 'Settings/SupplySetups/DELETE_CUSTOM_SETUP',\n  SET_TO_DB = 'Settings/SupplySetups/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/SupplySetups/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/SupplySetups/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/SupplySetups/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/SupplySetups/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/SupplySetups/FETCH_FROM_DB_FAILURE',\n}\n\ntype SetupType = 'Predefined' | 'Custom'\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  toggleAll: () => createAction(ActionTypes.TOGGLE_ALL),\n  toggleSetup: (setup: string, setupType: SetupType) =>\n    createAction(ActionTypes.TOGGLE_SETUP, { setup, setupType }),\n  createCustomSetup: () =>\n    createAction(ActionTypes.CREATE_CUSTOM_SETUP, shortid.generate()),\n  saveCustomSetup: (setup: types.IMarketSetup) =>\n    createAction(ActionTypes.SAVE_CUSTOM_SETUP, setup),\n  cancelEdit: (id: string) => createAction(ActionTypes.CANCEL_EDIT_SETUP, id),\n  editCustomSetup: (id: string) =>\n    createAction(ActionTypes.EDIT_CUSTOM_SETUP, id),\n  deleteCustomSetup: (id: string) =>\n    createAction(ActionTypes.DELETE_CUSTOM_SETUP, id),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nconst allSetsAreSelected = (state: State) =>\n  Object.values({ ...state.Predefined, ...state.Custom }).every(\n    val => val.active\n  )\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_ALL: {\n      const allSetsSelected = allSetsAreSelected(state)\n      const newPredefined = Object.values(state.Predefined).reduce(\n        (acc, setup) => ({\n          ...acc,\n          [setup.id]: {\n            ...setup,\n            active: setup.default ? true : !allSetsSelected,\n          },\n        }),\n        {}\n      )\n      const newCustom = Object.values(state.Custom).reduce(\n        (acc, setup) => ({\n          ...acc,\n          [setup.id]: { ...setup, active: !allSetsSelected },\n        }),\n        {}\n      )\n      const newState = { Predefined: newPredefined, Custom: newCustom }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.TOGGLE_SETUP: {\n      const { setup, setupType } = action.payload\n      const newState = {\n        ...state,\n        [setupType]: {\n          ...state[setupType],\n          [setup]: {\n            ...state[setupType][setup],\n            active: !state[setupType][setup].active,\n          },\n        },\n      }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [SUPPLY_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      return action.payload || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    case ActionTypes.CREATE_CUSTOM_SETUP: {\n      const id = action.payload\n      return {\n        ...state,\n        Custom: {\n          [id]: {\n            id,\n            name: '',\n            type: 'custom',\n            active: false,\n            tiles: [],\n            isDirty: true,\n            isNew: true,\n          },\n          ...state.Custom,\n        },\n      }\n    }\n\n    case ActionTypes.SAVE_CUSTOM_SETUP: {\n      const setup = action.payload\n      // Because we currently do not have a specific mapping from Blueprints\n      // to actual cards in the supply it is important,\n      // that we keep the order of Gem -> Relic -> Spell for supply sets.\n      const tiles = [...setup.tiles].sort((a, b) => {\n        if (a.type === 'Gem') {\n          return -1\n        }\n\n        if (a.type === 'Relic' && b.type === 'Spell') {\n          return -1\n        }\n\n        return 1\n      })\n\n      const newState = {\n        ...state,\n        Custom: {\n          ...state.Custom,\n          [setup.id]: {\n            ...setup,\n            tiles,\n            isNew: false,\n            isDirty: false,\n          },\n        },\n      }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.EDIT_CUSTOM_SETUP: {\n      const id = action.payload\n\n      return {\n        ...state,\n        Custom: {\n          ...state.Custom,\n          [id]: {\n            ...state.Custom[id],\n            isDirty: true,\n          },\n        },\n      }\n    }\n\n    case ActionTypes.CANCEL_EDIT_SETUP: {\n      const id = action.payload\n\n      const { [id]: setup, ...rest } = state.Custom\n\n      if (setup.isNew) {\n        return { ...state, Custom: { ...rest } }\n      }\n\n      return {\n        ...state,\n        Custom: {\n          ...rest,\n          [id]: {\n            ...setup,\n            isDirty: false,\n          },\n        },\n      }\n    }\n\n    // FIXME should prompt the user if he really wants to delete the setup\n    case ActionTypes.DELETE_CUSTOM_SETUP: {\n      const id = action.payload\n\n      const { [id]: setup, ...rest } = state.Custom\n      const newState = { ...state, Custom: { ...rest } }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getState = (state: RootState) => state.Settings.SupplySetups\nconst getPredefined = (state: RootState) =>\n  state.Settings.SupplySetups.Predefined\nconst getCustom = (state: RootState) => state.Settings.SupplySetups.Custom\n\nconst getPredefinedAsArray = createSelector(\n  [getPredefined],\n  predefined => Object.values(predefined).filter(setup => !setup.default)\n)\n\nconst getCustomAsArray = createSelector(\n  [getCustom],\n  custom => Object.values(custom).filter(setup => !setup.default)\n)\n\nconst getCustomAndPredefined = createSelector(\n  [getPredefined, getCustom],\n  (predefined, custom) => ({ ...predefined, ...custom })\n)\n\nconst getAllAsArray = createSelector(\n  [getCustomAndPredefined],\n  customAndPredefined => Object.values(customAndPredefined)\n)\n\nconst makeGetCustomAndPredefined = () => getCustomAndPredefined\n\nconst getAllExceptDefaultSets = createSelector(\n  [getAllAsArray],\n  allSets => allSets.filter(set => !set.default)\n)\n\nconst getActiveSetups = createSelector(\n  [getAllAsArray],\n  allSets => allSets.filter(setup => setup.active)\n)\n\nconst getAllSetsSelected = createSelector(\n  [getState],\n  state => allSetsAreSelected(state)\n)\n\nexport const selectors = {\n  getActiveSetups,\n  getAllAsArray,\n  getAllExceptDefaultSets,\n  getAllSetsSelected,\n  getCustom,\n  getCustomAndPredefined,\n  getCustomAsArray,\n  getPredefined,\n  getPredefinedAsArray,\n  makeGetCustomAndPredefined,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport { ICreature } from '../../../types'\nimport { RootState } from '../'\nimport { getRandomEntity } from '../../helpers'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<ICreature> | undefined\nexport const initialState: State = undefined\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_RANDOM = 'Nemesis/SET_RANDOM',\n}\n\nexport const actions = {\n  setRandomNemesis: (availableNemeses: ReadonlyArray<ICreature>) =>\n    createAction(ActionTypes.SET_RANDOM, availableNemeses),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_RANDOM: {\n      const availableNemeses = action.payload\n      return getRandomEntity(availableNemeses)\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getNemesis = (state: RootState) => state.Nemesis\n\nexport const selectors = {\n  getNemesis,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Expansions from './Expansions'\nimport * as SupplySetups from './SupplySetups'\n\nexport type State = {\n  Expansions: Expansions.State\n  SupplySetups: SupplySetups.State\n}\n\nexport type Action = Expansions.Action | SupplySetups.Action\n\nexport const actions = {\n  Expansions: Expansions.actions,\n  SupplySetups: SupplySetups.actions,\n}\n\nexport const selectors = {\n  Expansions: Expansions.selectors,\n  SupplySetups: SupplySetups.selectors,\n}\n\nexport const initialState = {\n  Expansions: Expansions.initialState,\n  SupplySetups: SupplySetups.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Expansions: Expansions.Reducer,\n  SupplySetups: SupplySetups.Reducer,\n})\n","import * as types from '../types'\n\nexport const createSlotList = (\n  amount: number\n): Array<types.IEmptyBluePrint> => {\n  return Array.from(\n    { length: amount },\n    (): types.IEmptyBluePrint => ({ type: 'EMPTY', operation: 'NoOp' })\n  )\n}\n\n// TODO Refactor turnorder cards and mages (code duplication)\ntype TurnOrderListReductionResult = {\n  availableCards: types.ITurnOrderCard[]\n  result: types.ITurnOrderCard[]\n}\n\nexport const createTurnOrderCardList = (\n  availableCards: types.ITurnOrderCard[],\n  slots: types.ITurnOrderCard[],\n  getEntity: <T>(list: Array<T>) => T\n): TurnOrderListReductionResult => {\n  const result = slots.reduce(\n    (acc: TurnOrderListReductionResult, slot: types.ITurnOrderCard) => {\n      // If no entity is left, simply return the actual empty slot\n      const card = getEntity(acc.availableCards) || slot\n\n      // Make sure each entity will only be added to the result list once\n      const remainingCards = acc.availableCards.filter(\n        entity => entity.id !== card.id\n      )\n\n      return {\n        availableCards: remainingCards,\n        result: [...acc.result, card],\n      }\n    },\n    { availableCards, result: [] }\n  )\n\n  return result\n}\n\ntype MageListReductionResult = {\n  availableMages: types.ICreature[]\n  result: types.ICreature[]\n}\n\nexport const createMageList = (\n  availableMages: ReadonlyArray<types.ICreature>,\n  slots: Array<types.Slot>,\n  getEntity: <T>(list: Array<T>) => T\n): MageListReductionResult => {\n  const result = slots.reduce(\n    (acc: MageListReductionResult, slot: types.Slot) => {\n      // If no entity is left, simply return the actual empty slot\n      const mage = getEntity(acc.availableMages) || slot\n\n      // Make sure each entity will only be added to the result list once\n      const remainingMages = acc.availableMages.filter(\n        entity => entity.id !== mage.id\n      )\n\n      return {\n        availableMages: remainingMages,\n        result: [...acc.result, mage],\n      }\n    },\n    { availableMages: [...availableMages], result: [] }\n  )\n\n  return result\n}\n\nexport const shuffleDeck = (\n  deck: types.ITurnOrderCard[]\n): types.ITurnOrderCard[] => {\n  return createTurnOrderCardList(deck, deck, getRandomEntity).result\n}\n\n/**\n * Gets a random value from a list. (The wording of entities is just used for semantic context)\n */\nexport const getRandomEntity = <E>(availableEntities: ReadonlyArray<E>) =>\n  availableEntities[Math.floor(Math.random() * availableEntities.length)]\n\nexport const getOperationString = (\n  operation: types.Operation,\n  values?: number[],\n  threshold?: number\n) => {\n  if (operation === 'OR' && values) {\n    return values.join('/')\n  }\n\n  const thresholdValue = threshold ? threshold : ''\n\n  return `${operation} ${thresholdValue}`\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport { RootState } from '../../'\n\n///////////\n// STATE //\n///////////\n\nexport type MageCount = 1 | 2 | 3 | 4\nexport type State = MageCount\nexport const initialState: State = 1\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET = 'Mages/Count/SET',\n}\n\nexport const actions = {\n  setCount: (count: MageCount) => createAction(ActionTypes.SET, count),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getCount = (state: RootState) => state.Mages.Count\n\nexport const selectors = {\n  getCount,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport { ICreature } from '../../../../types'\nimport { RootState } from '../../'\nimport {\n  createSlotList,\n  createMageList,\n  getRandomEntity,\n} from '../../../helpers'\n\nimport { MageCount } from '../Count'\n\n///////////\n// STATE //\n///////////\n\nexport type State = ReadonlyArray<ICreature>\nexport const initialState: State = []\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_RANDOM = 'Mages/Recruited/SET_RANDOM',\n}\n\nexport const actions = {\n  setRandomMages: (\n    availableMages: ReadonlyArray<ICreature>,\n    count: MageCount\n  ) => createAction(ActionTypes.SET_RANDOM, { availableMages, count }),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_RANDOM: {\n      const { availableMages, count } = action.payload\n      const length = Math.min(availableMages.length, count)\n      const slotList = createSlotList(length)\n      const { result } = createMageList(\n        availableMages,\n        slotList,\n        getRandomEntity\n      )\n      return result\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getMages = (state: RootState) => state.Mages.Recruited\n\nexport const selectors = {\n  getMages,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Count from './Count'\nimport * as Recruited from './Recruited'\n\nexport type State = {\n  Count: Count.State\n  Recruited: Recruited.State\n}\n\nexport type Action = Count.Action | Recruited.Action\n\nexport const selectors = {\n  Count: Count.selectors,\n  Recruited: Recruited.selectors,\n}\n\nexport const actions = {\n  Count: Count.actions,\n  Recruited: Recruited.actions,\n}\n\nexport const initialState = {\n  Count: Count.initialState,\n  Recruited: Recruited.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Count: Count.Reducer,\n  Recruited: Recruited.Reducer,\n})\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport config from '../../../../config'\nimport * as types from '../../../../types'\nimport { RootState } from '../../'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Selected: types.IMarketSetup\n}>\nexport const initialState: State = {\n  // FIXME we should ensure with typescript, that the 'default: true' property is not\n  // optional for default state here\n  Selected: config.MARKETSETUPS['random'],\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SELECT_SETUP = 'Supply/Selection/SELECT_SETUP',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  selectSetup: (setup: Readonly<types.IMarketSetup>) =>\n    createAction(ActionTypes.SELECT_SETUP, setup),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SELECT_SETUP: {\n      return {\n        ...state,\n        Selected: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getSelectedSetup = (state: RootState) => state.Supply.Selection.Selected\n\nexport const selectors = {\n  getSelectedSetup,\n}\n","import { ICard, IBluePrint, CardType } from '../../../../types'\nimport { getRandomEntity } from '../../../helpers'\n\ntype CardListReduceResult = {\n  availableCards: ICard[]\n  result: ICard[]\n}\n\n/**\n * Given a card object and a setupBlueprint this returns either\n * true or false, depending on the cost of the card and the expectation set by\n * the blueprints operation and cost.\n */\nconst filterByCost = (card: ICard, setupBlueprint: IBluePrint) => {\n  switch (setupBlueprint.operation) {\n    case '<': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost < setupBlueprint.threshold\n    }\n    case '>': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost > setupBlueprint.threshold\n    }\n    case '<=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost <= setupBlueprint.threshold\n    }\n    case '>=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost >= setupBlueprint.threshold\n    }\n    case '=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost === setupBlueprint.threshold\n    }\n    case 'OR': {\n      if (!setupBlueprint.values) return true\n      return setupBlueprint.values.indexOf(card.cost) !== -1\n    }\n    default: {\n      return true\n    }\n  }\n}\n\nconst createCardList = (\n  availableCards: ICard[],\n  blueprints: Array<IBluePrint>,\n  getEntity: <T>(list: Array<T>) => T\n): CardListReduceResult =>\n  blueprints.reduce(\n    (acc: CardListReduceResult, blueprint: IBluePrint, i: number) => {\n      const filteredByCost = acc.availableCards.filter(card =>\n        filterByCost(card, blueprint)\n      )\n\n      // If no entity is left, simply return the actual empty slot\n      const card = getEntity(filteredByCost) || blueprint\n\n      // Make sure each entity will only be added to the result list once\n      const remainingCards = acc.availableCards.filter(\n        entity => entity.id !== card.id\n      )\n\n      return {\n        availableCards: remainingCards,\n        result: [...acc.result, card],\n      }\n    },\n    { availableCards, result: [] }\n  )\n\n/**\n * Creates a list of randomly selected cards from a given pool of cards by a specific type.\n * The amount of cards generated is determined by the amount of tileSetups matching\n * the given cardType. E.g. if 2 out of 9 tileSetups have the type=\"Gem\" and the\n * specified type is \"Gem\" as well, a list of two cards will be created.\n *\n * return List<Card>\n */\nconst getRandomCardsByType = (\n  availableCards: ReadonlyArray<ICard>,\n  tileSetups: ReadonlyArray<IBluePrint>,\n  cardType: CardType\n) => {\n  const cardSlots = tileSetups.filter(({ type }) => type === cardType)\n  const availableCardsOfType = availableCards.filter(\n    ({ type }) => type === cardType\n  )\n  return createCardList(availableCardsOfType, cardSlots, getRandomEntity)\n}\n\n/**\n * Creates a supply object, containing gems, relics and spells with meta information.\n * The pool of available cards will be determined by the sets the user has selected\n * inside the application settings. The supply will be created via the blueprint\n * of the given tileSetups.\n *\n * return { gems, relics, spells }\n */\nexport const createSupply = (\n  availableCards: ReadonlyArray<ICard>,\n  tileSetups: ReadonlyArray<IBluePrint>\n) => {\n  const gems = getRandomCardsByType(availableCards, tileSetups, 'Gem')\n  const relics = getRandomCardsByType(availableCards, tileSetups, 'Relic')\n  const spells = getRandomCardsByType(availableCards, tileSetups, 'Spell')\n\n  return { gems, relics, spells }\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport { Slot, ICard } from '../../../../types'\nimport { createSlotList } from '../../../helpers'\nimport config from '../../../../config'\nimport { RootState } from '../../'\nimport { createSupply } from './helpers'\nimport * as SupplySelection from '../Selection'\nimport * as types from '../../../../types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Cards: ReadonlyArray<Slot | ICard>\n}>\nexport const initialState: State = {\n  Cards: createSlotList(config.DEFAULTSUPPLYCOUNT),\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  RESET = 'Supply/RandomSetup/RESET',\n  CREATE = 'Supply/RandomSetup/CREATE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  resetMarket: () => createAction(ActionTypes.RESET),\n  createMarket: (\n    availableCards: ReadonlyArray<types.ICard>,\n    tiles: ReadonlyArray<Slot>\n  ) => createAction(ActionTypes.CREATE, { availableCards, tiles }),\n}\n\nexport type Action = ActionsUnion<typeof actions> | SupplySelection.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case SupplySelection.ActionTypes.SELECT_SETUP:\n    case ActionTypes.RESET: {\n      return initialState\n    }\n\n    case ActionTypes.CREATE: {\n      const { availableCards, tiles } = action.payload\n      const { gems, relics, spells } = createSupply(availableCards, tiles)\n      return {\n        ...state,\n        Cards: [...gems.result, ...relics.result, ...spells.result],\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getCards = (state: RootState) => state.Supply.RandomSetup.Cards\n\nexport const selectors = {\n  getCards,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Selection from './Selection'\nimport * as RandomSetup from './RandomSetup'\n\nexport type State = {\n  Selection: Selection.State\n  RandomSetup: RandomSetup.State\n}\n\nexport type Action = Selection.Action | RandomSetup.Action\n\nexport const actions = {\n  Selection: Selection.actions,\n  RandomSetup: RandomSetup.actions,\n}\n\nexport const selectors = {\n  Selection: Selection.selectors,\n  RandomSetup: RandomSetup.selectors,\n}\n\nexport const initialState = {\n  Selection: Selection.initialState,\n  RandomSetup: RandomSetup.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Selection: Selection.Reducer,\n  RandomSetup: RandomSetup.Reducer,\n})\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport { RootState } from '../../'\nimport { ITurnOrderCard } from '../../../../types'\nimport { shuffleDeck } from '../../../helpers'\n\nexport const TURNORDER_GAME_DB_KEY = 'turnOrderGameState'\n\n/////////////\n// HELPERS //\n/////////////\n\nconst newStateWithDBWrite = (newState: State) => {\n  return loop(\n    newState,\n    Cmd.run<Action>(setToDb, {\n      args: [TURNORDER_GAME_DB_KEY, newState],\n      successActionCreator: actions.setTurnOrderToDbSuccess,\n      failActionCreator: actions.setTurnOrderToDbFailure,\n    })\n  )\n}\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  deck: Array<ITurnOrderCard>\n  discard: Array<ITurnOrderCard>\n  started: boolean\n}\nexport const initialState: State = {\n  deck: [],\n  discard: [],\n  started: false,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  INIT = 'TurnOrder/ActiveGame/INIT',\n  DRAW = 'TurnOrder/ActiveGame/DRAW',\n  NEW_ROUND = 'TurnOrder/ActiveGame/NEW_ROUND',\n  ADD_TO_TOP = 'TurnOrder/ActiveGame/ADD_TO_TOP',\n  ADD_TO_BOTTOM = 'TurnOrder/ActiveGame/ADD_TO_BOTTOM',\n  SHUFFLE_INTO_DECK = 'TurnOrder/ActiveGame/SHUFFLE_INTO_DECK',\n  SET_TURNORDER_TO_DB_SUCCESS = 'TurnOrder/ActiveGame/SET_TURNORDER_TO_DB_SUCCESS',\n  SET_TURNORDER_TO_DB_FAILURE = 'TurnOrder/ActiveGame/SET_TURNORDER_TO_DB_FAILURE',\n  START_GAME = 'TurnOrder/ActiveGame/START_GAME',\n  RESET_GAME = 'TurnOrder/ActiveGame/RESET_GAME',\n  FETCH_FROM_DB = 'TurnOrder/ActiveGame/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'TurnOrder/ActiveGame/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'TurnOrder/ActiveGame/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  init: (state: State) => createAction(ActionTypes.INIT, state),\n  draw: () => createAction(ActionTypes.DRAW),\n  newRound: (turnOrderCards: ITurnOrderCard[]) =>\n    createAction(ActionTypes.NEW_ROUND, turnOrderCards),\n  addToTop: (cardId: string) => createAction(ActionTypes.ADD_TO_TOP, cardId),\n  addToBottom: (cardId: string) =>\n    createAction(ActionTypes.ADD_TO_BOTTOM, cardId),\n  shuffleIntoDeck: (cardId: string) =>\n    createAction(ActionTypes.SHUFFLE_INTO_DECK, cardId),\n  setTurnOrderToDbSuccess: () =>\n    createAction(ActionTypes.SET_TURNORDER_TO_DB_SUCCESS),\n  setTurnOrderToDbFailure: () =>\n    createAction(ActionTypes.SET_TURNORDER_TO_DB_FAILURE),\n  startGame: (turnOrderCards: ITurnOrderCard[]) =>\n    createAction(ActionTypes.START_GAME, turnOrderCards),\n  resetGame: () => createAction(ActionTypes.RESET_GAME),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: () => createAction(ActionTypes.FETCH_FROM_DB_FAILURE),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.INIT: {\n      return action.payload\n    }\n\n    case ActionTypes.DRAW: {\n      const { deck } = state\n\n      if (deck.length === 0) return state\n\n      const cardDrawn = deck[deck.length - 1]\n\n      const newState = {\n        ...state,\n        deck: deck.filter(card => card.id !== cardDrawn.id),\n        discard: [cardDrawn, ...state.discard],\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.NEW_ROUND: {\n      const newState = {\n        ...state,\n        deck: shuffleDeck(action.payload),\n        discard: [],\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.ADD_TO_TOP: {\n      const cardId = action.payload\n      const cardToAdd = state.discard.find(card => card.id === cardId)\n\n      if (!cardToAdd) return state\n\n      const newState = {\n        ...state,\n        deck: [...state.deck, cardToAdd],\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.ADD_TO_BOTTOM: {\n      const cardId = action.payload\n      const cardToAdd = state.discard.find(card => card.id === cardId)\n\n      if (!cardToAdd) return state\n\n      const newState = {\n        ...state,\n        deck: [cardToAdd, ...state.deck],\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.SHUFFLE_INTO_DECK: {\n      const cardId = action.payload\n      const cardToShuffle = state.discard.find(card => card.id === cardId)\n\n      if (!cardToShuffle) return state\n\n      const newDeck = [...state.deck, cardToShuffle]\n      const shuffledDeck = shuffleDeck(newDeck)\n\n      const newState = {\n        ...state,\n        deck: shuffledDeck,\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.START_GAME: {\n      return newStateWithDBWrite({\n        started: true,\n        deck: shuffleDeck(action.payload),\n        discard: [],\n      })\n    }\n\n    case ActionTypes.RESET_GAME: {\n      return newStateWithDBWrite({\n        started: false,\n        deck: [],\n        discard: [],\n      })\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [TURNORDER_GAME_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      // If the fetched state somehow is undefined just take the current state instead\n      const newState = action.payload || state\n      return newState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getDeck = (state: RootState) => state.TurnOrder.ActiveGame.deck\nconst getDiscard = (state: RootState) => state.TurnOrder.ActiveGame.discard\nconst getHasStarted = (state: RootState) => state.TurnOrder.ActiveGame.started\n\nexport const selectors = {\n  getDeck,\n  getDiscard,\n  getHasStarted,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport config from '../../../../config'\nimport { ITurnOrderPlayerCount, ITurnOrderSetup, Mode } from '../../../../types'\nimport { RootState } from '../../'\nimport {\n  actions as activeGameActions,\n  Action as ActiveGameAction,\n} from '../ActiveGame'\n\nconst TURNORDER_CONFIG_DB_KEY = 'turnOrderConfiguration'\n\n/////////////\n// HELPERS //\n/////////////\n\nconst adjustSetup = (mode: Mode, setup: ITurnOrderSetup): ITurnOrderSetup => {\n  switch (mode) {\n    case 'Maelstrom': {\n      return {\n        id: setup.id,\n        name: setup.name,\n        turnOrderCards: setup.turnOrderCards.map(card => {\n          return card.id === 'nemesis-1' || card.id === 'blitz'\n            ? config.TURNORDERCARDS['maelstrom']\n            : card\n        }),\n      }\n    }\n\n    case 'Blitz': {\n      return {\n        id: setup.id,\n        name: setup.name,\n        turnOrderCards: setup.turnOrderCards.map(card => {\n          return card.id === 'nemesis-1' || card.id === 'maelstrom'\n            ? config.TURNORDERCARDS['blitz']\n            : card\n        }),\n      }\n    }\n\n    case 'Default':\n    default: {\n      return setup\n    }\n  }\n}\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Mode: Mode\n  SelectedPlayerCount: ITurnOrderPlayerCount\n  SelectedSetup: ITurnOrderSetup\n}>\n\nconst INITIAL_MODE = 'Default'\nconst INITIAL_PLAYER_SETUP = config.TURNORDERSETUPS['onePlayer']\nconst INITIAL_VARIATION = INITIAL_PLAYER_SETUP.variations['default']\n\nexport const initialState: State = {\n  Mode: INITIAL_MODE,\n  SelectedPlayerCount: INITIAL_PLAYER_SETUP,\n  SelectedSetup: INITIAL_VARIATION,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_MODE = 'TurnOrder/Configuration/SET_MODE',\n  SELECT_PLAYER_COUNT = 'TurnOrder/Configuration/SELECT_PLAYER_COUNT',\n  SELECT_SETUP = 'TurnOrder/Configuration/SELECT_SETUP',\n  SET_TO_DB = 'TurnOrder/Configuration/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'TurnOrder/Configuration/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'TurnOrder/Configuration/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'TurnOrder/Configuration/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'TurnOrder/Configuration/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'TurnOrder/Configuration/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setMode: (mode: Mode) => createAction(ActionTypes.SET_MODE, mode),\n  selectPlayerCount: (playerCountId: string) =>\n    createAction(ActionTypes.SELECT_PLAYER_COUNT, playerCountId),\n  selectSetup: (setupId: string) =>\n    createAction(ActionTypes.SELECT_SETUP, setupId),\n  setToDB: () => createAction(ActionTypes.SET_TO_DB),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: () => createAction(ActionTypes.SET_TO_DB_FAILURE),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: () => createAction(ActionTypes.FETCH_FROM_DB_FAILURE),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action | ActiveGameAction> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_MODE: {\n      const newState = { ...state, Mode: action.payload }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.SELECT_PLAYER_COUNT: {\n      const newState = {\n        ...state,\n        SelectedPlayerCount: config.TURNORDERSETUPS[action.payload],\n        SelectedSetup:\n          config.TURNORDERSETUPS[action.payload].variations['default'],\n      }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.SELECT_SETUP: {\n      const newState = {\n        ...state,\n        SelectedSetup: state.SelectedPlayerCount.variations[action.payload],\n      }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [TURNORDER_CONFIG_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      // If the fetched state somehow is undefined just take the current state instead\n      const newState = action.payload || state\n      return loop(\n        newState,\n        // If we could load the configuration also load the actual\n        // turnorder game state\n        Cmd.action<ActiveGameAction>(activeGameActions.fetchFromDB())\n      )\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getMode = (state: RootState) => state.TurnOrder.Configuration.Mode\nconst getSelectedPlayerCount = (state: RootState) =>\n  state.TurnOrder.Configuration.SelectedPlayerCount\nconst getSelectedSetup = (state: RootState) =>\n  state.TurnOrder.Configuration.SelectedSetup\nconst getConfiguration = createSelector(\n  [getMode, getSelectedSetup],\n  (mode, selectedSetup) => adjustSetup(mode, selectedSetup)\n)\nconst getAvailableCards = createSelector(\n  [getConfiguration],\n  config => config.turnOrderCards\n)\n\nexport const selectors = {\n  getMode,\n  getSelectedPlayerCount,\n  getSelectedSetup,\n  getConfiguration,\n  getAvailableCards,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as MainContentLoading from './MainContentLoading'\nimport * as Settings from './Settings'\nimport * as Nemesis from './Nemesis'\nimport * as Mages from './Mages'\nimport * as Supply from './Supply'\nimport * as TurnOrder from './TurnOrder'\n\nexport type RootState = {\n  Settings: Settings.State\n  MainContentLoading: MainContentLoading.State\n  Nemesis: Nemesis.State\n  Mages: Mages.State\n  Supply: Supply.State\n  TurnOrder: TurnOrder.State\n}\n\nexport enum ActionTypes {\n  USER_CONFIGURATION_GET = 'ROOT/USER_CONFIGURATION_GET',\n}\n\nexport const mainActions = {\n  getUserConfiguration: () => createAction(ActionTypes.USER_CONFIGURATION_GET),\n}\n\nexport type MainAction = ActionsUnion<typeof mainActions>\n\nexport const actions = {\n  Settings: Settings.actions,\n  Main: mainActions,\n  TurnOrder: TurnOrder.actions,\n  Nemesis: Nemesis.actions,\n  Mages: Mages.actions,\n  Supply: Supply.actions,\n}\n\nexport const selectors = {\n  Settings: Settings.selectors,\n  Main: {\n    ContentLoading: MainContentLoading.selectors,\n  },\n  TurnOrder: TurnOrder.selectors,\n  Nemesis: Nemesis.selectors,\n  Mages: Mages.selectors,\n  Supply: Supply.selectors,\n}\n\nexport type RootAction =\n  | MainAction\n  | Settings.Action\n  | MainContentLoading.Action\n  | Nemesis.Action\n  | Mages.Action\n  | Supply.Action\n  | TurnOrder.Action\n\nexport const initialState = {\n  Settings: Settings.initialState,\n  MainContentLoading: MainContentLoading.initialState,\n  Nemesis: Nemesis.initialState,\n  Mages: Mages.initialState,\n  Supply: Supply.initialState,\n  TurnOrder: TurnOrder.initialState,\n}\n\nexport const MainReducer: LoopReducer<RootState, RootAction> = (\n  state: RootState = initialState,\n  action: RootAction\n) => {\n  switch (action.type) {\n    case ActionTypes.USER_CONFIGURATION_GET: {\n      return loop(\n        state,\n        Cmd.list<RootAction>([\n          Cmd.action(\n            actions.Settings.Expansions.SelectedExpansions.fetchFromDB()\n          ),\n          Cmd.action(actions.Settings.Expansions.SelectedCards.fetchFromDB()),\n          Cmd.action(actions.Settings.Expansions.SelectedNemeses.fetchFromDB()),\n          Cmd.action(actions.Settings.Expansions.SelectedMages.fetchFromDB()),\n          Cmd.action(actions.TurnOrder.Configuration.fetchFromDB()),\n          Cmd.action(actions.Settings.SupplySetups.fetchFromDB()),\n        ])\n      )\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\nexport const RootReducer = reduceReducers(\n  MainReducer,\n  combineReducers<RootState, RootAction>({\n    Settings: Settings.Reducer,\n    MainContentLoading: MainContentLoading.Reducer,\n    Nemesis: Nemesis.Reducer,\n    Mages: Mages.Reducer,\n    Supply: Supply.Reducer,\n    TurnOrder: TurnOrder.Reducer,\n  })\n)\n","import { combineReducers } from 'redux-loop'\n\nimport * as Configuration from './Configuration'\nimport * as ActiveGame from './ActiveGame'\n\nexport type State = {\n  Configuration: Configuration.State\n  ActiveGame: ActiveGame.State\n}\n\nexport type Action = Configuration.Action | ActiveGame.Action\n\nexport const initialState = {\n  Configuration: Configuration.initialState,\n  ActiveGame: ActiveGame.initialState,\n}\n\nexport const actions = {\n  Configuration: Configuration.actions,\n  ActiveGame: ActiveGame.actions,\n}\n\nexport const selectors = {\n  Configuration: Configuration.selectors,\n  ActiveGame: ActiveGame.selectors,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Configuration: Configuration.Reducer,\n  ActiveGame: ActiveGame.Reducer,\n})\n","import { LoopReducer } from 'redux-loop'\n\nimport { RootState } from '../'\nimport * as SelectedExpansions from '../Settings/Expansions/SelectedExpansions'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<boolean>\nexport const initialState = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport type Action = SelectedExpansions.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB: {\n      return true\n    }\n\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB_SUCCESS:\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return false\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getIsLoading = (state: RootState) => state.MainContentLoading\n\nexport const selectors = {\n  getIsLoading,\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport JssProvider from 'react-jss/lib/JssProvider'\nimport { create } from 'jss'\nimport { createGenerateClassName, jssPreset } from '@material-ui/core/styles'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nconst store = configureStore(initialState)\n\nconst generateClassName = createGenerateClassName()\n// @ts-ignore\nconst jss = create({\n  ...jssPreset(),\n  // We define a custom insertion point that JSS will look for injecting the styles in the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <JssProvider jss={jss} generateClassName={generateClassName}>\n      <App />\n    </JssProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// @ts-ignore\nserviceWorker.register()\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}