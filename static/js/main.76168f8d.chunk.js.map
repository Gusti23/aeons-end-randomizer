{"version":3,"sources":["Redux/Store/Settings/Expansions/Selected.ts","mainTheme.ts","config/aeonsData.ts","config/turnOrderSetups.ts","config/index.ts","config/marketSetups.ts","Redux/Store/Settings/SupplySetups/index.ts","Redux/Store/MainContentLoading/index.ts","Redux/Store/Settings/Expansions/index.ts","Redux/Store/Nemesis/index.ts","Redux/Store/Settings/index.ts","Redux/helpers.ts","Redux/Store/Mages/Count/index.ts","Redux/Store/Mages/Recruited/index.ts","Redux/Store/Supply/Selection/index.ts","Redux/Store/Mages/index.ts","Redux/Store/Supply/RandomSetup/index.ts","Redux/Store/Supply/RandomSetup/helpers.ts","Redux/Store/TurnOrder/ActiveGame/index.ts","Redux/Store/Supply/index.ts","types.ts","Redux/Store/TurnOrder/Configuration/index.ts","Redux/Store/index.ts","Redux/Store/TurnOrder/index.ts","routes.ts","components/pages/Nemeses/NemesisTile/Card.tsx","components/pages/Nemeses/NemesisTile/CardContent.tsx","components/pages/Nemeses/NemesisTile/CardTypeIcon.tsx","components/pages/Nemeses/NemesisTile/ExpansionName.tsx","components/pages/Nemeses/NemesisTile/Name.tsx","components/pages/Nemeses/NemesisTile/index.tsx","components/pages/Nemeses/EmptyNemesisHint.tsx","components/ShuffleButton.tsx","components/NoSelectedExpansions.tsx","components/pages/Nemeses/index.tsx","components/pages/Mages/MageCountPicker.tsx","components/pages/Mages/MageList/MageGridWrapper.tsx","components/pages/Mages/MageTile/Wrapper.tsx","components/pages/Mages/MageTile/Card.tsx","components/pages/Mages/MageTile/CardContent.tsx","components/pages/Mages/MageTile/CardTypeIcon.tsx","components/pages/Mages/MageTile/ExpansionName.tsx","components/pages/Mages/MageTile/Name.tsx","components/pages/Mages/MageTile/index.tsx","components/pages/Mages/MageList/index.tsx","components/pages/Mages/EmptyMageListHint.tsx","components/pages/Mages/index.tsx","hooks/useExpansionHandling.tsx","components/ExpansionPanel/StyledExpansionPanel.tsx","components/ExpansionPanel/StyledExpansionPanelSummary.tsx","components/Heading.tsx","components/ExpansionPanel/index.tsx","components/pages/Supply/ListWrapper.tsx","components/pages/Supply/MarketTile/Card.tsx","components/pages/Supply/MarketTile/CardContent.tsx","components/pages/Supply/MarketTile/CardName.tsx","components/pages/Supply/MarketTile/CardTypeIcon.tsx","components/pages/Supply/MarketTile/CardInfoItem.tsx","components/pages/Supply/MarketTile/Info.tsx","components/pages/Supply/MarketTile/InfoLabel.tsx","components/pages/Supply/MarketTile/CostInfo.tsx","components/pages/Supply/MarketTile/CostOperation.tsx","components/pages/Supply/MarketTile/ExpansionInfo.tsx","components/pages/Supply/MarketTile/index.tsx","components/pages/Supply/SupplyList.tsx","components/pages/Supply/MarketOptionsWrapper.tsx","components/SupplyPreview/Wrapper.tsx","components/SupplyPreview/TileList.tsx","components/SupplyPreview/TileListItem.tsx","components/SupplyPreview/SupplyName.tsx","components/SupplyPreview/index.tsx","components/pages/Supply/MarketOptions.tsx","components/pages/Supply/index.tsx","components/CheckboxList/Item.tsx","components/CheckboxList/index.tsx","components/pages/Settings/Expansions/ActiveSets.tsx","components/pages/Settings/Expansions/index.tsx","components/pages/Settings/Supply/CheckboxWithPreview.tsx","components/pages/Settings/Supply/SetupSelection.tsx","components/pages/Settings/Supply/index.tsx","components/pages/Settings/index.tsx","components/pages/TurnOrder/DiscardTable/Cell.tsx","components/pages/TurnOrder/DiscardTable/RowWrapper.tsx","components/pages/TurnOrder/DiscardTable/Row.tsx","components/pages/TurnOrder/DiscardTable/Table.tsx","components/pages/TurnOrder/DiscardTable/index.tsx","components/pages/TurnOrder/ActiveGame.tsx","components/pages/TurnOrder/Card.tsx","components/pages/TurnOrder/CardNameDisplay.tsx","components/pages/TurnOrder/ModeSelection.tsx","components/pages/TurnOrder/PlayerCountSelection.tsx","components/pages/TurnOrder/SetupSelection.tsx","components/pages/TurnOrder/TurnOrderConfiguration.tsx","components/pages/TurnOrder/index.tsx","components/Content/HeaderPlaceholder.tsx","components/Content/Wrapper.tsx","components/Content/index.tsx","components/TopBar/Title.tsx","components/TopBar/AppBar.tsx","components/TopBar/MenuButton/index.tsx","components/TopBar/index.tsx","components/RouteItem.tsx","components/Routes.tsx","components/DrawerMenu/Header.tsx","components/DrawerMenu/AppInfo.tsx","components/DrawerMenu/GitHubLink.tsx","components/DrawerMenu/GitHubLogo.tsx","components/DrawerMenu/Drawer.tsx","components/DrawerMenu/index.tsx","components/App/MainApp.tsx","components/App/Wrapper.tsx","components/App/index.tsx","serviceWorker.js","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","muiTheme","createMuiTheme","palette","primary","blue","secondary","pink","typography","useNextVariants","playerColors","player1","normal","light","player2","player3","player4","mainTheme","heading","fontSize","pxToRem","spacing","drawerWidth","muiTransitions","appBarShift","transitions","create","easing","easeOut","duration","enteringScreen","content","sharp","leavingScreen","contentShift","colors","text","turnOrderCards","Object","objectSpread","player12","concat","player34","wild","wild-token","nemesis","maelstrom","blitz","cards","gem","color","background","relic","spell","mage","DATA","WE","id","name","type","nemeses","expansion","mages","cost","TV","OD","Nameless","Legacy","Depths","BS","AE","p-1","p-2","p-3","p-4","p-5","TURNORDERCARDS","player1-1","player1-2","player1-3","player1-4","player2-1","player2-2","player3-1","player4-1","player12-1","player12-2","player34-1","player34-2","wildToken","nemesis-1","nemesis-2","TURNORDERSETUPS","onePlayer","variations","default","4toc","twoPlayers","threePlayers","fourPlayers","splitPlayers","config","DEFAULTSUPPLYCOUNT","EXPANSIONS","keys","MARKETSETUPS","market1Inc","active","tiles","operation","threshold","market1","market2","market3","values","market4","market5","market6","random","initialState","reduce","acc","set","defineProperty","actions","toggleAll","createAction","TOGGLE_ALL","toggleExpansion","TOGGLE_EXPANSION","setToDB","state","SET_TO_DB","setToDBSuccessful","SET_TO_DB_SUCCESS","setToDBFailed","error","SET_TO_DB_FAILURE","fetchFromDB","FETCH_FROM_DB","fetchFromDBSuccessful","FETCH_FROM_DB_SUCCESS","fetchFromDBFailed","FETCH_FROM_DB_FAILURE","allSetsAreSelected","every","val","getSelectedExpansionsState","Settings","Expansions","Selected","getSelectedExpansionsArray","createSelector","selectedExpansions","filter","key","selectors","getAllSetsSelected","getHasStandaloneSet","some","getIsLoading","MainContentLoading","Reducer","combineReducers","arguments","length","undefined","action","allSetsSelected","newState","loop","Cmd","run","setToDb","args","successActionCreator","failActionCreator","payload","getFromDb","getExpansionNamesByType","getStandaloneExpansions","sort","getMiniExpansions","getPromos","a","b","promoA","promoB","Predefined","Custom","noOp","toggleSetup","setup","setupType","TOGGLE_SETUP","getPredefined","SupplySetups","getCustom","getPredefinedAsArray","predefined","getCustomAsArray","custom","getCustomAndPredefined","getAllAsArray","customAndPredefined","getAllExceptDefaultSets","allSets","getActiveSetups","makeGetCustomAndPredefined","_action$payload","createSlotList","amount","Array","from","getListOfAvailableEntity","selectedSets","entity","toConsumableArray","shuffleDeck","deck","availableCards","slots","getEntity","getRandomEntity","slot","i","card","result","availableEntities","Math","floor","getOperationString","join","thresholdValue","setRandomNemesis","expansions","SET_RANDOM","getNemesis","Nemesis","setCount","count","SET","getCount","Mages","Count","Recruited","getMages","setRandomMages","availableMages","createMageList","selectSetup","SELECT_SETUP","getSelectedSetup","Supply","Selection","getRandomCardsByType","tileSetups","cardType","cardSlots","_ref","blueprints","blueprint","filteredByCost","setupBlueprint","indexOf","filterByCost","createCardList","_ref2","Cards","RandomSetup","resetMarket","RESET","createMarket","CREATE","getCards","SupplySelection","_createSupply","gems","relics","spells","createSupply","isCard","MODES","_len","_key","tuple","newStateWithDBWrite","setTurnOrderToDbSuccess","setTurnOrderToDbFailure","discard","started","init","INIT","draw","DRAW","newRound","NEW_ROUND","addToTop","cardId","ADD_TO_TOP","addToBottom","ADD_TO_BOTTOM","shuffleIntoDeck","SHUFFLE_INTO_DECK","SET_TURNORDER_TO_DB_SUCCESS","SET_TURNORDER_TO_DB_FAILURE","startGame","START_GAME","resetGame","RESET_GAME","getDeck","TurnOrder","ActiveGame","getDiscard","getHasStarted","INITIAL_PLAYER_SETUP","Mode","SelectedPlayerCount","SelectedSetup","setMode","mode","SET_MODE","selectPlayerCount","playerCountId","SELECT_PLAYER_COUNT","setupId","getMode","Configuration","getConfiguration","selectedSetup","map","adjustSetup","getAvailableCards","getSelectedPlayerCount","activeGameActions","cardDrawn","cardToAdd","find","cardToShuffle","newDeck","shuffledDeck","Main","getUserConfiguration","USER_CONFIGURATION_GET","ContentLoading","RootReducer","reduceReducers","list","SelectedExpansions","availableNemeses","ROUTES","Card","styled","MuiCard","withConfig","displayName","componentId","CardContent","MuiCardContent","Icon","props","theme","CardTypeIcon","React","memo","react_default","createElement","className","ExpansionName","Typography","Name","NemesisTile","objectWithoutProperties","NemesisTile_Card","NemesisTile_CardContent","NemesisTile_ExpansionName","NemesisTile_Name","variant","component","NemesisTile_CardTypeIcon","EmptyNemesisHint","ShuffleButton","Fab","NoSelectedExpansions","Typography_default","paragraph","mapDispatchToProps","Nemeses","hasStandaloneExpansionSelected","Fragment","Nemeses_NemesisTile","Nemeses_EmptyNemesisHint","components_ShuffleButton","onClick","components_NoSelectedExpansions","connect","MageCountPicker","selectedValue","handleAmountChange","Card_default","CardContent_default","FormControl_default","FormLabel_default","RadioGroup_default","aria-label","value","onChange","row","FormControlLabel_default","control","Radio_default","label","MageGridWrapper","Wrapper","Grid","CardTypeIcon_Icon","MageTile","MageTile_Wrapper","item","xs","md","MageTile_Card","MageTile_CardContent","MageTile_ExpansionName","MageTile_Name","MageTile_CardTypeIcon","MageList","MageList_MageGridWrapper","Grid_default","container","Mages_MageTile","EmptyMageListHint","setMageCount","setMages","mageCount","noMagesGeneratedYet","Mages_MageCountPicker","toString","e","parseInt","currentTarget","Mages_EmptyMageListHint","Mages_MageList","useExpandedHandling","_useState","useState","_useState2","slicedToArray","expanded","setExpanded","createExpansionHandler","panel","event","StyledExpansionPanel","ExpansionPanel","StyledExpansionPanelSummary","ExpansionPanelSummary","Heading","children","expansionHandler","expansionKey","summary","ExpansionPanel_StyledExpansionPanel","ExpansionPanel_StyledExpansionPanelSummary","expandIcon","ExpandMore_default","components_Heading","ExpansionPanelDetails_default","ListWrapper","CardName","MarketTile_CardTypeIcon_Icon","CardInfoItem","ListItem","Info","InfoLabel","CostInfo","MarketTile_CardInfoItem","MarketTile_InfoLabel","MarketTile_Info","CostOperation","ExpansionInfo","MarketTile","tileSetup","rest","assign","MarketTile_Card","toLowerCase","MarketTile_CardContent","MarketTile_CostOperation","MarketTile_CardName","List_default","MarketTile_ExpansionInfo","MarketTile_CostInfo","MarketTile_CardTypeIcon","SupplyList","marketSetup","Supply_ListWrapper","Supply_MarketTile","renderTiles","MarketOptionsWrapper","selected","main","TileList","TileListItem","SupplyName","SupplyPreview","clickHandler","_ref$selected","_ref$showName","showName","SupplyPreview_Wrapper","data-value","SupplyPreview_TileList","tile","index","SupplyPreview_TileListItem","SupplyPreview_SupplyName","MarketOptions","activeMarketSetups","allMarketSetups","Supply_MarketOptionsWrapper","components_SupplyPreview","dataset","_useExpandedHandling","components_ExpansionPanel","Supply_MarketOptions","Supply_SupplyList","DefaultCheckbox","checked","changeHandler","Checkbox_default","Item","_ref2$Component","Component","CheckboxList","items","FormGroup_default","style","marginBottom","handleChange","CheckboxList_Item","renderCheckboxes","handleSelectAll","ActiveSets","standalones","miniExpansions","promos","expansionsToItems","components_CheckboxList","_useExpansionHandling","useExpansionHandling","Expansions_ActiveSets","CheckboxWithPreview","SetupSelection","predefinedSetups","customSetups","Supply_CheckboxWithPreview","Supply_SetupSelection","Settings_Expansions","Settings_Supply","Cell","MuiTableCell","RowWrapper","MuiTableRow","turnOrderCardColors","Row","DiscardTable_RowWrapper","DiscardTable_Cell","align","IconButton_default","title","index_es","Table","MuiTable","DiscardTable","DiscardTable_Table","TableBody_default","DiscardTable_Row","renderRows","drawCard","ActiveTurnOrder","Button_default","size","TurnOrder_DiscardTable","CardNameDisplay","turnOrderSetup","TurnOrder_Card","gutterBottom","renderCardNames","ModeSelection","PlayerCountSelection","selectedPlayerCount","playerCount","renderSetupOptions","TurnOrderConfiguration","currentConfiguration","hasMoreThanOneVariant","TurnOrder_PlayerCountSelection","TurnOrder_SetupSelection","TurnOrder_ModeSelection","TurnOrder_CardNameDisplay","gameHasStarted","TurnOrder_TurnOrderConfiguration","HeaderPlaceholder","openDrawerMixin","css","_templateObject","unit","drawerIsOpen","isLoading","Content","_ROUTES$nemeses$ROUTE","route","Content_Wrapper","Content_HeaderPlaceholder","CircularProgress_default","pages_Nemeses","pages_Mages","pages_Supply","pages_TurnOrder","pages_Settings","Title","AppBar_templateObject","AppBar","AppBar_default","IconButton","MuiIconButton","MenuButton","MenuButton_Wrapper","MenuButton_IconButton","Menu_default","TopBar","currentLocation","toggleDrawer","TopBar_AppBar","Toolbar_default","disableGutters","TopBar_MenuButton","TopBar_Title","RouteItem","clickhandler","ListItem_default","button","ListItemIcon_default","ListItemText_default","Routes","locationhandler","components_RouteItem","Build_default","width","Header","AppInfo","GithHubLink","Link","GitHubLogo","Drawer","MuiDrawer","withStyles","paper","DrawerMenu","moveTo","DrawerMenu_Drawer","open","onClose","anchor","DrawerMenu_Header","ChevronLeft_default","Divider_default","components_Routes","DrawerMenu_AppInfo","process","GitHubLink","href","target","DrawerMenu_GitHubLogo","src","alt","MainApp","setCurrentLocation","_useState3","_useState4","setDrawerIsOpen","useEffect","components_TopBar","components_DrawerMenu","components_Content","App","styled_components_browser_esm","styles","App_Wrapper","CssBaseline_default","App_MainApp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","store","enhancers","applyMiddleware","apply","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","generateClassName","createGenerateClassName","jss","jssPreset","insertionPoint","document","getElementById","ReactDOM","render","es","JssProvider_default","components_App","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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D,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,MACND,GAAI,OAEN,CACEI,UAAW,KACXH,KAAM,cACND,GAAI,eAEN,CACEI,UAAW,KACXH,KAAM,SACND,GAAI,UAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,aAGRT,MAAO,CACL,CACEW,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,uBACND,GAAI,sBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,KAIZC,GAAI,CACFP,GAAI,KACJC,KAAM,OACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,qBACND,GAAI,oBAEN,CACEI,UAAW,KACXH,KAAM,mBACND,GAAI,mBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,YAGRT,MAAO,CACL,CACEW,KAAM,MACNE,UAAW,KACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,KAIZE,GAAI,CACFR,GAAI,KACJC,KAAM,aACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,sBACND,GAAI,qBAEN,CACEI,UAAW,KACXH,KAAM,eACND,GAAI,iBAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,SACND,GAAI,UAEN,CACEI,UAAW,KACXH,KAAM,UACND,GAAI,YAGRT,MAAO,CACL,CACEW,KAAM,QACNE,UAAW,KACXH,KAAM,OACND,GAAI,OACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,KAIZG,SAAU,CACRT,GAAI,WACJC,KAAM,WACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,WACXH,KAAM,cACND,GAAI,cAEN,CACEI,UAAW,WACXH,KAAM,cACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,WACXH,KAAM,WACND,GAAI,aAGRT,MAAO,CACL,CACEW,KAAM,QACNE,UAAW,WACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,QACND,GAAI,QACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,WACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,WACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,KAIZI,OAAQ,CACNV,GAAI,SACJC,KAAM,SACNC,KAAM,aACNC,QAAS,CACP,CACEC,UAAW,SACXH,KAAM,UACND,GAAI,WAEN,CACEI,UAAW,SACXH,KAAM,YACND,GAAI,aAEN,CACEI,UAAW,SACXH,KAAM,cACND,GAAI,cAEN,CACEI,UAAW,SACXH,KAAM,kBACND,GAAI,kBAEN,CACEI,UAAW,SACXH,KAAM,kBACND,GAAI,kBAEN,CACEI,UAAW,SACXH,KAAM,iBACND,GAAI,kBAGRK,MAAO,CACL,CACED,UAAW,SACXH,KAAM,eACND,GAAI,eAEN,CACEI,UAAW,SACXH,KAAM,gBACND,GAAI,gBAEN,CACEI,UAAW,SACXH,KAAM,gBACND,GAAI,gBAEN,CACEI,UAAW,SACXH,KAAM,cACND,GAAI,eAGRT,MAAO,CACL,CACEW,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,cACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,WACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,KAIZK,OAAQ,CACNX,GAAI,SACJC,KAAM,SACNC,KAAM,OACNC,QAAS,CACP,CACEC,UAAW,SACXH,KAAM,cACND,GAAI,eAGRK,MAAO,CACL,CACED,UAAW,SACXH,KAAM,MACND,GAAI,OAEN,CACEI,UAAW,SACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,SACXH,KAAM,QACND,GAAI,UAGRT,MAAO,CACL,CACEW,KAAM,QACNE,UAAW,SACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,aACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,wBACND,GAAI,uBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,oBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,SACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,SACXH,KAAM,iBACND,GAAI,iBACJM,KAAM,KAIZM,GAAI,CACFZ,GAAI,KACJC,KAAM,iBACNC,KAAM,OACNC,QAAS,GACTE,MAAO,GACPd,MAAO,CACL,CACEW,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,YACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,oBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,aACND,GAAI,YACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,qBACND,GAAI,mBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,KAIZO,GAAI,CACFb,GAAI,KACJC,KAAM,YACNC,KAAM,aACNC,QAAS,CACP,CACEC,UAAW,KACXH,KAAM,iBACND,GAAI,iBAEN,CACEI,UAAW,KACXH,KAAM,eACND,GAAI,eAEN,CACEI,UAAW,KACXH,KAAM,qBACND,GAAI,oBAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,cAGRK,MAAO,CACL,CACED,UAAW,KACXH,KAAM,WACND,GAAI,YAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,SAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,OACND,GAAI,QAEN,CACEI,UAAW,KACXH,KAAM,YACND,GAAI,aAEN,CACEI,UAAW,KACXH,KAAM,QACND,GAAI,UAGRT,MAAO,CACL,CACEW,KAAM,MACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,SACND,GAAI,SACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,kBACND,GAAI,iBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,mBACND,GAAI,kBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,iBACND,GAAI,gBACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,eACND,GAAI,cACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,YACND,GAAI,WACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KACXH,KAAM,gBACND,GAAI,eACJM,KAAM,GAER,CACEJ,KAAM,MACNE,UAAW,KACXH,KAAM,OACND,GAAI,OACJM,KAAM,GAER,CACEJ,KAAM,QACNE,UAAW,KA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","file":"static/js/main.76168f8d.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport config from '../../../../config'\nimport { RootState } from '../../'\n\nconst EXPANSIONS_DB_KEY = 'expansions'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{ [key: string]: boolean }>\nexport const initialState: State = config.EXPANSIONS.reduce(\n  (acc, set) => ({ ...acc, [set]: false }),\n  {}\n)\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_ALL = 'Settings/Expansions/SelectedExpansions/TOGGLE_ALL',\n  TOGGLE_EXPANSION = 'Settings/Expansions/SelectedExpansions/TOGGLE_EXPANSION',\n  SET_TO_DB = 'Settings/Expansions/SelectedExpansions/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SelectedExpansions/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SelectedExpansions/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SelectedExpansions/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  toggleAll: () => createAction(ActionTypes.TOGGLE_ALL),\n  toggleExpansion: (expansion: string) =>\n    createAction(ActionTypes.TOGGLE_EXPANSION, expansion),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nconst allSetsAreSelected = (state: State) =>\n  Object.values(state).every(val => val === true)\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_ALL: {\n      const allSetsSelected = allSetsAreSelected(state)\n      const newState = config.EXPANSIONS.reduce(\n        (acc, set) => ({ ...acc, [set]: !allSetsSelected }),\n        {}\n      )\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [EXPANSIONS_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.TOGGLE_EXPANSION: {\n      const newState = { ...state, [action.payload]: !state[action.payload] }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [EXPANSIONS_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [EXPANSIONS_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      return action.payload || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getSelectedExpansionsState = (state: RootState) =>\n  state.Settings.Expansions.Selected\n\nconst getSelectedExpansionsArray = createSelector(\n  [getSelectedExpansionsState],\n  selectedExpansions =>\n    Object.keys(selectedExpansions).filter(key => selectedExpansions[key])\n)\n\nconst getAllSetsSelected = createSelector(\n  [getSelectedExpansionsState],\n  selectedExpansions => allSetsAreSelected(selectedExpansions)\n)\n\nconst getHasStandaloneSet = createSelector(\n  [getSelectedExpansionsArray],\n  selectedExpansions =>\n    selectedExpansions.some(\n      expansion => config.DATA[expansion].type === 'standalone'\n    )\n)\n\nexport const selectors = {\n  getSelectedExpansionsState,\n  getSelectedExpansionsArray,\n  getAllSetsSelected,\n  getHasStandaloneSet,\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport pink from '@material-ui/core/colors/pink'\n\nexport const muiTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: pink,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n})\n\nconst playerColors = {\n  player1: {\n    normal: '#8BC34A',\n    light: '#F1F8E9',\n  },\n  player2: {\n    normal: '#FF9800',\n    light: '#FFF3E0',\n  },\n  player3: {\n    normal: '#2196F3',\n    light: '#E3F2FD',\n  },\n  player4: {\n    normal: '#9C27B0',\n    light: '#F3E5F5',\n  },\n}\n\nexport const mainTheme = {\n  heading: {\n    fontSize: muiTheme.typography.pxToRem(15),\n  },\n  spacing: muiTheme.spacing,\n  drawerWidth: 240,\n  muiTransitions: {\n    appBarShift: muiTheme.transitions.create(['margin', 'width'], {\n      easing: muiTheme.transitions.easing.easeOut,\n      duration: muiTheme.transitions.duration.enteringScreen,\n    }),\n    content: muiTheme.transitions.create('margin', {\n      easing: muiTheme.transitions.easing.sharp,\n      duration: muiTheme.transitions.duration.leavingScreen,\n    }),\n    contentShift: muiTheme.transitions.create('margin', {\n      easing: muiTheme.transitions.easing.easeOut,\n      duration: muiTheme.transitions.duration.enteringScreen,\n    }),\n  },\n  colors: {\n    primary: muiTheme.palette.primary,\n    secondary: muiTheme.palette.secondary,\n    text: muiTheme.palette.text,\n    turnOrderCards: {\n      ...playerColors,\n      player12: {\n        normal: `linear-gradient(135deg, ${playerColors.player1.normal} 0%, ${\n          playerColors.player1.normal\n        } 50%, ${playerColors.player2.normal} 50%, ${\n          playerColors.player2.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player1.light} 0%, ${\n          playerColors.player1.light\n        } 50%, ${playerColors.player2.light} 50%, ${\n          playerColors.player2.light\n        } 100%)`,\n      },\n      player34: {\n        normal: `linear-gradient(135deg, ${playerColors.player3.normal} 0%, ${\n          playerColors.player3.normal\n        } 50%, ${playerColors.player4.normal} 50%, ${\n          playerColors.player4.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player3.light} 0%, ${\n          playerColors.player3.light\n        } 50%, ${playerColors.player4.light} 50%, ${\n          playerColors.player4.light\n        } 100%)`,\n      },\n      wild: {\n        normal: '#9E9E9E',\n        light: '#FAFAFA',\n      },\n      'wild-token': {\n        normal: `linear-gradient(135deg, ${playerColors.player1.normal} 0%, ${\n          playerColors.player1.normal\n        } 33%, ${playerColors.player2.normal} 33%, ${\n          playerColors.player2.normal\n        } 66%, ${playerColors.player3.normal} 66%, ${\n          playerColors.player3.normal\n        } 100%)`,\n        light: `linear-gradient(135deg, ${playerColors.player1.light} 0%, ${\n          playerColors.player1.light\n        } 33%, ${playerColors.player2.light} 33%, ${\n          playerColors.player2.light\n        } 66%, ${playerColors.player3.light} 66%, ${\n          playerColors.player3.light\n        } 100%)`,\n      },\n      nemesis: {\n        normal: '#f44336',\n        light: '#ffebee',\n      },\n      maelstrom: {\n        normal: '#795548',\n        light: '#EFEBE9',\n      },\n      blitz: {\n        normal: '#607D8B',\n        light: '#ECEFF1',\n      },\n    },\n    cards: {\n      gem: {\n        color: '#B39DDB',\n        background: '#EDE7F6',\n      },\n      relic: {\n        color: '#90CAF9',\n        background: '#E3F2FD',\n      },\n      spell: {\n        color: '#FFCC80',\n        background: '#FFF3E0',\n      },\n      nemesis: {\n        color: '#E0E0E0',\n      },\n      mage: {\n        color: '#E0E0E0',\n      },\n    },\n  },\n}\n\nexport type TurnOrderColors = typeof mainTheme.colors.turnOrderCards\n","import { IExpansionData } from '../types'\n\nexport const DATA: IExpansionData = {\n  WE: {\n    id: 'WE',\n    name: 'War Eternal',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'WE',\n        name: 'Gate Witch',\n        id: 'GateWitch',\n      },\n      {\n        expansion: 'WE',\n        name: 'Hollow Crown',\n        id: 'HollowCrown',\n      },\n      {\n        expansion: 'WE',\n        name: 'Magus Of Cloaks',\n        id: 'MagusOfCloaks',\n      },\n      {\n        expansion: 'WE',\n        name: 'Umbra Titan',\n        id: 'UmbraTitan',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'WE',\n        name: 'Dezmodia',\n        id: 'Dezmodia',\n      },\n      {\n        expansion: 'WE',\n        name: 'Garu',\n        id: 'Garu',\n      },\n      {\n        expansion: 'WE',\n        name: 'Gex',\n        id: 'Gex',\n      },\n      {\n        expansion: 'WE',\n        name: 'Mazahaedron',\n        id: 'Mazahaedron',\n      },\n      {\n        expansion: 'WE',\n        name: 'MistWE',\n        id: 'MistWE',\n      },\n      {\n        expansion: 'WE',\n        name: 'Quilius',\n        id: 'Quilius',\n      },\n      {\n        expansion: 'WE',\n        name: 'Ulgimor',\n        id: 'Ulgimor',\n      },\n      {\n        expansion: 'WE',\n        name: 'Yan Magda',\n        id: 'YanMagda',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Erratic Ingot',\n        id: 'ErraticIngot',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Reduce To Ash',\n        id: 'ReduceToAsh',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Vortex Gauntlet',\n        id: 'VortexGauntlet',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Carbonize',\n        id: 'Carbonize',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Equilibrium',\n        id: 'Equilibrium',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Volcanic Glass',\n        id: 'VolcanicGlass',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Convection Field',\n        id: 'ConvectionField',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Jagged Lightning',\n        id: 'JaggedLightning',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Bloodstone Jewel',\n        id: 'BloodstoneJewel',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Kindle',\n        id: 'Kindle',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Thoughtform Familiar',\n        id: 'ThoughtformFamiliar',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Crystallize',\n        id: 'Crystallize',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Fiery Torrent',\n        id: 'FieryTorrent',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Celestial Spire',\n        id: 'CelestialSpire',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Conjure The Lost',\n        id: 'ConjureTheLost',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Nova Forge',\n        id: 'NovaForge',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Dread Diamond',\n        id: 'DreadDiamond',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Cairn Compass',\n        id: 'CairnCompass',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Scoria Slag',\n        id: 'ScoriaSlag',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Breach Ore',\n        id: 'BreachOre',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Fiend Catcher',\n        id: 'FiendCatcher',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Pyrotechnic Surge',\n        id: 'PyrotechnicSurge',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'WE',\n        name: 'Aurora',\n        id: 'Aurora',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Conclave Scroll',\n        id: 'ConclaveScroll',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Primordial Fetish',\n        id: 'PrimordialFetish',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'WE',\n        name: 'Frozen Magmite',\n        id: 'FrozenMagmite',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'WE',\n        name: 'Mages Totem',\n        id: 'MagesTotem',\n        cost: 2,\n      },\n    ],\n  },\n  TV: {\n    id: 'TV',\n    name: 'Void',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'TV',\n        name: 'Knight Of Shackles',\n        id: 'KnightOfShackles',\n      },\n      {\n        expansion: 'TV',\n        name: 'Maiden Of Thorns',\n        id: 'MaidenOfThorns',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'TV',\n        name: 'Sparrow',\n        id: 'Sparrow',\n      },\n      {\n        expansion: 'TV',\n        name: 'XaxosTV',\n        id: 'XaxosTV',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'TV',\n        name: 'Fossilized Scarab',\n        id: 'FossilizedScarab',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Thermal Dart',\n        id: 'ThermalDart',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Resonate',\n        id: 'Resonate',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Conflagration',\n        id: 'Conflagration',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TV',\n        name: 'Dimensional Key',\n        id: 'DimensionalKey',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Inner Fire',\n        id: 'InnerFire',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'TV',\n        name: 'Fulminate',\n        id: 'Fulminate',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'TV',\n        name: 'Eternity Charm',\n        id: 'EternityCharm',\n        cost: 3,\n      },\n    ],\n  },\n  OD: {\n    id: 'OD',\n    name: 'Outer Dark',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'OD',\n        name: 'Thrice Dead Prophet',\n        id: 'ThriceDeadProphet',\n      },\n      {\n        expansion: 'OD',\n        name: 'Wraithmonger',\n        id: 'Wraithmonger',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'OD',\n        name: 'Indira',\n        id: 'Indira',\n      },\n      {\n        expansion: 'OD',\n        name: 'Remnant',\n        id: 'Remnant',\n      },\n    ],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Char',\n        id: 'Char',\n        cost: 8,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Alien Element',\n        id: 'AlienElement',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Scorch',\n        id: 'Scorch',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Pyromancy',\n        id: 'Pyromancy',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Feedback Aura',\n        id: 'FeedbackAura',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Catalyst',\n        id: 'Catalyst',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Pain Stone',\n        id: 'PainStone',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'OD',\n        name: 'Astral Cube',\n        id: 'AstralCube',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'OD',\n        name: 'Riddle Sphere',\n        id: 'RiddleSphere',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'OD',\n        name: 'Nether Conduit',\n        id: 'NetherConduit',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'OD',\n        name: 'Haunted Berylite',\n        id: 'HauntedBerylite',\n        cost: 3,\n      },\n    ],\n  },\n  Nameless: {\n    id: 'Nameless',\n    name: 'Nameless',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'Nameless',\n        name: 'Blight Lord',\n        id: 'BlightLord',\n      },\n      {\n        expansion: 'Nameless',\n        name: 'Wayward One',\n        id: 'WaywardOne',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Nameless',\n        name: 'Malastar',\n        id: 'Malastar',\n      },\n    ],\n    cards: [\n      {\n        type: 'Relic',\n        expansion: 'Nameless',\n        name: 'Molten Hammer',\n        id: 'MoltenHammer',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Radiance',\n        id: 'Radiance',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Blaze',\n        id: 'Blaze',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Scrying Bolt',\n        id: 'ScryingBolt',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Nameless',\n        name: 'Sages Brand',\n        id: 'SagesBrand',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Nameless',\n        name: 'Leeching Agate',\n        id: 'LeechingAgate',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Nameless',\n        name: 'Temporal Helix',\n        id: 'TemporalHelix',\n        cost: 7,\n      },\n    ],\n  },\n  Legacy: {\n    id: 'Legacy',\n    name: 'Legacy',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'Legacy',\n        name: 'Bladius',\n        id: 'Bladius',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Deathmind',\n        id: 'Deathmind',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Fungal Mesh',\n        id: 'FungalMesh',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Maelstrom Risen',\n        id: 'MaelstromRisen',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Spawning Horror',\n        id: 'SpawningHorror',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Xaxos Ascended',\n        id: 'XaxosAscended',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Green',\n        id: 'LegacyGreen',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Yellow',\n        id: 'LegacyYellow',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Orange',\n        id: 'LegacyOrange',\n      },\n      {\n        expansion: 'Legacy',\n        name: 'Legacy Blue',\n        id: 'LegacyBlue',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Branching Radite',\n        id: 'BranchingRadite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Fire Chakram',\n        id: 'FireChakram',\n        cost: 2,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Brane Knife',\n        id: 'BraneKnife',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Fulmite Slab',\n        id: 'FulmiteSlab',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Gilded Marble',\n        id: 'GildedMarble',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Voltaic Relay',\n        id: 'VoltaicRelay',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Sparking Siphon',\n        id: 'SparkingSiphon',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Communion',\n        id: 'BreachCommunion',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Infernal Mirror',\n        id: 'InfernalMirror',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Geophage',\n        id: 'Geophage',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Force Transfusion',\n        id: 'ForceTransfusion',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Conductive Grit',\n        id: 'ConductiveGrit',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Ancient Cyanolith',\n        id: 'AncientCyanolith',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Ethereal Hand',\n        id: 'EtherealHand',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Bending Beam',\n        id: 'BendingBeam',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Entangled Shard',\n        id: 'EntangledShard',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Arcane Salvo',\n        id: 'ArcaneSalvo',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Phased Portalite',\n        id: 'PhasedPortalite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Pyro Geist',\n        id: 'PyroGeist',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Flare',\n        id: 'BreachFlare',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Thunderous Oath',\n        id: 'ThunderousOath',\n        cost: 8,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Soothing Torporene',\n        id: 'SoothingTorporene',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Arcing Silicate',\n        id: 'ArcingSilicate',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Warping Haze',\n        id: 'WarpingHaze',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Incinerating Fist',\n        id: 'IncineratingFist',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Reality Stabilizer',\n        id: 'RealityStabilizer',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Breach Collision',\n        id: 'BreachCollision',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Fiery Conclusion',\n        id: 'FieryConclusion',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Starfire Frenzy',\n        id: 'StarfireFrenzy',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Crumbling Compound',\n        id: 'CrumblingCompound',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Prophetic Lens',\n        id: 'PropheticLens',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Adrenal Batteries',\n        id: 'AdrenalBatteries',\n        cost: 7,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Legacy',\n        name: 'Refined Lumenium',\n        id: 'RefinedLumenium',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Void Mill',\n        id: 'VoidMill',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Gravity Node',\n        id: 'GravityNode',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Legacy',\n        name: 'Neural Wreath',\n        id: 'NeuralWreath',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Legacy',\n        name: 'Sphere OfInversion',\n        id: 'SphereOfInversion',\n        cost: 9,\n      },\n    ],\n  },\n  Depths: {\n    id: 'Depths',\n    name: 'Depths',\n    type: 'mini',\n    nemeses: [\n      {\n        expansion: 'Depths',\n        name: 'Horde Crone',\n        id: 'HordeCrone',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'Depths',\n        name: 'Nym',\n        id: 'Nym',\n      },\n      {\n        expansion: 'Depths',\n        name: 'Reeve',\n        id: 'Reeve',\n      },\n      {\n        expansion: 'Depths',\n        name: 'Zhana',\n        id: 'Zhana',\n      },\n    ],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Void Bond',\n        id: 'VoidBond',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Combustion',\n        id: 'Combustion',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Depths',\n        name: 'Vim Dynamo',\n        id: 'VimDynamo',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Disintegrating Scythe',\n        id: 'DisintegratingScythe',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Monstrous Inferno',\n        id: 'MonstrousInferno',\n        cost: 8,\n      },\n      {\n        type: 'Spell',\n        expansion: 'Depths',\n        name: 'Devouring Shadow',\n        id: 'DevouringShadow',\n        cost: 6,\n      },\n      {\n        type: 'Gem',\n        expansion: 'Depths',\n        name: 'Banishing Topaz',\n        id: 'BanishingTopaz',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'Depths',\n        name: 'Transmogrifier',\n        id: 'Transmogrifier',\n        cost: 4,\n      },\n    ],\n  },\n  BS: {\n    id: 'BS',\n    name: 'Buried Secrets',\n    type: 'mini',\n    nemeses: [],\n    mages: [],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Triplite Core',\n        id: 'TripliteCore',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Nerve Jab',\n        id: 'NerveJab',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Double Tap',\n        id: 'DoubleTap',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Oblivium Resin',\n        id: 'ObliviumResin',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Summonite',\n        id: 'Summonite',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Manifold Container',\n        id: 'ManifoldContainer',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Draining Touch',\n        id: 'DrainingTouch',\n        cost: 2,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Jolting Crust',\n        id: 'JoltingCrust',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Mentite Chunk',\n        id: 'MentiteChunk',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Soul Cords',\n        id: 'SoulCords',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Voidium Spike',\n        id: 'VoidiumSpike',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Precision Shot',\n        id: 'PrecisionShot',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Muted Lacosite',\n        id: 'MutedLacosite',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Blade Of Wisdom',\n        id: 'BladeOfWisdom',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Stunning Force',\n        id: 'StunningForce',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Flash Of Intellect',\n        id: 'FlashOfIntellect',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Scholars Opus',\n        id: 'ScholarsOpus',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Bottled Star',\n        id: 'BottledStar',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Burning Current',\n        id: 'BurningCurrent',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'BS',\n        name: 'Psychic Eruption',\n        id: 'PsychicEruption',\n        cost: 8,\n      },\n      {\n        type: 'Relic',\n        expansion: 'BS',\n        name: 'Living Gauntlet',\n        id: 'LivingGauntlet',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'BS',\n        name: 'Shining Tetrite',\n        id: 'ShiningTetrite',\n        cost: 6,\n      },\n    ],\n  },\n  AE: {\n    id: 'AE',\n    name: 'Aeons End',\n    type: 'standalone',\n    nemeses: [\n      {\n        expansion: 'AE',\n        name: 'Carapace Queen',\n        id: 'CarapaceQueen',\n      },\n      {\n        expansion: 'AE',\n        name: 'Crooked Mask',\n        id: 'CrookedMask',\n      },\n      {\n        expansion: 'AE',\n        name: 'Prince Of Gluttons',\n        id: 'PrinceOfGluttons',\n      },\n      {\n        expansion: 'AE',\n        name: 'Rageborne',\n        id: 'RageBorne',\n      },\n    ],\n    mages: [\n      {\n        expansion: 'AE',\n        name: 'Adelheim',\n        id: 'Adelheim',\n      },\n      {\n        expansion: 'AE',\n        name: 'Brama',\n        id: 'Brama',\n      },\n      {\n        expansion: 'AE',\n        name: 'Jian',\n        id: 'Jian',\n      },\n      {\n        expansion: 'AE',\n        name: 'Kadir',\n        id: 'Kadir',\n      },\n      {\n        expansion: 'AE',\n        name: 'Lash',\n        id: 'Lash',\n      },\n      {\n        expansion: 'AE',\n        name: 'Mist',\n        id: 'Mist',\n      },\n      {\n        expansion: 'AE',\n        name: 'Phaedraxa',\n        id: 'Phaedraxa',\n      },\n      {\n        expansion: 'AE',\n        name: 'Xaxos',\n        id: 'Xaxos',\n      },\n    ],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Diamond Cluster',\n        id: 'DiamondCluster',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Chaos Arc',\n        id: 'ChaosArc',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Ignite',\n        id: 'Ignite',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Essence Theft',\n        id: 'EssenceTheft',\n        cost: 5,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Searing Ruby',\n        id: 'SearingRuby',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Feral Lightning',\n        id: 'FeralLightning',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Planar Insight',\n        id: 'PlanarInsight',\n        cost: 6,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Spectral Echo',\n        id: 'SpectralEcho',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Burning Opal',\n        id: 'BurningOpal',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Consuming Void',\n        id: 'ConsumingVoid',\n        cost: 7,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Unstable Prism',\n        id: 'UnstablePrism',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Clouded Sapphire',\n        id: 'CloudedSapphire',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Mages Talisman',\n        id: 'MagesTalisman',\n        cost: 5,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Flexing Dagger',\n        id: 'FlexingDagger',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Lava Tendril',\n        id: 'LavaTendril',\n        cost: 4,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Bottled Vortex',\n        id: 'BottledVortex',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Arcane Nexus',\n        id: 'ArcaneNexus',\n        cost: 7,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Dark Fire',\n        id: 'DarkFire',\n        cost: 5,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Phoenix Flame',\n        id: 'PhoenixFlame',\n        cost: 3,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Jade',\n        id: 'Jade',\n        cost: 2,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Amplify Vision',\n        id: 'AmplifyVision',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Vriswood Amber',\n        id: 'VriswoodAmber',\n        cost: 3,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Blasting Staff',\n        id: 'BlastingStaff',\n        cost: 4,\n      },\n      {\n        type: 'Gem',\n        expansion: 'AE',\n        name: 'Sifters Pearl',\n        id: 'SiftersPearl',\n        cost: 3,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Wildfire Whip',\n        id: 'WildfireWhip',\n        cost: 6,\n      },\n      {\n        type: 'Relic',\n        expansion: 'AE',\n        name: 'Focusing Orb',\n        id: 'FocusingOrb',\n        cost: 4,\n      },\n      {\n        type: 'Spell',\n        expansion: 'AE',\n        name: 'Oblivion Swell',\n        id: 'OblivionSwell',\n        cost: 5,\n      },\n    ],\n  },\n  'p-1': {\n    id: 'p-1',\n    name: 'Drown in Flames',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'p-1',\n        name: 'Drown in Flames',\n        id: 'DrownInFlames',\n        cost: 6,\n      },\n    ],\n  },\n  'p-2': {\n    id: 'p-2',\n    name: 'Fleeting Vision',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'p-2',\n        name: 'Fleeting Vision',\n        id: 'FleetingVision',\n        cost: 3,\n      },\n    ],\n  },\n  'p-3': {\n    id: 'p-3',\n    name: 'Splinter Missile',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'p-3',\n        name: 'Splinter Missile',\n        id: 'SplinterMissile',\n        cost: 5,\n      },\n    ],\n  },\n  'p-4': {\n    id: 'p-4',\n    name: 'Echo Stone',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Gem',\n        expansion: 'p-4',\n        name: 'Echo Stone',\n        id: 'EchoStone',\n        cost: 4,\n      },\n    ],\n  },\n  'p-5': {\n    id: 'p-5',\n    name: 'Thieving Spirit',\n    type: 'promo',\n    mages: [],\n    nemeses: [],\n    cards: [\n      {\n        type: 'Spell',\n        expansion: 'p-5',\n        name: 'Thieving Spirit',\n        id: 'ThievingSpirit',\n        cost: 5,\n      },\n    ],\n  },\n}\n","import { ITurnOrderSetups, ITurnOrderCard } from '../types'\n\nexport const TURNORDERCARDS: { [key: string]: ITurnOrderCard } = {\n  'player1-1': { id: 'player1-1', name: 'Player 1', type: 'player1' },\n  'player1-2': { id: 'player1-2', name: 'Player 1', type: 'player1' },\n  'player1-3': { id: 'player1-3', name: 'Player 1', type: 'player1' },\n  'player1-4': { id: 'player1-4', name: 'Player 1', type: 'player1' },\n\n  'player2-1': { id: 'player2-1', name: 'Player 2', type: 'player2' },\n  'player2-2': { id: 'player2-2', name: 'Player 2', type: 'player2' },\n\n  'player3-1': { id: 'player3-1', name: 'Player 3', type: 'player3' },\n  'player4-1': { id: 'player4-1', name: 'Player 4', type: 'player4' },\n\n  'player12-1': { id: 'player12-1', name: 'Player 1/2', type: 'player12' },\n  'player12-2': { id: 'player12-2', name: 'Player 1/2', type: 'player12' },\n  'player34-1': { id: 'player34-1', name: 'Player 3/4', type: 'player34' },\n  'player34-2': { id: 'player34-2', name: 'Player 3/4', type: 'player34' },\n\n  wild: { id: 'wild', name: 'Wild', type: 'wild' },\n  wildToken: { id: 'wildToken', name: 'Wild Token', type: 'wild-token' },\n\n  'nemesis-1': { id: 'nemesis-1', name: 'Nemesis', type: 'nemesis' },\n  'nemesis-2': { id: 'nemesis-2', name: 'Nemesis', type: 'nemesis' },\n\n  maelstrom: {\n    id: 'maelstrom',\n    name: 'Maelstrom Assault',\n    type: 'maelstrom',\n  },\n\n  blitz: {\n    id: 'blitz',\n    name: 'Blitz',\n    type: 'blitz',\n  },\n}\n\nexport const TURNORDERSETUPS: ITurnOrderSetups = {\n  onePlayer: {\n    id: 'onePlayer',\n    name: '1',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default (3 ToC)',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player1-3'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      '4toc': {\n        id: '4toc',\n        name: '4 ToC',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player1-3'],\n          TURNORDERCARDS['player1-4'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  twoPlayers: {\n    id: 'twoPlayers',\n    name: '2',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player1-2'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player2-2'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  threePlayers: {\n    id: 'threePlayers',\n    name: '3',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['wild'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      wildToken: {\n        id: 'wildToken',\n        name: 'Wild Token',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['wildToken'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n  fourPlayers: {\n    id: 'fourPlayers',\n    name: '4',\n    variations: {\n      default: {\n        id: 'default',\n        name: 'Default',\n        turnOrderCards: [\n          TURNORDERCARDS['player1-1'],\n          TURNORDERCARDS['player2-1'],\n          TURNORDERCARDS['player3-1'],\n          TURNORDERCARDS['player4-1'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n      splitPlayers: {\n        id: 'splitPlayers',\n        name: 'Split Player Cards (1/2, 3/4)',\n        turnOrderCards: [\n          TURNORDERCARDS['player12-1'],\n          TURNORDERCARDS['player12-2'],\n          TURNORDERCARDS['player34-1'],\n          TURNORDERCARDS['player34-2'],\n          TURNORDERCARDS['nemesis-1'],\n          TURNORDERCARDS['nemesis-2'],\n        ],\n      },\n    },\n  },\n}\n","import { DATA } from './aeonsData'\nimport { MARKETSETUPS } from './marketSetups'\nimport { TURNORDERSETUPS, TURNORDERCARDS } from './turnOrderSetups'\n\nconst EXPANSIONS = Object.keys(DATA)\nconst DEFAULTSUPPLYCOUNT = 9\n\nexport default {\n  DATA,\n  DEFAULTSUPPLYCOUNT,\n  EXPANSIONS,\n  MARKETSETUPS,\n  TURNORDERSETUPS,\n  TURNORDERCARDS,\n}\n","import { IMarketSetups } from '../types'\n\nexport const MARKETSETUPS: IMarketSetups = {\n  market1Inc: {\n    id: 'market1Inc',\n    name: 'Market Setup 1 (inclusive)',\n    type: 'custom',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<=', threshold: 5 },\n      { type: 'Spell', operation: '<=', threshold: 5 },\n      { type: 'Spell', operation: '>=', threshold: 5 },\n      { type: 'Spell', operation: '>=', threshold: 5 },\n    ],\n  },\n  market1: {\n    id: 'market1',\n    name: 'Market Setup 1',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n    ],\n  },\n  market2: {\n    id: 'market2',\n    name: 'Market Setup 2',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 3 },\n      { type: 'Gem', operation: '>', threshold: 3 },\n      { type: 'Gem', operation: '>', threshold: 3 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '<', threshold: 6 },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  market3: {\n    id: 'market3',\n    name: 'Market Setup 3',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '<', threshold: 4 },\n      { type: 'Gem', operation: 'OR', values: [4, 5] },\n      { type: 'Gem', operation: 'OR', values: [4, 5] },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '=', threshold: 3 },\n      { type: 'Spell', operation: '=', threshold: 4 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n    ],\n  },\n  market4: {\n    id: 'market4',\n    name: 'Market Setup 4',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '>', threshold: 4 },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: '<', threshold: 4 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '<', threshold: 5 },\n      { type: 'Spell', operation: '>', threshold: 5 },\n      { type: 'Spell', operation: 'ANY' },\n    ],\n  },\n  market5: {\n    id: 'market5',\n    name: 'Market Setup 5',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '=', threshold: 2 },\n      { type: 'Gem', operation: '=', threshold: 3 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Gem', operation: '=', threshold: 5 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: '=', threshold: 4 },\n      { type: 'Spell', operation: '=', threshold: 5 },\n      { type: 'Spell', operation: '=', threshold: 6 },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  market6: {\n    id: 'market6',\n    name: 'Market Setup 6',\n    type: 'official',\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: '=', threshold: 3 },\n      { type: 'Gem', operation: '=', threshold: 4 },\n      { type: 'Relic', operation: '<', threshold: 4 },\n      { type: 'Relic', operation: '>', threshold: 4 },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: 'OR', values: [3, 4] },\n      { type: 'Spell', operation: 'OR', values: [5, 6] },\n      { type: 'Spell', operation: 'OR', values: [5, 6] },\n      { type: 'Spell', operation: '>', threshold: 6 },\n    ],\n  },\n  random: {\n    id: 'random',\n    name: 'Random Setup (Default)',\n    type: 'official',\n    default: true, // this flag removes the setup from the settings, so it will always be active\n    active: true,\n    tiles: [\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Gem', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Relic', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n      { type: 'Spell', operation: 'ANY' },\n    ],\n  },\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport config from '../../../../config'\nimport * as types from '../../../../types'\nimport { RootState } from '../../'\n\nconst SUPPLY_DB_KEY = 'supplySetups'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Predefined: types.IMarketSetups\n  Custom: types.IMarketSetups\n}\nexport const initialState: State = {\n  Predefined: config.MARKETSETUPS,\n  Custom: {},\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  TOGGLE_ALL = 'Settings/Expansions/SupplySetups/TOGGLE_ALL',\n  TOGGLE_SETUP = 'Settings/Expansions/SupplySetups/TOGGLE_SETUP',\n  SET_TO_DB = 'Settings/Expansions/SupplySetups/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'Settings/Expansions/SupplySetups/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'Settings/Expansions/SupplySetups/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'Settings/Expansions/SupplySetups/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'Settings/Expansions/SupplySetups/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'Settings/Expansions/SupplySetups/FETCH_FROM_DB_FAILURE',\n}\n\ntype SetupType = 'Predefined' | 'Custom'\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  toggleAll: () => createAction(ActionTypes.TOGGLE_ALL),\n  toggleSetup: (setup: string, setupType: SetupType) =>\n    createAction(ActionTypes.TOGGLE_SETUP, { setup, setupType }),\n  setToDB: (state: State) => createAction(ActionTypes.SET_TO_DB, state),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: (error: Object) =>\n    createAction(ActionTypes.SET_TO_DB_FAILURE, error),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: (error: Object) =>\n    createAction(ActionTypes.FETCH_FROM_DB_FAILURE, error),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nconst allSetsAreSelected = (state: State) =>\n  Object.values({ ...state.Predefined, ...state.Custom }).every(\n    val => val.active\n  )\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_ALL: {\n      const allSetsSelected = allSetsAreSelected(state)\n      const newPredefined = Object.values(state.Predefined).reduce(\n        (acc, setup) => ({\n          ...acc,\n          [setup.id]: {\n            ...setup,\n            active: setup.default ? true : !allSetsSelected,\n          },\n        }),\n        {}\n      )\n      const newCustom = Object.values(state.Custom).reduce(\n        (acc, setup) => ({\n          ...acc,\n          [setup.id]: { ...setup, active: !allSetsSelected },\n        }),\n        {}\n      )\n      const newState = { Predefined: newPredefined, Custom: newCustom }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.TOGGLE_SETUP: {\n      const { setup, setupType } = action.payload\n      const newState = {\n        ...state,\n        [setupType]: {\n          ...state[setupType],\n          [setup]: {\n            ...state[setupType][setup],\n            active: !state[setupType][setup].active,\n          },\n        },\n      }\n\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [SUPPLY_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [SUPPLY_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      return action.payload || initialState\n    }\n\n    case ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return state\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getState = (state: RootState) => state.Settings.SupplySetups\nconst getPredefined = (state: RootState) =>\n  state.Settings.SupplySetups.Predefined\nconst getCustom = (state: RootState) => state.Settings.SupplySetups.Custom\n\nconst getPredefinedAsArray = createSelector(\n  [getPredefined],\n  predefined => Object.values(predefined).filter(setup => !setup.default)\n)\n\nconst getCustomAsArray = createSelector(\n  [getCustom],\n  custom => Object.values(custom).filter(setup => !setup.default)\n)\n\nconst getCustomAndPredefined = createSelector(\n  [getPredefined, getCustom],\n  (predefined, custom) => ({ ...predefined, ...custom })\n)\n\nconst getAllAsArray = createSelector(\n  [getCustomAndPredefined],\n  customAndPredefined => Object.values(customAndPredefined)\n)\n\nconst makeGetCustomAndPredefined = () => getCustomAndPredefined\n\nconst getAllExceptDefaultSets = createSelector(\n  [getAllAsArray],\n  allSets => allSets.filter(set => !set.default)\n)\n\nconst getActiveSetups = createSelector(\n  [getAllAsArray],\n  allSets => allSets.filter(setup => setup.active)\n)\n\nconst getAllSetsSelected = createSelector(\n  [getState],\n  state => allSetsAreSelected(state)\n)\n\nexport const selectors = {\n  getActiveSetups,\n  getAllAsArray,\n  getAllExceptDefaultSets,\n  getAllSetsSelected,\n  getCustom,\n  getCustomAndPredefined,\n  getCustomAsArray,\n  getPredefined,\n  getPredefinedAsArray,\n  makeGetCustomAndPredefined,\n}\n","import { combineReducers } from 'redux-loop'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport { RootState } from '../'\nimport * as SelectedExpansions from '../Settings/Expansions/Selected'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<boolean>\nexport const initialState = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport type Action = SelectedExpansions.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB: {\n      return true\n    }\n\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB_SUCCESS:\n    case SelectedExpansions.ActionTypes.FETCH_FROM_DB_FAILURE: {\n      return false\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getIsLoading = (state: RootState) => state.MainContentLoading\n\nexport const selectors = {\n  getIsLoading,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport config from '../../../../config'\nimport * as Selected from './Selected'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Selected: Selected.State\n}\n\nexport const initialState = {\n  Selected: Selected.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport type Action = Selected.Action\n\nexport const actions = {\n  Selected: Selected.actions,\n}\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers<State, Action>({\n  Selected: Selected.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getExpansionNamesByType = (type: string) =>\n  config.EXPANSIONS.filter(expansion => config.DATA[expansion].type === type)\n\nexport const selectors = {\n  getStandaloneExpansions: getExpansionNamesByType('standalone').sort(),\n  getMiniExpansions: getExpansionNamesByType('mini').sort(),\n  getPromos: getExpansionNamesByType('promo').sort((a, b) => {\n    const promoA = config.DATA[a].name\n    const promoB = config.DATA[b].name\n\n    if (promoA < promoB) {\n      return -1\n    }\n\n    if (promoA > promoB) {\n      return 1\n    }\n\n    return 0\n  }),\n  Selected: Selected.selectors,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport config from '../../../config'\nimport { ICreature } from '../../../types'\nimport { RootState } from '../'\nimport { getListOfAvailableEntity, getRandomEntity } from '../../helpers'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<ICreature> | undefined\nexport const initialState: State = undefined\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_RANDOM = 'Nemesis/SET_RANDOM',\n}\n\nexport const actions = {\n  setRandomNemesis: (expansions: ReadonlyArray<string>) =>\n    createAction(ActionTypes.SET_RANDOM, expansions),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_RANDOM: {\n      const expansions = action.payload\n      const availableNemeses = getListOfAvailableEntity(expansions, 'nemeses')\n      return getRandomEntity(availableNemeses)\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getNemesis = (state: RootState) => state.Nemesis\n\nexport const selectors = {\n  getNemesis,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Expansions from './Expansions'\nimport * as SupplySetups from './SupplySetups'\n\nexport type State = {\n  Expansions: Expansions.State\n  SupplySetups: SupplySetups.State\n}\n\nexport type Action = Expansions.Action | SupplySetups.Action\n\nexport const actions = {\n  Expansions: Expansions.actions,\n  SupplySetups: SupplySetups.actions,\n}\n\nexport const selectors = {\n  Expansions: Expansions.selectors,\n  SupplySetups: SupplySetups.selectors,\n}\n\nexport const initialState = {\n  Expansions: Expansions.initialState,\n  SupplySetups: SupplySetups.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Expansions: Expansions.Reducer,\n  SupplySetups: SupplySetups.Reducer,\n})\n","import config from '../config'\nimport * as types from '../types'\n\nexport const createSlotList = (\n  amount: number\n): Array<types.IEmptyBluePrint> => {\n  return Array.from(\n    { length: amount },\n    (): types.IEmptyBluePrint => ({ type: 'EMPTY', operation: 'NoOp' })\n  )\n}\n\n/**\n * Collects lists of entities (like \"cards\", \"mages\", \"nemeses\") for each\n * set the user has configured inside the application settings and combines them into one.\n * Example:\n *  const selSets = [ \"AE\", \"WE\" ]\n *\n *  getListOfAvailableEntity(selSets, \"mages\") // => [ {...}, ...]\n */\nexport const getListOfAvailableEntity = (\n  selectedSets: ReadonlyArray<string>,\n  entity: types.EntityType\n) =>\n  selectedSets.reduce(\n    (\n      acc: Array<types.ICard | types.ICreature>,\n      expansion: string\n    ): Array<types.ICard | types.ICreature> => {\n      return [...acc, ...config.DATA[expansion][entity]]\n    },\n    []\n  )\n\nexport const isCardArray = (\n  entityList: Array<types.ICard | types.ICreature>\n): entityList is Array<types.ICard> => {\n  return (<types.ICard>entityList[0]).name !== undefined\n}\n\n// TODO Refactor turnorder cards and mages (code duplication)\ntype TurnOrderListReductionResult = {\n  availableCards: types.ITurnOrderCard[]\n  result: types.ITurnOrderCard[]\n}\n\nexport const createTurnOrderCardList = (\n  availableCards: types.ITurnOrderCard[],\n  slots: types.ITurnOrderCard[],\n  getEntity: <T>(list: Array<T>) => T\n): TurnOrderListReductionResult => {\n  const result = slots.reduce(\n    (\n      acc: TurnOrderListReductionResult,\n      slot: types.ITurnOrderCard,\n      i: number\n    ) => {\n      // If no entity is left, simply return the actual empty slot\n      const card = getEntity(acc.availableCards) || slot\n\n      // Make sure each entity will only be added to the result list once\n      const remainingCards = acc.availableCards.filter(\n        entity => entity.id !== card.id\n      )\n\n      return {\n        availableCards: remainingCards,\n        result: [...acc.result, card],\n      }\n    },\n    { availableCards, result: [] }\n  )\n\n  return result\n}\n\ntype MageListReductionResult = {\n  availableMages: types.ICreature[]\n  result: types.ICreature[]\n}\n\nexport const createMageList = (\n  availableMages: types.ICreature[],\n  slots: Array<types.Slot>,\n  getEntity: <T>(list: Array<T>) => T\n): MageListReductionResult => {\n  const result = slots.reduce(\n    (acc: MageListReductionResult, slot: types.Slot, i: number) => {\n      // If no entity is left, simply return the actual empty slot\n      const mage = getEntity(acc.availableMages) || slot\n\n      // Make sure each entity will only be added to the result list once\n      const remainingMages = acc.availableMages.filter(\n        entity => entity.id !== mage.id\n      )\n\n      return {\n        availableMages: remainingMages,\n        result: [...acc.result, mage],\n      }\n    },\n    { availableMages, result: [] }\n  )\n\n  return result\n}\n\nexport const shuffleDeck = (\n  deck: types.ITurnOrderCard[]\n): types.ITurnOrderCard[] => {\n  return createTurnOrderCardList(deck, deck, getRandomEntity).result\n}\n\n/**\n * Gets a random value from a list. (The wording of entities is just used for semantic context)\n */\nexport const getRandomEntity = <E>(availableEntities: Array<E>) =>\n  availableEntities[Math.floor(Math.random() * availableEntities.length)]\n\nexport const getOperationString = (\n  operation: types.Operation,\n  values?: number[],\n  threshold?: number\n) => {\n  if (operation === 'OR' && values) {\n    return values.join('/')\n  }\n\n  const thresholdValue = threshold ? threshold : ''\n\n  return `${operation} ${thresholdValue}`\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport { RootState } from '../../'\n\n///////////\n// STATE //\n///////////\n\nexport type MageCount = 1 | 2 | 3 | 4\nexport type State = MageCount\nexport const initialState: State = 1\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET = 'Mages/Count/SET',\n}\n\nexport const actions = {\n  setCount: (count: MageCount) => createAction(ActionTypes.SET, count),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getCount = (state: RootState) => state.Mages.Count\n\nexport const selectors = {\n  getCount,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport config from '../../../../config'\nimport { ICreature } from '../../../../types'\nimport { RootState } from '../../'\nimport {\n  createSlotList,\n  createMageList,\n  getListOfAvailableEntity,\n  getRandomEntity,\n} from '../../../helpers'\n\nimport { MageCount } from '../Count'\n\n///////////\n// STATE //\n///////////\n\nexport type State = ReadonlyArray<ICreature>\nexport const initialState: State = []\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_RANDOM = 'Mages/Recruited/SET_RANDOM',\n}\n\nexport const actions = {\n  setRandomMages: (expansions: ReadonlyArray<string>, count: MageCount) =>\n    createAction(ActionTypes.SET_RANDOM, { expansions, count }),\n  noOp: () => createAction('NOOP'),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_RANDOM: {\n      const { expansions, count } = action.payload\n      const availableMages = getListOfAvailableEntity(expansions, 'mages')\n      const slotList = createSlotList(count)\n      const { result } = createMageList(\n        availableMages,\n        slotList,\n        getRandomEntity\n      )\n      return result\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getMages = (state: RootState) => state.Mages.Recruited\n\nexport const selectors = {\n  getMages,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport config from '../../../../config'\nimport * as types from '../../../../types'\nimport { RootState } from '../../'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Selected: types.IMarketSetup\n}>\nexport const initialState: State = {\n  // FIXME we should ensure with typescript, that the 'default: true' property is not\n  // optional for default state here\n  Selected: config.MARKETSETUPS['random'],\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SELECT_SETUP = 'Supply/Selection/SELECT_SETUP',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  selectSetup: (setup: Readonly<types.IMarketSetup>) =>\n    createAction(ActionTypes.SELECT_SETUP, setup),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SELECT_SETUP: {\n      return {\n        ...state,\n        Selected: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getSelectedSetup = (state: RootState) => state.Supply.Selection.Selected\n\nexport const selectors = {\n  getSelectedSetup,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Count from './Count'\nimport * as Recruited from './Recruited'\n\nexport type State = {\n  Count: Count.State\n  Recruited: Recruited.State\n}\n\nexport type Action = Count.Action | Recruited.Action\n\nexport const selectors = {\n  Count: Count.selectors,\n  Recruited: Recruited.selectors,\n}\n\nexport const actions = {\n  Count: Count.actions,\n  Recruited: Recruited.actions,\n}\n\nexport const initialState = {\n  Count: Count.initialState,\n  Recruited: Recruited.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Count: Count.Reducer,\n  Recruited: Recruited.Reducer,\n})\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport { Slot, ICard } from '../../../../types'\nimport { createSlotList } from '../../../helpers'\nimport config from '../../../../config'\nimport { RootState } from '../../'\nimport { createSupply } from './helpers'\nimport * as SupplySelection from '../Selection'\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Cards: ReadonlyArray<Slot | ICard>\n}>\nexport const initialState: State = {\n  Cards: createSlotList(config.DEFAULTSUPPLYCOUNT),\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  RESET = 'Supply/RandomSetup/RESET',\n  CREATE = 'Supply/RandomSetup/CREATE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  resetMarket: () => createAction(ActionTypes.RESET),\n  createMarket: (\n    expansions: ReadonlyArray<string>,\n    tiles: ReadonlyArray<Slot>\n  ) => createAction(ActionTypes.CREATE, { expansions, tiles }),\n}\n\nexport type Action = ActionsUnion<typeof actions> | SupplySelection.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case SupplySelection.ActionTypes.SELECT_SETUP:\n    case ActionTypes.RESET: {\n      return initialState\n    }\n\n    case ActionTypes.CREATE: {\n      const { expansions, tiles } = action.payload\n      const { gems, relics, spells } = createSupply(expansions, tiles)\n      return {\n        ...state,\n        Cards: [...gems.result, ...relics.result, ...spells.result],\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getCards = (state: RootState) => state.Supply.RandomSetup.Cards\n\nexport const selectors = {\n  getCards,\n}\n","import { ICard, IBluePrint, CardType } from '../../../../types'\nimport {\n  getListOfAvailableEntity,\n  getRandomEntity,\n  isCardArray,\n} from '../../../helpers'\n\ntype CardListReduceResult = {\n  availableCards: ICard[]\n  result: ICard[]\n}\n\n/**\n * Given a card object and a setupBlueprint this returns either\n * true or false, depending on the cost of the card and the expectation set by\n * the blueprints operation and cost.\n */\nconst filterByCost = (card: ICard, setupBlueprint: IBluePrint) => {\n  switch (setupBlueprint.operation) {\n    case '<': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost < setupBlueprint.threshold\n    }\n    case '>': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost > setupBlueprint.threshold\n    }\n    case '<=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost <= setupBlueprint.threshold\n    }\n    case '>=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost >= setupBlueprint.threshold\n    }\n    case '=': {\n      if (!setupBlueprint.threshold) return true\n      return card.cost === setupBlueprint.threshold\n    }\n    case 'OR': {\n      if (!setupBlueprint.values) return true\n      return setupBlueprint.values.indexOf(card.cost) !== -1\n    }\n    default: {\n      return true\n    }\n  }\n}\n\nconst createCardList = (\n  availableCards: ICard[],\n  blueprints: Array<IBluePrint>,\n  getEntity: <T>(list: Array<T>) => T\n): CardListReduceResult => {\n  const result = blueprints.reduce(\n    (acc: CardListReduceResult, blueprint: IBluePrint, i: number) => {\n      const filteredByCost = acc.availableCards.filter(card =>\n        filterByCost(card, blueprint)\n      )\n\n      // If no entity is left, simply return the actual empty slot\n      const card = getEntity(filteredByCost) || blueprint\n\n      // Make sure each entity will only be added to the result list once\n      const remainingCards = acc.availableCards.filter(\n        entity => entity.id !== card.id\n      )\n\n      return {\n        availableCards: remainingCards,\n        result: [...acc.result, card],\n      }\n    },\n    { availableCards, result: [] }\n  )\n\n  return result\n}\n\n/**\n * Creates a list of randomly selected cards from a given pool of cards by a specific type.\n * The amount of cards generated is determined by the amount of tileSetups matching\n * the given cardType. E.g. if 2 out of 9 tileSetups have the type=\"Gem\" and the\n * specified type is \"Gem\" as well, a list of two cards will be created.\n *\n * return List<Card>\n */\nconst getRandomCardsByType = (\n  availableCards: ReadonlyArray<ICard>,\n  tileSetups: ReadonlyArray<IBluePrint>,\n  cardType: CardType\n) => {\n  const cardSlots = tileSetups.filter(({ type }) => type === cardType)\n  const availableCardsOfType = availableCards.filter(\n    ({ type }) => type === cardType\n  )\n  return createCardList(availableCardsOfType, cardSlots, getRandomEntity)\n}\n\n/**\n * Creates a supply object, containing gems, relics and spells with meta information.\n * The pool of available cards will be determined by the sets the user has selected\n * inside the application settings. The supply will be created via the blueprint\n * of the given tileSetups.\n *\n * return { gems, relics, spells }\n */\nexport const createSupply = (\n  selectedExpansions: ReadonlyArray<string>,\n  tileSetups: ReadonlyArray<IBluePrint>\n) => {\n  const availableCards = getListOfAvailableEntity(selectedExpansions, 'cards')\n\n  if (!isCardArray(availableCards)) {\n    return {\n      gems: { result: [] },\n      relics: { result: [] },\n      spells: { result: [] },\n    }\n  }\n\n  const gems = getRandomCardsByType(availableCards, tileSetups, 'Gem')\n  const relics = getRandomCardsByType(availableCards, tileSetups, 'Relic')\n  const spells = getRandomCardsByType(availableCards, tileSetups, 'Spell')\n\n  return { gems, relics, spells }\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport { RootState } from '../../'\nimport { ITurnOrderCard } from '../../../../types'\nimport { shuffleDeck } from '../../../helpers'\n\nexport const TURNORDER_GAME_DB_KEY = 'turnOrderGameState'\n\n/////////////\n// HELPERS //\n/////////////\n\nconst newStateWithDBWrite = (newState: State) => {\n  return loop(\n    newState,\n    Cmd.run<Action>(setToDb, {\n      args: [TURNORDER_GAME_DB_KEY, newState],\n      successActionCreator: actions.setTurnOrderToDbSuccess,\n      failActionCreator: actions.setTurnOrderToDbFailure,\n    })\n  )\n}\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  deck: Array<ITurnOrderCard>\n  discard: Array<ITurnOrderCard>\n  started: boolean\n}\nexport const initialState: State = {\n  deck: [],\n  discard: [],\n  started: false,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  INIT = 'TurnOrder/ActiveGame/INIT',\n  DRAW = 'TurnOrder/ActiveGame/DRAW',\n  NEW_ROUND = 'TurnOrder/ActiveGame/NEW_ROUND',\n  ADD_TO_TOP = 'TurnOrder/ActiveGame/ADD_TO_TOP',\n  ADD_TO_BOTTOM = 'TurnOrder/ActiveGame/ADD_TO_BOTTOM',\n  SHUFFLE_INTO_DECK = 'TurnOrder/ActiveGame/SHUFFLE_INTO_DECK',\n  SET_TURNORDER_TO_DB_SUCCESS = 'TurnOrder/ActiveGame/SET_TURNORDER_TO_DB_SUCCESS',\n  SET_TURNORDER_TO_DB_FAILURE = 'TurnOrder/ActiveGame/SET_TURNORDER_TO_DB_FAILURE',\n  START_GAME = 'TurnOrder/ActiveGame/START_GAME',\n  RESET_GAME = 'TurnOrder/ActiveGame/RESET_GAME',\n  FETCH_FROM_DB = 'TurnOrder/ActiveGame/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'TurnOrder/ActiveGame/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'TurnOrder/ActiveGame/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  init: (state: State) => createAction(ActionTypes.INIT, state),\n  draw: () => createAction(ActionTypes.DRAW),\n  newRound: (turnOrderCards: ITurnOrderCard[]) =>\n    createAction(ActionTypes.NEW_ROUND, turnOrderCards),\n  addToTop: (cardId: string) => createAction(ActionTypes.ADD_TO_TOP, cardId),\n  addToBottom: (cardId: string) =>\n    createAction(ActionTypes.ADD_TO_BOTTOM, cardId),\n  shuffleIntoDeck: (cardId: string) =>\n    createAction(ActionTypes.SHUFFLE_INTO_DECK, cardId),\n  setTurnOrderToDbSuccess: () =>\n    createAction(ActionTypes.SET_TURNORDER_TO_DB_SUCCESS),\n  setTurnOrderToDbFailure: () =>\n    createAction(ActionTypes.SET_TURNORDER_TO_DB_FAILURE),\n  startGame: (turnOrderCards: ITurnOrderCard[]) =>\n    createAction(ActionTypes.START_GAME, turnOrderCards),\n  resetGame: () => createAction(ActionTypes.RESET_GAME),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: () => createAction(ActionTypes.FETCH_FROM_DB_FAILURE),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.INIT: {\n      return action.payload\n    }\n\n    case ActionTypes.DRAW: {\n      const { deck } = state\n\n      if (deck.length === 0) return state\n\n      const cardDrawn = deck[deck.length - 1]\n\n      const newState = {\n        ...state,\n        deck: deck.filter(card => card.id !== cardDrawn.id),\n        discard: [cardDrawn, ...state.discard],\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.NEW_ROUND: {\n      const newState = {\n        ...state,\n        deck: shuffleDeck(action.payload),\n        discard: [],\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.ADD_TO_TOP: {\n      const cardId = action.payload\n      const cardToAdd = state.discard.find(card => card.id === cardId)\n\n      if (!cardToAdd) return state\n\n      const newState = {\n        ...state,\n        deck: [...state.deck, cardToAdd],\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.ADD_TO_BOTTOM: {\n      const cardId = action.payload\n      const cardToAdd = state.discard.find(card => card.id === cardId)\n\n      if (!cardToAdd) return state\n\n      const newState = {\n        ...state,\n        deck: [cardToAdd, ...state.deck],\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.SHUFFLE_INTO_DECK: {\n      const cardId = action.payload\n      const cardToShuffle = state.discard.find(card => card.id === cardId)\n\n      if (!cardToShuffle) return state\n\n      const newDeck = [...state.deck, cardToShuffle]\n      const shuffledDeck = shuffleDeck(newDeck)\n\n      const newState = {\n        ...state,\n        deck: shuffledDeck,\n        discard: state.discard.filter(card => card.id !== cardId),\n      }\n\n      return newStateWithDBWrite(newState)\n    }\n\n    case ActionTypes.START_GAME: {\n      return newStateWithDBWrite({\n        started: true,\n        deck: shuffleDeck(action.payload),\n        discard: [],\n      })\n    }\n\n    case ActionTypes.RESET_GAME: {\n      return newStateWithDBWrite({\n        started: false,\n        deck: [],\n        discard: [],\n      })\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [TURNORDER_GAME_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      // If the fetched state somehow is undefined just take the current state instead\n      const newState = action.payload || state\n      return newState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getDeck = (state: RootState) => state.TurnOrder.ActiveGame.deck\nconst getDiscard = (state: RootState) => state.TurnOrder.ActiveGame.discard\nconst getHasStarted = (state: RootState) => state.TurnOrder.ActiveGame.started\n\nexport const selectors = {\n  getDeck,\n  getDiscard,\n  getHasStarted,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Selection from './Selection'\nimport * as RandomSetup from './RandomSetup'\n\nexport type State = {\n  Selection: Selection.State\n  RandomSetup: RandomSetup.State\n}\n\nexport type Action = Selection.Action | RandomSetup.Action\n\nexport const actions = {\n  Selection: Selection.actions,\n  RandomSetup: RandomSetup.actions,\n}\n\nexport const selectors = {\n  Selection: Selection.selectors,\n  RandomSetup: RandomSetup.selectors,\n}\n\nexport const initialState = {\n  Selection: Selection.initialState,\n  RandomSetup: RandomSetup.initialState,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Selection: Selection.Reducer,\n  RandomSetup: RandomSetup.Reducer,\n})\n","//////////\n// UTIL //\n//////////\n\ntype List = string | number | boolean | undefined | null | void | {}\nexport const tuple = <T extends List[]>(...args: T) => args\n\n//////////\n// DATA //\n//////////\n\nexport interface ICreature {\n  expansion: string\n  name: string\n  id: string\n}\n\nexport type CardType = 'Gem' | 'Relic' | 'Spell' | 'EMPTY'\n\nexport interface ICard {\n  type: CardType\n  expansion: string\n  name: string\n  id: string\n  cost: number\n}\n\nexport type ExpansionType = 'standalone' | 'mini' | 'promo'\n\nexport type EntityType = 'nemeses' | 'mages' | 'cards'\nexport type Entity = ICard | ICreature\n\nexport interface IExpansion {\n  id: string\n  name: string\n  type: ExpansionType\n  nemeses: Array<ICreature>\n  mages: Array<ICreature>\n  cards: Array<ICard>\n}\n\nexport interface IExpansionData {\n  [key: string]: IExpansion\n}\n\n////////////\n// Market //\n////////////\n\nexport type MarketType = 'official' | 'custom'\nexport type Operation = '<' | '>' | '=' | '<=' | '>=' | 'ANY' | 'OR' | 'NoOp'\n\nexport interface IBluePrint {\n  type: CardType\n  operation: Operation\n  threshold?: number\n  values?: Array<number>\n}\n\nexport interface IEmptyBluePrint extends IBluePrint {\n  type: 'EMPTY'\n  operation: 'NoOp'\n}\nexport type Slot = IBluePrint | IEmptyBluePrint\n\nexport type IMarketSetup = Readonly<{\n  id: string\n  name: string\n  type: MarketType\n  default?: boolean\n  active: boolean\n  tiles: Array<Slot>\n}>\n\nexport type IMarketSetups = Readonly<{ [key: string]: IMarketSetup }>\n\n///////////////\n// TurnOrder //\n///////////////\n\nexport type Player =\n  | 'Player 1'\n  | 'Player 2'\n  | 'Player 3'\n  | 'Player 4'\n  | 'Player 1/2'\n  | 'Player 3/4'\n  | 'Nemesis'\n  | 'Wild'\n  | 'Wild Token'\n  | 'Maelstrom Assault'\n  | 'Blitz'\n\nexport type TurnOrderCardType =\n  | 'player1'\n  | 'player2'\n  | 'player3'\n  | 'player4'\n  | 'player12'\n  | 'player34'\n  | 'wild'\n  | 'wild-token'\n  | 'nemesis'\n  | 'maelstrom'\n  | 'blitz'\n\nexport interface ITurnOrderCard {\n  id: string\n  name: Player\n  type: TurnOrderCardType\n}\n\nexport interface ITurnOrderSetups {\n  [key: string]: ITurnOrderPlayerCount\n}\n\nexport interface ITurnOrderPlayerCount {\n  id: string\n  name: string\n  variations: ITurnOrderVariations\n}\n\nexport interface ITurnOrderVariations {\n  [key: string]: ITurnOrderSetup\n}\n\nexport interface ITurnOrderSetup {\n  id: string\n  name: string\n  turnOrderCards: Array<ITurnOrderCard>\n}\n\nexport const isCard = (card: ICard | Slot): card is ICard => {\n  return (<ICard>card).name !== undefined\n}\n\nexport const MODES = tuple('Default', 'Maelstrom', 'Blitz')\nexport type Mode = typeof MODES[number] // automatically creates union from tuple\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createSelector } from 'reselect'\nimport { get as getFromDb, set as setToDb } from 'idb-keyval'\n\nimport config from '../../../../config'\nimport { ITurnOrderPlayerCount, ITurnOrderSetup, Mode } from '../../../../types'\nimport { RootState } from '../../'\nimport {\n  actions as activeGameActions,\n  Action as ActiveGameAction,\n} from '../ActiveGame'\n\nconst TURNORDER_CONFIG_DB_KEY = 'turnOrderConfiguration'\n\n/////////////\n// HELPERS //\n/////////////\n\nconst adjustSetup = (mode: Mode, setup: ITurnOrderSetup): ITurnOrderSetup => {\n  switch (mode) {\n    case 'Maelstrom': {\n      return {\n        id: setup.id,\n        name: setup.name,\n        turnOrderCards: setup.turnOrderCards.map(card => {\n          return card.id === 'nemesis-1' || card.id === 'blitz'\n            ? config.TURNORDERCARDS['maelstrom']\n            : card\n        }),\n      }\n    }\n\n    case 'Blitz': {\n      return {\n        id: setup.id,\n        name: setup.name,\n        turnOrderCards: setup.turnOrderCards.map(card => {\n          return card.id === 'nemesis-1' || card.id === 'maelstrom'\n            ? config.TURNORDERCARDS['blitz']\n            : card\n        }),\n      }\n    }\n\n    case 'Default':\n    default: {\n      return setup\n    }\n  }\n}\n\n///////////\n// STATE //\n///////////\n\nexport type State = Readonly<{\n  Mode: Mode\n  SelectedPlayerCount: ITurnOrderPlayerCount\n  SelectedSetup: ITurnOrderSetup\n}>\n\nconst INITIAL_MODE = 'Default'\nconst INITIAL_PLAYER_SETUP = config.TURNORDERSETUPS['onePlayer']\nconst INITIAL_VARIATION = INITIAL_PLAYER_SETUP.variations['default']\n\nexport const initialState: State = {\n  Mode: INITIAL_MODE,\n  SelectedPlayerCount: INITIAL_PLAYER_SETUP,\n  SelectedSetup: INITIAL_VARIATION,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_MODE = 'TurnOrder/Configuration/SET_MODE',\n  SELECT_PLAYER_COUNT = 'TurnOrder/Configuration/SELECT_PLAYER_COUNT',\n  SELECT_SETUP = 'TurnOrder/Configuration/SELECT_SETUP',\n  SET_TO_DB = 'TurnOrder/Configuration/SET_TO_DB',\n  SET_TO_DB_SUCCESS = 'TurnOrder/Configuration/SET_TO_DB_SUCCESS',\n  SET_TO_DB_FAILURE = 'TurnOrder/Configuration/SET_TO_DB_FAILURE',\n  FETCH_FROM_DB = 'TurnOrder/Configuration/FETCH_FROM_DB',\n  FETCH_FROM_DB_SUCCESS = 'TurnOrder/Configuration/FETCH_FROM_DB_SUCCESS',\n  FETCH_FROM_DB_FAILURE = 'TurnOrder/Configuration/FETCH_FROM_DB_FAILURE',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setMode: (mode: Mode) => createAction(ActionTypes.SET_MODE, mode),\n  selectPlayerCount: (playerCountId: string) =>\n    createAction(ActionTypes.SELECT_PLAYER_COUNT, playerCountId),\n  selectSetup: (setupId: string) =>\n    createAction(ActionTypes.SELECT_SETUP, setupId),\n  setToDB: () => createAction(ActionTypes.SET_TO_DB),\n  setToDBSuccessful: () => createAction(ActionTypes.SET_TO_DB_SUCCESS),\n  setToDBFailed: () => createAction(ActionTypes.SET_TO_DB_FAILURE),\n  fetchFromDB: () => createAction(ActionTypes.FETCH_FROM_DB),\n  fetchFromDBSuccessful: (state: State) =>\n    createAction(ActionTypes.FETCH_FROM_DB_SUCCESS, state),\n  fetchFromDBFailed: () => createAction(ActionTypes.FETCH_FROM_DB_FAILURE),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action | ActiveGameAction> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_MODE: {\n      const newState = { ...state, Mode: action.payload }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.SELECT_PLAYER_COUNT: {\n      const newState = {\n        ...state,\n        SelectedPlayerCount: config.TURNORDERSETUPS[action.payload],\n        SelectedSetup:\n          config.TURNORDERSETUPS[action.payload].variations['default'],\n      }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.SELECT_SETUP: {\n      const newState = {\n        ...state,\n        SelectedSetup: state.SelectedPlayerCount.variations[action.payload],\n      }\n      return loop(\n        newState,\n        Cmd.run<Action>(setToDb, {\n          args: [TURNORDER_CONFIG_DB_KEY, newState],\n          successActionCreator: actions.setToDBSuccessful,\n          failActionCreator: actions.setToDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB: {\n      return loop(\n        state,\n        Cmd.run<Action>(getFromDb, {\n          args: [TURNORDER_CONFIG_DB_KEY],\n          successActionCreator: actions.fetchFromDBSuccessful,\n          failActionCreator: actions.fetchFromDBFailed,\n        })\n      )\n    }\n\n    case ActionTypes.FETCH_FROM_DB_SUCCESS: {\n      // If the fetched state somehow is undefined just take the current state instead\n      const newState = action.payload || state\n      return loop(\n        newState,\n        // If we could load the configuration also load the actual\n        // turnorder game state\n        Cmd.action<ActiveGameAction>(activeGameActions.fetchFromDB())\n      )\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nconst getMode = (state: RootState) => state.TurnOrder.Configuration.Mode\nconst getSelectedPlayerCount = (state: RootState) =>\n  state.TurnOrder.Configuration.SelectedPlayerCount\nconst getSelectedSetup = (state: RootState) =>\n  state.TurnOrder.Configuration.SelectedSetup\nconst getConfiguration = createSelector(\n  [getMode, getSelectedSetup],\n  (mode, selectedSetup) => adjustSetup(mode, selectedSetup)\n)\nconst getAvailableCards = createSelector(\n  [getConfiguration],\n  config => config.turnOrderCards\n)\n\nexport const selectors = {\n  getMode,\n  getSelectedPlayerCount,\n  getSelectedSetup,\n  getConfiguration,\n  getAvailableCards,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\nimport { LoopReducer, loop, Cmd } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as MainContentLoading from './MainContentLoading'\nimport * as Settings from './Settings'\nimport * as Nemesis from './Nemesis'\nimport * as Mages from './Mages'\nimport * as Supply from './Supply'\nimport * as TurnOrder from './TurnOrder'\n\nexport type RootState = {\n  Settings: Settings.State\n  MainContentLoading: MainContentLoading.State\n  Nemesis: Nemesis.State\n  Mages: Mages.State\n  Supply: Supply.State\n  TurnOrder: TurnOrder.State\n}\n\nexport enum ActionTypes {\n  USER_CONFIGURATION_GET = 'ROOT/USER_CONFIGURATION_GET',\n}\n\nexport const mainActions = {\n  getUserConfiguration: () => createAction(ActionTypes.USER_CONFIGURATION_GET),\n}\n\nexport type MainAction = ActionsUnion<typeof mainActions>\n\nexport const actions = {\n  Settings: Settings.actions,\n  Main: mainActions,\n  TurnOrder: TurnOrder.actions,\n  Nemesis: Nemesis.actions,\n  Mages: Mages.actions,\n  Supply: Supply.actions,\n}\n\nexport const selectors = {\n  Settings: Settings.selectors,\n  Main: {\n    ContentLoading: MainContentLoading.selectors,\n  },\n  TurnOrder: TurnOrder.selectors,\n  Nemesis: Nemesis.selectors,\n  Mages: Mages.selectors,\n  Supply: Supply.selectors,\n}\n\nexport type RootAction =\n  | MainAction\n  | Settings.Action\n  | MainContentLoading.Action\n  | Nemesis.Action\n  | Mages.Action\n  | Supply.Action\n  | TurnOrder.Action\n\nexport const initialState = {\n  Settings: Settings.initialState,\n  MainContentLoading: MainContentLoading.initialState,\n  Nemesis: Nemesis.initialState,\n  Mages: Mages.initialState,\n  Supply: Supply.initialState,\n  TurnOrder: TurnOrder.initialState,\n}\n\nexport const MainReducer: LoopReducer<RootState, RootAction> = (\n  state: RootState = initialState,\n  action: RootAction\n) => {\n  switch (action.type) {\n    case ActionTypes.USER_CONFIGURATION_GET: {\n      return loop(\n        state,\n        Cmd.list<RootAction>([\n          Cmd.action(actions.Settings.Expansions.Selected.fetchFromDB()),\n          Cmd.action(actions.TurnOrder.Configuration.fetchFromDB()),\n          Cmd.action(actions.Settings.SupplySetups.fetchFromDB()),\n        ])\n      )\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\nexport const RootReducer = reduceReducers(\n  MainReducer,\n  combineReducers<RootState, RootAction>({\n    Settings: Settings.Reducer,\n    MainContentLoading: MainContentLoading.Reducer,\n    Nemesis: Nemesis.Reducer,\n    Mages: Mages.Reducer,\n    Supply: Supply.Reducer,\n    TurnOrder: TurnOrder.Reducer,\n  })\n)\n","import { combineReducers } from 'redux-loop'\n\nimport * as Configuration from './Configuration'\nimport * as ActiveGame from './ActiveGame'\n\nexport type State = {\n  Configuration: Configuration.State\n  ActiveGame: ActiveGame.State\n}\n\nexport type Action = Configuration.Action | ActiveGame.Action\n\nexport const initialState = {\n  Configuration: Configuration.initialState,\n  ActiveGame: ActiveGame.initialState,\n}\n\nexport const actions = {\n  Configuration: Configuration.actions,\n  ActiveGame: ActiveGame.actions,\n}\n\nexport const selectors = {\n  Configuration: Configuration.selectors,\n  ActiveGame: ActiveGame.selectors,\n}\n\nexport const Reducer = combineReducers<State, Action>({\n  Configuration: Configuration.Reducer,\n  ActiveGame: ActiveGame.Reducer,\n})\n","export const ROUTES = {\n  nemeses: 'Nemeses',\n  mages: 'Mages',\n  supply: 'Supply',\n  turnOrder: 'Turn Order',\n  settings: 'Settings',\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport MuiCard from '@material-ui/core/Card'\n\nconst Card = styled(MuiCard)`\n  position: relative;\n`\n\nCard.displayName = 'Card'\n\nexport default Card\n","import styled from 'styled-components/macro'\nimport MuiCardContent from '@material-ui/core/CardContent'\n\nconst CardContent = styled(MuiCardContent)`\n  position: relative;\n  z-index: 1;\n`\n\nCardContent.displayName = 'CardContent'\n\nexport default CardContent\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\ntype Props = {\n  type: string\n}\n\nconst Icon = styled('i')<Props>`\n  position: absolute;\n  right: 8px;\n  bottom: -8px;\n  font-size: 120px;\n  z-index: 0;\n  opacity: 0.2;\n\n  color: ${props => props.theme.colors.cards[props.type].color};\n`\n\nconst CardTypeIcon = React.memo(({ type }: Props) => {\n  switch (type) {\n    case 'nemesis': {\n      return <Icon type={type} className=\"ra ra-lg ra-broken-skull\" />\n    }\n    default: {\n      return null\n    }\n  }\n})\n\nCardTypeIcon.displayName = 'CardTypeIcon'\n\nexport default CardTypeIcon\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst ExpansionName = styled(Typography)``\n\nExpansionName.displayName = 'ExpansionName'\n\nexport default ExpansionName\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst Name = styled(Typography)``\n\nName.displayName = 'Name'\n\nexport default Name\n","import React from 'react'\n\nimport config from '../../../../config'\nimport { ICreature } from '../../../../types'\n\nimport Card from './Card'\nimport CardContent from './CardContent'\nimport CardTypeIcon from './CardTypeIcon'\nimport ExpansionName from './ExpansionName'\nimport Name from './Name'\n\ntype Props = {\n  nemesis: ICreature\n}\n\nconst NemesisTile = React.memo(({ nemesis, ...rest }: Props) => {\n  return (\n    <Card>\n      <CardContent>\n        <ExpansionName color=\"textSecondary\">\n          {config.DATA[nemesis.expansion].name}\n        </ExpansionName>\n        <Name variant=\"h6\" component=\"h2\">\n          {nemesis['name']}\n        </Name>\n      </CardContent>\n      <CardTypeIcon type=\"nemesis\" />\n    </Card>\n  )\n})\n\nNemesisTile.displayName = 'NemesisTile'\n\nexport default NemesisTile\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst EmptyNemesisHint = styled(Typography)``\n\nEmptyNemesisHint.displayName = 'EmptyNemesisHint'\n\nexport default EmptyNemesisHint\n","import styled from 'styled-components/macro'\nimport Fab from '@material-ui/core/Fab'\n\nconst ShuffleButton = styled(Fab)`\n  position: fixed;\n  bottom: 24px;\n  right: 24px;\n  z-index: 10;\n`\n\nShuffleButton.displayName = 'ShuffleButton'\n\nexport default ShuffleButton\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography'\n\nconst NoSelectedExpansions = React.memo(() => (\n  <Typography paragraph>\n    There is currently no standalone set selected. Please activate at least one\n    standalone set in the settings.\n  </Typography>\n))\n\nNoSelectedExpansions.displayName = 'NoSelectedExpansions'\n\nexport default NoSelectedExpansions\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nimport NemesisTile from './NemesisTile'\nimport EmptyNemesisHint from './EmptyNemesisHint'\n\nimport ShuffleButton from '../../ShuffleButton'\nimport NoSelectedExpansions from '../../NoSelectedExpansions'\n\n\nconst mapStateToProps = (state: RootState) => ({\n  hasStandaloneExpansionSelected: selectors.Settings.Expansions.Selected.getHasStandaloneSet(\n    state\n  ),\n  selectedExpansions: selectors.Settings.Expansions.Selected.getSelectedExpansionsArray(\n    state\n  ),\n  nemesis: selectors.Nemesis.getNemesis(state),\n})\n\nconst mapDispatchToProps = {\n  setRandomNemesis: actions.Nemesis.setRandomNemesis,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Nemeses = React.memo(\n  ({\n    hasStandaloneExpansionSelected,\n    nemesis,\n    selectedExpansions,\n    setRandomNemesis,\n  }: Props) => {\n    if (!hasStandaloneExpansionSelected) {\n      return <NoSelectedExpansions />\n    }\n\n    return (\n      <React.Fragment>\n        {nemesis ? (\n          <NemesisTile nemesis={nemesis} />\n        ) : (\n          <EmptyNemesisHint>Tab button to spawn new nemesis!</EmptyNemesisHint>\n        )}\n        <ShuffleButton\n          onClick={() => setRandomNemesis(selectedExpansions)}\n          color=\"primary\"\n          variant=\"extended\"\n        >\n          Open Breach\n        </ShuffleButton>\n      </React.Fragment>\n    )\n  }\n)\n\nNemeses.displayName = 'Nemeses'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Nemeses)\n","import React from 'react'\n\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\n\ntype Props = {\n  selectedValue: string\n  handleAmountChange: (e: React.ChangeEvent<any>) => void\n}\n\nconst MageCountPicker = React.memo(\n  ({ selectedValue, handleAmountChange }: Props) => (\n    <Card>\n      <CardContent>\n        <FormControl component={'fieldset' as 'div'}>\n          <FormLabel>Amount of Mages</FormLabel>\n          <RadioGroup\n            aria-label=\"Amount of Mages\"\n            name=\"mageAmount\"\n            value={selectedValue}\n            onChange={handleAmountChange}\n            row={true}\n          >\n            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\n            <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\n            <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\n            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\n          </RadioGroup>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n)\n\nMageCountPicker.displayName = 'MageCountPicker'\n\nexport default MageCountPicker\n","import styled from 'styled-components/macro'\n\nconst MageGridWrapper = styled('div')`\n  margin-top: 24px;\n`\n\nMageGridWrapper.displayName = 'MageGridWrapper'\n\nexport default MageGridWrapper\n","import styled from 'styled-components/macro'\nimport Grid from '@material-ui/core/Grid'\n\nconst Wrapper = styled(Grid)``\n\nWrapper.displayName = 'Wrapper'\n\nexport default Wrapper\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport MuiCard from '@material-ui/core/Card'\n\nconst Card = styled(MuiCard)`\n  position: relative;\n  height: 100%;\n`\n\nCard.displayName = 'Card'\n\nexport default Card\n","import styled from 'styled-components/macro'\nimport MuiCardContent from '@material-ui/core/CardContent'\n\nconst CardContent = styled(MuiCardContent)`\n  position: relative;\n  z-index: 1;\n`\n\nCardContent.displayName = 'CardContent'\n\nexport default CardContent\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\ntype Props = {\n  type: string\n}\n\nconst Icon = styled('i')<Props>`\n  position: absolute;\n  right: 8px;\n  bottom: -8px;\n  font-size: 120px;\n  z-index: 0;\n  opacity: 0.2;\n\n  color: ${props => props.theme.colors.cards[props.type].color};\n`\n\nconst CardTypeIcon = React.memo(({ type }: Props) => {\n  switch (type) {\n    case 'mage': {\n      return <Icon type={type} className=\"ra ra-lg ra-fluffy-swirl\" />\n    }\n    default: {\n      return null\n    }\n  }\n})\n\nCardTypeIcon.displayName = 'CardTypeIcon'\n\nexport default CardTypeIcon\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst ExpansionName = styled(Typography)``\n\nExpansionName.displayName = 'ExpansionName'\n\nexport default ExpansionName\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst Name = styled(Typography)``\n\nName.displayName = 'Name'\n\nexport default Name\n","import React from 'react'\n\nimport config from '../../../../config'\nimport { ICreature } from '../../../../types'\n\nimport Wrapper from './Wrapper'\nimport Card from './Card'\nimport CardContent from './CardContent'\nimport CardTypeIcon from './CardTypeIcon'\nimport ExpansionName from './ExpansionName'\nimport Name from './Name'\n\ntype Props = {\n  mage: ICreature\n}\n\nconst MageTile = React.memo(({ mage }: Props) => (\n  <Wrapper item xs={6} md={3}>\n    <Card>\n      <CardContent>\n        <ExpansionName color=\"textSecondary\">\n          {config.DATA[mage.expansion].name}\n        </ExpansionName>\n        <Name variant=\"h6\" component=\"h2\">\n          {mage.name}\n        </Name>\n      </CardContent>\n      <CardTypeIcon type=\"mage\" />\n    </Card>\n  </Wrapper>\n))\n\nMageTile.displayName = 'MageTile'\n\nexport default MageTile\n","import React from 'react'\n\nimport { ICreature } from '../../../../types'\n\nimport MageGridWrapper from './MageGridWrapper'\nimport MageTile from '../MageTile'\n\nimport Grid from '@material-ui/core/Grid'\n\ntype Props = {\n  mages: ReadonlyArray<ICreature>\n}\n\nconst MageList = React.memo(({ mages }: Props) => (\n  <MageGridWrapper>\n    <Grid container spacing={16}>\n      {mages.map(mage => (\n        <MageTile mage={mage} key={mage.name} />\n      ))}\n    </Grid>\n  </MageGridWrapper>\n))\n\nMageList.displayName = 'MageList'\n\nexport default MageList\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst EmptyMageListHint = styled(Typography)`\n  margin-top: 24px;\n`\n\nEmptyMageListHint.displayName = 'EmptyMageListHint'\n\nexport default EmptyMageListHint\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions, selectors } from '../../../Redux/Store'\nimport { MageCount } from '../../../Redux/Store/Mages/Count'\n\nimport MageCountPicker from './MageCountPicker'\nimport MageList from './MageList'\nimport EmptyMageListHint from './EmptyMageListHint'\n\nimport ShuffleButton from '../../ShuffleButton'\nimport NoSelectedExpansions from '../../NoSelectedExpansions'\n\n\nconst mapStateToProps = (state: RootState) => ({\n  hasStandaloneExpansionSelected: selectors.Settings.Expansions.Selected.getHasStandaloneSet(\n    state\n  ),\n  selectedExpansions: selectors.Settings.Expansions.Selected.getSelectedExpansionsArray(\n    state\n  ),\n  mageCount: selectors.Mages.Count.getCount(state),\n  mages: selectors.Mages.Recruited.getMages(state),\n})\n\nconst mapDispatchToProps = {\n  setMageCount: actions.Mages.Count.setCount,\n  setMages: actions.Mages.Recruited.setRandomMages,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Mages = React.memo(\n  ({\n    hasStandaloneExpansionSelected,\n    selectedExpansions,\n    mageCount,\n    setMageCount,\n    setMages,\n    mages,\n  }: Props) => {\n    if (!hasStandaloneExpansionSelected) {\n      return <NoSelectedExpansions />\n    }\n\n    const handleShuffle = () => {\n      setMages(selectedExpansions, mageCount)\n    }\n\n    const noMagesGeneratedYet = mages.length === 0\n\n    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMageCount(parseInt(e.currentTarget.value) as MageCount)\n    }\n\n    return (\n      <React.Fragment>\n        <MageCountPicker\n          selectedValue={mageCount.toString()}\n          handleAmountChange={handleAmountChange}\n        />\n        {noMagesGeneratedYet ? (\n          <EmptyMageListHint>Tap button to recruit mages</EmptyMageListHint>\n        ) : (\n          <MageList mages={mages} />\n        )}\n        <ShuffleButton\n          onClick={handleShuffle}\n          color=\"primary\"\n          variant=\"extended\"\n        >\n          Recruit Mages\n        </ShuffleButton>\n      </React.Fragment>\n    )\n  }\n)\n\nMages.displayName = 'Mages'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Mages)\n","import React, { useState } from 'react'\n\nconst useExpandedHandling = () => {\n  // Expansion handling\n  const [expanded, setExpanded] = useState<boolean | string>(false)\n\n  const createExpansionHandler = (panel: string) => (\n    event: React.ChangeEvent<any> | undefined,\n    expanded: boolean | string\n  ) => {\n    const panelExpanded = expanded ? panel : false\n    setExpanded(panelExpanded)\n  }\n\n  return { expanded, createExpansionHandler, setExpanded }\n}\n\nexport default useExpandedHandling\n","import styled from 'styled-components/macro'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\n\nconst StyledExpansionPanel = styled(ExpansionPanel)`\n  border-radius: 4px;\n  margin-bottom: 15px;\n\n  &:before {\n    display: none;\n  }\n`\n\nStyledExpansionPanel.displayName = 'StyledExpansionPanel'\n\nexport default StyledExpansionPanel\n","import styled from 'styled-components/macro'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\n\nconst StyledExpansionPanelSummary = styled(ExpansionPanelSummary)`\n  min-height: 48px;\n`\n\nStyledExpansionPanelSummary.displayName = 'StyledExpansionPanelSummary'\n\nexport default StyledExpansionPanelSummary\n","import Typography from '@material-ui/core/Typography'\nimport styled from 'styled-components/macro'\n\nconst Heading = styled(Typography)`\n  font-size: ${props => props.theme.heading.fontSize};\n`\n\nexport default Heading\n","import React from 'react'\n\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport StyledExpansionPanel from './StyledExpansionPanel'\nimport StyledExpansionPanelSummary from './StyledExpansionPanelSummary'\n\nimport Heading from '../Heading'\n\ntype Props = {\n  expanded: string | boolean\n  expansionKey: string\n  summary: string\n  children: React.ReactNode\n  expansionHandler: (\n    event: React.ChangeEvent<any> | undefined,\n    expanded: boolean | string\n  ) => void\n}\n\nconst ExpansionPanel = React.memo(\n  ({ children, expanded, expansionHandler, expansionKey, summary }: Props) => (\n    <StyledExpansionPanel\n      expanded={expanded === expansionKey}\n      onChange={expansionHandler}\n    >\n      <StyledExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <Heading>{summary}</Heading>\n      </StyledExpansionPanelSummary>\n      <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n    </StyledExpansionPanel>\n  )\n)\n\nExpansionPanel.displayName = 'ExpansionPanel'\n\nexport default ExpansionPanel\n","import styled from 'styled-components/macro'\n\nconst ListWrapper = styled('div')`\n  margin-top: 24px;\n`\n\nListWrapper.displayName = 'ListWrapper'\n\nexport default ListWrapper\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport MuiCard from '@material-ui/core/Card'\n\ntype Props = {\n  type: string\n}\n\nconst Card = styled(MuiCard)<Props>`\n  background: ${props => props.theme.colors.cards[props.type].background};\n  min-width: 30px;\n  min-height: 148px;\n  position: relative;\n  height: 100%;\n`\n\nCard.displayName = 'Card'\n\nexport default Card\n","import styled from 'styled-components/macro'\nimport MuiCardContent from '@material-ui/core/CardContent'\n\nconst CardContent = styled(MuiCardContent)`\n  position: relative;\n  z-index: 1;\n`\n\nCardContent.displayName = 'CardContent'\n\nexport default CardContent\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst CardName = styled(Typography)`\n  font-weight: bold;\n`\n\nCardName.displayName = 'CardName'\n\nexport default CardName\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\ntype Props = {\n  type: string\n}\n\nconst Icon = styled('i')<Props>`\n  position: absolute;\n  right: 8px;\n  bottom: -8px;\n  font-size: 120px;\n  z-index: 0;\n  opacity: 0.2;\n\n  color: ${props => props.theme.colors.cards[props.type].color};\n`\n\nconst CardTypeIcon = React.memo(({ type }: Props) => {\n  switch (type) {\n    case 'gem': {\n      return <Icon type={type} className=\"ra ra-lg ra-crystals\" />\n    }\n    case 'relic': {\n      return <Icon type={type} className=\"ra ra-lg ra-crystal-wand\" />\n    }\n    case 'spell': {\n      return <Icon type={type} className=\"ra ra-lg ra-scroll-unfurled\" />\n    }\n    default: {\n      return null\n    }\n  }\n})\n\nCardTypeIcon.displayName = 'CardTypeIcon'\n\nexport default CardTypeIcon\n","import styled from 'styled-components/macro'\nimport ListItem from '@material-ui/core/ListItem'\n\nconst CardInfoItem = styled(ListItem)`\n  padding: 0;\n`\n\nCardInfoItem.displayName = 'CardInfoItem'\n\nexport default CardInfoItem\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst Info = styled(Typography)`\n  display: inline-block;\n`\n\nInfo.displayName = 'Info'\n\nexport default Info\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst InfoLabel = styled(Typography)`\n  margin-right: 8px;\n  display: inline-block;\n`\n\nInfoLabel.displayName = 'InfoLabel'\n\nexport default InfoLabel\n","import React from 'react'\n\nimport config from '../../../../config'\nimport { Slot, ICard, isCard } from '../../../../types'\n\nimport CardInfoItem from './CardInfoItem'\nimport Info from './Info'\nimport InfoLabel from './InfoLabel'\n\ntype Props = {\n  card: Slot | ICard\n}\n\nconst CostInfo = React.memo(({ card }: Props) => (\n  <CardInfoItem>\n    <InfoLabel color=\"textSecondary\">Cost:</InfoLabel>\n    <Info component=\"span\">{isCard(card) ? card.cost : '-'}</Info>\n  </CardInfoItem>\n))\n\nCostInfo.displayName = 'CostInfo'\n\nexport default CostInfo\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst CostOperation = styled(Typography)``\n\nCostOperation.displayName = 'CostOperation'\n\nexport default CostOperation\n","import React from 'react'\n\nimport config from '../../../../config'\nimport { Slot, ICard, isCard } from '../../../../types'\n\nimport CardInfoItem from './CardInfoItem'\nimport Info from './Info'\nimport InfoLabel from './InfoLabel'\n\ntype Props = {\n  card: Slot | ICard\n}\n\nconst ExpansionInfo = React.memo(({ card }: Props) => (\n  <CardInfoItem>\n    <InfoLabel color=\"textSecondary\">Set:</InfoLabel>\n    <Info component=\"span\">\n      {isCard(card) && config.DATA[card.expansion] !== undefined\n        ? config.DATA[card.expansion].name\n        : '-'}\n    </Info>\n  </CardInfoItem>\n))\n\nExpansionInfo.displayName = 'ExpansionInfo'\n\nexport default ExpansionInfo\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography'\n\nimport config from '../../../../config'\nimport { Slot, ICard, isCard, Operation } from '../../../../types'\n\nimport { getOperationString } from '../../../../Redux/helpers'\n\nimport Card from './Card'\nimport CardContent from './CardContent'\nimport CardName from './CardName'\nimport CardTypeIcon from './CardTypeIcon'\nimport CostInfo from './CostInfo'\nimport CostOperation from './CostOperation'\nimport ExpansionInfo from './ExpansionInfo'\n\ntype Props = {\n  tileSetup: Slot\n  card: Slot | ICard\n}\n\nconst MarketTile = React.memo(({ tileSetup, card, ...rest }: Props) => {\n  const { type, operation, values, threshold } = tileSetup\n\n  return (\n    <Grid item xs={6} md={4} {...rest}>\n      <Card type={type.toLowerCase()}>\n        <CardContent>\n          <CostOperation color=\"textSecondary\">\n            {type} {getOperationString(operation, values, threshold)}\n          </CostOperation>\n          <CardName component=\"p\">{isCard(card) ? card.name : '-'}</CardName>\n          <List>\n            <ExpansionInfo card={card} />\n            <CostInfo card={card} />\n          </List>\n        </CardContent>\n        <CardTypeIcon type={type.toLowerCase()} />\n      </Card>\n    </Grid>\n  )\n})\n\nMarketTile.displayName = 'MarketTile'\n\nexport default MarketTile\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { IMarketSetup, ICard, Slot } from '../../../types'\n\nimport ListWrapper from './ListWrapper'\nimport MarketTile from './MarketTile'\n\nconst renderTiles = (\n  marketSetup: IMarketSetup,\n  cards: ReadonlyArray<Slot | ICard>\n) => {\n  return marketSetup.tiles.map((tileSetup, i) => (\n    <MarketTile key={i} tileSetup={tileSetup} card={cards[i]} />\n  ))\n}\n\ntype Props = {\n  marketSetup: IMarketSetup\n  cards: ReadonlyArray<Slot | ICard>\n}\n\nconst SupplyList = React.memo(({ marketSetup, cards }: Props) => (\n  <ListWrapper>\n    <Grid container spacing={16}>\n      {renderTiles(marketSetup, cards)}\n    </Grid>\n  </ListWrapper>\n))\n\nSupplyList.displayName = 'SupplyList'\n\nexport default SupplyList\n","import styled from 'styled-components/macro'\n\nconst MarketOptionsWrapper = styled('div')`\n  margin: 0 -8px;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nMarketOptionsWrapper.displayName = 'MarketOptionsWrapper'\n\nexport default MarketOptionsWrapper\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  selected: boolean\n}\n\nconst Wrapper = styled('div')<Props>`\n  border: 1px solid\n    ${props =>\n      props.selected\n        ? props.theme.colors.secondary.main\n        : 'rgba(0, 0, 0, 0.12)'};\n  padding: 4px 8px;\n  display: inline-block;\n  width: calc(100% - 16px);\n  margin: 0 8px 24px;\n  cursor: pointer;\n\n  &:nth-last-child(2) {\n    margin-bottom: 0;\n  }\n\n  &:last-child {\n    margin-top: 24px;\n    margin-bottom: 0;\n  }\n`\n\nWrapper.displayName = 'Wrapper'\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst TileList = styled('ul')`\n  margin: 0 -4px;\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  width: calc(100% + 8px);\n`\n\nTileList.displayName = 'TileList'\n\nexport default TileList\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  type: string\n}\n\nconst TileListItem = styled('li')<Props>`\n  margin: 4px;\n  min-width: 36px;\n  width: calc(33.33333% - 8px);\n  height: 36px;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  color: ${props => props.theme.colors.text.secondary};\n  background: ${props => props.theme.colors.cards[props.type].background};\n  font-family: 'Roboto', sans-serif;\n\n  @media all and (min-width: 502px) {\n    width: calc(11.11111% - 8px);\n  }\n`\n\nTileListItem.displayName = 'TileListItem'\n\nexport default TileListItem\n","import styled from 'styled-components/macro'\n\nimport Typography from '@material-ui/core/Typography'\n\ntype Props = {\n  selected: boolean\n}\n\nconst SupplyName = styled(Typography)<Props>`\n  color: ${props =>\n    props.selected\n      ? props.theme.colors.secondary.main\n      : props.theme.colors.text.secondary};\n`\n\nSupplyName.displayName = 'SupplyName'\n\nexport default SupplyName\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography'\n\nimport { getOperationString } from '../../Redux/helpers'\nimport { IMarketSetup, IMarketSetups } from '../../types'\nimport { RootState } from '../../Redux/Store'\nimport * as SupplySelection from '../../Redux/Store/Supply/Selection'\nimport * as SupplySetups from '../../Redux/Store/Settings/SupplySetups'\n\nimport Wrapper from './Wrapper'\nimport TileList from './TileList'\nimport TileListItem from './TileListItem'\nimport SupplyName from './SupplyName'\n\n// FIXME tiles are untyped!!!\nconst renderMarketSetupItems = (tiles: any) =>\n  tiles.map((tile: any, index: number) => (\n    <TileListItem key={index} type={tile.type.toLowerCase()}>\n      {getOperationString(tile.operation, tile.values, tile.threshold)}\n    </TileListItem>\n  ))\n\ntype Props = {\n  clickHandler: (event: any) => void\n  setup: IMarketSetup\n  selected?: boolean\n  showName?: boolean\n}\n\nconst SupplyPreview = React.memo(\n  ({ clickHandler, setup, selected = false, showName = true }: Props) => (\n    <Wrapper\n      key={setup.id}\n      onClick={clickHandler}\n      data-value={setup.id}\n      selected={selected}\n    >\n      <TileList>{renderMarketSetupItems(setup.tiles)}</TileList>\n      {showName ? (\n        <SupplyName variant=\"caption\" selected={selected}>\n          {setup.name}\n        </SupplyName>\n      ) : null}\n    </Wrapper>\n  )\n)\n\nSupplyPreview.displayName = 'SupplyPreview'\n\nexport default SupplyPreview\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { IMarketSetup } from '../../../types'\nimport { RootState, selectors, actions } from '../../../Redux/Store'\n\nimport MarketOptionsWrapper from './MarketOptionsWrapper'\nimport SupplyPreview from '../../SupplyPreview'\n\nconst getCustomAndPredefined = selectors.Settings.SupplySetups.makeGetCustomAndPredefined()\nconst mapStateToProps = (state: RootState) => ({\n  activeMarketSetups: selectors.Settings.SupplySetups.getActiveSetups(state),\n  allMarketSetups: getCustomAndPredefined(state),\n  selectedSetup: selectors.Supply.Selection.getSelectedSetup(state),\n})\n\nconst mapDispatchToProps = {\n  selectSetup: actions.Supply.Selection.selectSetup,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    expansionHandler: (\n      event: React.ChangeEvent<any> | undefined,\n      expanded: boolean | string\n    ) => void\n  }\n\nconst MarketOptions = React.memo(\n  ({\n    activeMarketSetups,\n    allMarketSetups,\n    expansionHandler,\n    selectSetup,\n    selectedSetup,\n  }: Props) => (\n    <MarketOptionsWrapper>\n      {activeMarketSetups.map(setup => (\n        <SupplyPreview\n          key={setup.id}\n          setup={setup}\n          clickHandler={(event: any) => {\n            expansionHandler(undefined, false)\n            selectSetup(allMarketSetups[event.currentTarget.dataset.value])\n          }}\n          selected={selectedSetup.id === setup.id}\n        />\n      ))}\n    </MarketOptionsWrapper>\n  )\n)\n\nMarketOptions.displayName = 'MarketOptions'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MarketOptions)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nimport useExpandedHandling from '../../../hooks/useExpansionHandling'\nimport { ICard, Slot, IMarketSetup } from '../../../types'\n\nimport ExpansionPanel from '../../ExpansionPanel'\nimport ShuffleButton from '../../ShuffleButton'\nimport NoSelectedExpansions from '../../NoSelectedExpansions'\n\nimport SupplyList from './SupplyList'\nimport MarketOptions from './MarketOptions'\n\nconst mapStateToProps = (state: RootState) => ({\n  hasStandaloneExpansionSelected: selectors.Settings.Expansions.Selected.getHasStandaloneSet(\n    state\n  ),\n  selectedExpansions: selectors.Settings.Expansions.Selected.getSelectedExpansionsArray(\n    state\n  ),\n  marketSetup: selectors.Supply.Selection.getSelectedSetup(state),\n  cards: selectors.Supply.RandomSetup.getCards(state),\n})\n\nconst mapDispatchToProps = {\n  createMarket: actions.Supply.RandomSetup.createMarket,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Supply = React.memo(\n  ({\n    cards,\n    createMarket,\n    hasStandaloneExpansionSelected,\n    marketSetup,\n    selectedExpansions,\n  }: Props) => {\n    const { expanded, createExpansionHandler } = useExpandedHandling()\n    const expansionKey = 'setup'\n    const expansionHandler = createExpansionHandler(expansionKey)\n\n    if (!hasStandaloneExpansionSelected) {\n      return <NoSelectedExpansions />\n    }\n\n    const handleShuffle = () => {\n      createMarket(selectedExpansions, marketSetup.tiles)\n    }\n\n    return (\n      <React.Fragment>\n        <ExpansionPanel\n          expanded={expanded}\n          expansionKey={expansionKey}\n          summary={marketSetup.name}\n          expansionHandler={expansionHandler}\n        >\n          <MarketOptions expansionHandler={expansionHandler} />\n        </ExpansionPanel>\n        <SupplyList marketSetup={marketSetup} cards={cards} />\n        <ShuffleButton\n          onClick={handleShuffle}\n          color=\"primary\"\n          variant=\"extended\"\n        >\n          Create Market\n        </ShuffleButton>\n      </React.Fragment>\n    )\n  }\n)\n\nSupply.displayName = 'Supply'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Supply)\n","import React from 'react'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\ntype BaseProps = {\n  checked: boolean\n  item: string\n  label: string\n  changeHandler: (selection: string) => void\n}\n\nexport type RenderComponent = React.ComponentType<BaseProps>\n\ntype Props = BaseProps & {\n  Component?: RenderComponent\n}\n\nconst DefaultCheckbox = React.memo(\n  ({ checked, item, label, changeHandler }: BaseProps) => (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={checked}\n          onChange={() => changeHandler(item)}\n          value={item}\n        />\n      }\n      label={label}\n    />\n  )\n)\n\nconst Item = React.memo(({ Component = DefaultCheckbox, ...rest }: Props) => {\n  return <Component {...rest} />\n})\n\nItem.displayName = 'Item'\n\nexport default Item\n","import React from 'react'\n\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\n\nimport Item, { RenderComponent } from './Item'\n\ntype Item = {\n  name: string\n  label: string\n  checked: boolean\n}\n\nconst renderCheckboxes = (\n  items: ReadonlyArray<Item>,\n  handleChange: (set: string) => void,\n  Component?: RenderComponent\n) =>\n  items.map(item => (\n    <Item\n      Component={Component}\n      key={item.name}\n      item={item.name}\n      label={item.label}\n      checked={item.checked}\n      changeHandler={handleChange}\n    />\n  ))\n\ntype Props = {\n  label: string\n  items: ReadonlyArray<Item>\n  changeHandler: (selection: string) => void\n  Component?: RenderComponent\n}\n\nconst CheckboxList = React.memo(\n  ({ label, items, changeHandler, Component, ...rest }: Props) => (\n    <React.Fragment>\n      <FormLabel {...rest}>{label}</FormLabel>\n      <FormGroup {...rest} style={{ marginBottom: '20px' }}>\n        {renderCheckboxes(items, changeHandler, Component)}\n      </FormGroup>\n    </React.Fragment>\n  )\n)\n\nCheckboxList.displayName = 'CheckboxList'\n\nexport default CheckboxList\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\n\nimport config from '../../../../config'\nimport { RootState, selectors, actions } from '../../../../Redux/Store'\n\nimport CheckboxList from '../../../CheckboxList'\n\nconst mapStateToProps = (state: RootState) => ({\n  standalones: selectors.Settings.Expansions.getStandaloneExpansions,\n  miniExpansions: selectors.Settings.Expansions.getMiniExpansions,\n  promos: selectors.Settings.Expansions.getPromos,\n  selectedExpansions: selectors.Settings.Expansions.Selected.getSelectedExpansionsState(\n    state\n  ),\n  allSetsSelected: selectors.Settings.Expansions.Selected.getAllSetsSelected(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  handleSelectAll: actions.Settings.Expansions.Selected.toggleAll,\n  handleChange: actions.Settings.Expansions.Selected.toggleExpansion,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst ActiveSets = React.memo(\n  ({\n    allSetsSelected,\n    handleSelectAll,\n    standalones,\n    miniExpansions,\n    promos,\n    selectedExpansions,\n    handleChange,\n  }: Props) => {\n    const expansionsToItems = (expansions: ReadonlyArray<string>) =>\n      expansions.map(expansion => ({\n        name: expansion,\n        item: expansion,\n        label: config.DATA[expansion].name,\n        checked: selectedExpansions[expansion],\n      }))\n\n    return (\n      <FormControl component={'fieldset' as 'div'}>\n        <FormLabel />\n        <FormGroup style={{ marginBottom: '20px' }}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={allSetsSelected}\n                onChange={handleSelectAll}\n                value={allSetsSelected ? 'Deselect All' : 'Select All'}\n              />\n            }\n            label={allSetsSelected ? 'Deselect All' : 'Select All'}\n          />\n        </FormGroup>\n        <CheckboxList\n          label=\"Standalone Sets\"\n          items={expansionsToItems(standalones)}\n          changeHandler={handleChange}\n        />\n        <CheckboxList\n          label=\"Mini Expansions\"\n          items={expansionsToItems(miniExpansions)}\n          changeHandler={handleChange}\n        />\n        <CheckboxList\n          label=\"Promos\"\n          items={expansionsToItems(promos)}\n          changeHandler={handleChange}\n        />\n      </FormControl>\n    )\n  }\n)\n\nActiveSets.displayName = 'ActiveSets'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActiveSets)\n","import React from 'react'\n\nimport useExpansionHandling from '../../../../hooks/useExpansionHandling'\nimport ExpansionPanel from '../../../ExpansionPanel'\nimport ActiveSets from './ActiveSets'\n\ntype Props = {}\n\nconst Expansions = React.memo(() => {\n  const { expanded, createExpansionHandler } = useExpansionHandling()\n  const expansionKey = 'sets'\n  const expansionHandler = createExpansionHandler(expansionKey)\n\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      expansionKey={expansionKey}\n      expansionHandler={expansionHandler}\n      summary=\"Expansions\"\n    >\n      <ActiveSets />\n    </ExpansionPanel>\n  )\n})\n\nExpansions.displayName = 'Expansions'\n\nexport default Expansions\n","import React from 'react'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport { IMarketSetup } from '../../../../types'\n\nimport SupplyPreview from '../../../SupplyPreview'\n\ntype Props = {\n  changeHandler: (selection: string) => void\n  checked: boolean\n  item: string\n  label: string\n  setup?: IMarketSetup\n}\n\nconst CheckboxWithPreview = React.memo(\n  ({ changeHandler, checked, item, label, setup }: Props) => (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={() => changeHandler(item)}\n            value={item}\n          />\n        }\n        label={label}\n      />\n      {setup ? (\n        <SupplyPreview\n          clickHandler={() => changeHandler(item)}\n          setup={setup}\n          showName={false}\n        />\n      ) : null}\n    </div>\n  )\n)\n\nCheckboxWithPreview.displayName = 'CheckboxWithPreview'\n\nexport default CheckboxWithPreview\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\n\nimport { RootState, actions, selectors } from '../../../../Redux/Store'\n\nimport CheckboxList from '../../../CheckboxList'\nimport CheckboxWithPreview from './CheckboxWithPreview'\n\nconst mapStateToProps = (state: RootState) => ({\n  allSetsSelected: selectors.Settings.SupplySetups.getAllSetsSelected(state),\n  predefinedSetups: selectors.Settings.SupplySetups.getPredefinedAsArray(state),\n  customSetups: selectors.Settings.SupplySetups.getCustomAsArray(state),\n})\n\nconst mapDispatchToProps = {\n  toggleAll: actions.Settings.SupplySetups.toggleAll,\n  toggleSetup: actions.Settings.SupplySetups.toggleSetup,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst SetupSelection = React.memo(\n  ({\n    allSetsSelected,\n    customSetups,\n    predefinedSetups,\n    toggleAll,\n    toggleSetup,\n  }: Props) => {\n    const items = predefinedSetups.map(setup => ({\n      name: setup.id,\n      label: setup.name,\n      checked: setup.active,\n      setup: setup,\n    }))\n\n    return (\n      <FormControl component={'fieldset' as 'div'}>\n        <FormLabel />\n        <FormGroup style={{ marginBottom: '20px' }}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={allSetsSelected}\n                onChange={toggleAll}\n                value={allSetsSelected ? 'Deselect All' : 'Select All'}\n              />\n            }\n            label={allSetsSelected ? 'Deselect All' : 'Select All'}\n          />\n        </FormGroup>\n        <CheckboxList\n          label=\"Predefined Setups\"\n          changeHandler={item => toggleSetup(item, 'Predefined')}\n          items={items}\n          Component={({ checked, item, label, changeHandler, ...rest }) => {\n            const setup = predefinedSetups.find(setup => setup.id === item)\n\n            return (\n              <CheckboxWithPreview\n                changeHandler={changeHandler}\n                checked={checked}\n                item={item}\n                label={label}\n                setup={setup}\n              />\n            )\n          }}\n        />\n      </FormControl>\n    )\n  }\n)\n\nSetupSelection.displayName = 'SetupSelection'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SetupSelection)\n","import React from 'react'\n\nimport ExpansionPanel from '../../../ExpansionPanel'\nimport useExpansionHandling from '../../../../hooks/useExpansionHandling'\n\nimport SetupSelection from './SetupSelection'\n\ntype Props = {}\n\nconst Supply = React.memo(() => {\n  const { expanded, createExpansionHandler } = useExpansionHandling()\n  const expansionKey = 'supplySets'\n  const expansionHandler = createExpansionHandler(expansionKey)\n\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      expansionHandler={expansionHandler}\n      expansionKey={expansionKey}\n      summary=\"Supply Setups\"\n    >\n      <SetupSelection />\n    </ExpansionPanel>\n  )\n})\n\nSupply.displayName = 'Supply'\n\nexport default Supply\n","import React from 'react'\n\nimport Expansions from './Expansions'\nimport Supply from './Supply'\n\ntype Props = {}\n\nconst Settings = React.memo(() => (\n  <React.Fragment>\n    <Expansions />\n    <Supply />\n  </React.Fragment>\n))\n\nSettings.displayName = 'Settings'\n\nexport default Settings\n","import styled from 'styled-components/macro'\nimport MuiTableCell from '@material-ui/core/TableCell'\n\nconst Cell = styled(MuiTableCell)`\n  padding: 4px 8px;\n\n  &:first-child {\n    padding-left: 16px;\n  }\n\n  &:last-child {\n    padding-right: 8px;\n  }\n`\n\nCell.displayName = 'Cell'\n\nexport default Cell\n","import styled from 'styled-components/macro'\nimport MuiTableRow from '@material-ui/core/TableRow'\n\nimport { TurnOrderCardType } from '../../../../types'\nimport { TurnOrderColors } from '../../../../mainTheme'\n\ntype Props = {\n  type: TurnOrderCardType\n}\n\nconst getTurnOrderCardStyles = (\n  turnOrderCardColors: TurnOrderColors,\n  type: TurnOrderCardType\n) => {\n  if (!turnOrderCardColors[type]) {\n    return `\n      background: #fff;\n      &:first-child {\n        background: #fff;\n      }\n    `\n  }\n\n  return `\n    background: ${turnOrderCardColors[type].light};\n    &:first-child {\n      background: ${turnOrderCardColors[type].normal};\n    }\n  `\n}\n\nconst RowWrapper = styled(MuiTableRow)<Props>`\n  ${props =>\n    getTurnOrderCardStyles(props.theme.colors.turnOrderCards, props.type)}\n\n  &:first-child {\n    & * {\n      color: #fff;\n    }\n  }\n\n  & td {\n    border-bottom: 4px solid #fafafa;\n  }\n`\n\nexport default RowWrapper\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport { Loop, Publish, GetApp } from '@material-ui/icons'\n\nimport { ITurnOrderCard } from '../../../../types'\nimport { RootState, actions } from '../../../../Redux/Store'\n\nimport Cell from './Cell'\nimport RowWrapper from './RowWrapper'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst mapDispatchToProps = {\n  addToTop: actions.TurnOrder.ActiveGame.addToTop,\n  addToBottom: actions.TurnOrder.ActiveGame.addToBottom,\n  shuffleIntoDeck: actions.TurnOrder.ActiveGame.shuffleIntoDeck,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    card: ITurnOrderCard\n  }\n\nconst Row = React.memo(\n  ({ card, addToTop, addToBottom, shuffleIntoDeck }: Props) => (\n    <RowWrapper type={card.type}>\n      <Cell>\n        <Typography component=\"p\">{card.name}</Typography>\n      </Cell>\n      <Cell align=\"right\">\n        <IconButton\n          aria-label=\"Add to top\"\n          title=\"Add to top\"\n          onClick={() => addToTop(card.id)}\n        >\n          <Publish fontSize=\"small\" />\n        </IconButton>\n      </Cell>\n      <Cell align=\"right\">\n        <IconButton\n          aria-label=\"Add to bottom\"\n          title=\"Add to bottom\"\n          onClick={() => addToBottom(card.id)}\n        >\n          <GetApp fontSize=\"small\" />\n        </IconButton>\n      </Cell>\n      <Cell align=\"right\">\n        <IconButton\n          aria-label=\"Shuffle into Turn Order Deck\"\n          title=\"Shuffle into Turn Order Deck\"\n          onClick={() => shuffleIntoDeck(card.id)}\n        >\n          <Loop fontSize=\"small\" />\n        </IconButton>\n      </Cell>\n    </RowWrapper>\n  )\n)\n\nRow.displayName = 'Row'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Row)\n","import styled from 'styled-components/macro'\nimport MuiTable from '@material-ui/core/Table'\n\nconst Table = styled(MuiTable)`\n  margin-top: 24px;\n  border-collapse: collapse;\n`\n\nexport default Table\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport TableBody from '@material-ui/core/TableBody'\n\nimport { ITurnOrderCard } from '../../../../types'\nimport { RootState, selectors } from '../../../../Redux/Store'\n\nimport Row from './Row'\nimport Table from './Table'\n\nconst renderRows = (discard: ITurnOrderCard[]) =>\n  discard.map((card, i) => <Row key={i} card={card} />)\n\nconst mapStateToProps = (state: RootState) => ({\n  discard: selectors.TurnOrder.ActiveGame.getDiscard(state),\n})\n\nconst mapDispatchToProps = {}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst DiscardTable = React.memo(({ discard }: Props) => (\n  <Table>\n    <TableBody>{renderRows(discard)}</TableBody>\n  </Table>\n))\n\nDiscardTable.displayName = 'DiscardTable'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DiscardTable)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\n\nimport { ITurnOrderCard } from '../../../types'\nimport { RootState, selectors, actions } from '../../../Redux/Store'\n\nimport ShuffleButton from '../../ShuffleButton'\n\nimport DiscardTable from './DiscardTable'\n\nconst mapStateToProps = (state: RootState) => ({\n  deck: selectors.TurnOrder.ActiveGame.getDeck(state),\n  availableCards: selectors.TurnOrder.Configuration.getAvailableCards(state),\n})\n\nconst mapDispatchToProps = {\n  resetGame: actions.TurnOrder.ActiveGame.resetGame,\n  drawCard: actions.TurnOrder.ActiveGame.draw,\n  newRound: actions.TurnOrder.ActiveGame.newRound,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst ActiveTurnOrder = React.memo(\n  ({ availableCards, deck, resetGame, newRound, drawCard }: Props) => (\n    <React.Fragment>\n      {deck.length === 0 ? (\n        <Button\n          size=\"large\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => newRound(availableCards)}\n        >\n          New Round\n        </Button>\n      ) : (\n        <Button\n          size=\"large\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={drawCard}\n        >\n          Draw a card\n        </Button>\n      )}\n\n      <DiscardTable />\n\n      <ShuffleButton color=\"primary\" variant=\"extended\" onClick={resetGame}>\n        Reset Game\n      </ShuffleButton>\n    </React.Fragment>\n  )\n)\n\nActiveTurnOrder.displayName = 'ActiveTurnOrder'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActiveTurnOrder)\n","import styled from 'styled-components/macro'\nimport MuiCard from '@material-ui/core/Card'\n\nconst Card = styled(MuiCard)`\n  margin-top: 24px;\n`\n\nexport default Card\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport CardContent from '@material-ui/core/CardContent'\n\nimport { ITurnOrderSetup } from '../../../types'\n\nimport Card from './Card'\n\nconst renderCardNames = (turnOrderSetup: ITurnOrderSetup) =>\n  turnOrderSetup.turnOrderCards.map((card, i) => (\n    <Typography component=\"p\" key={i}>\n      {card.name}\n    </Typography>\n  ))\n\ntype Props = {\n  turnOrderSetup: ITurnOrderSetup\n}\n\nconst CardNameDisplay = React.memo(({ turnOrderSetup }: Props) => (\n  <Card>\n    <CardContent>\n      <Typography color=\"textSecondary\" gutterBottom>\n        Turn order cards\n      </Typography>\n      {renderCardNames(turnOrderSetup)}\n    </CardContent>\n  </Card>\n))\n\nCardNameDisplay.displayName = 'CardNameDisplay'\n\nexport default CardNameDisplay\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Typography from '@material-ui/core/Typography'\n\nimport { MODES, Mode } from '../../../types'\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nimport Card from './Card'\n\nconst renderModeOptions = () =>\n  MODES.map(mode => (\n    <FormControlLabel\n      key={mode}\n      value={mode}\n      control={<Radio />}\n      label={mode}\n    />\n  ))\n\nconst mapStateToProps = (state: RootState) => ({\n  mode: selectors.TurnOrder.Configuration.getMode(state),\n})\n\nconst mapDispatchToProps = {\n  setMode: actions.TurnOrder.Configuration.setMode,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst ModeSelection = React.memo(({ mode, setMode }: Props) => (\n  <Card>\n    <CardContent>\n      <FormLabel>Mode</FormLabel>\n      <RadioGroup\n        aria-label=\"mode\"\n        name=\"turnOrderMode\"\n        value={mode}\n        onChange={(event: React.ChangeEvent<any>) =>\n          setMode(event.currentTarget.value)\n        }\n      >\n        {renderModeOptions()}\n      </RadioGroup>\n    </CardContent>\n  </Card>\n))\n\nModeSelection.displayName = 'ModeSelection'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ModeSelection)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\n\nimport config from '../../../config'\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nconst renderPlayerCountOptions = () =>\n  Object.values(config.TURNORDERSETUPS).map(playerCount => (\n    <FormControlLabel\n      key={playerCount.id}\n      value={playerCount.id}\n      control={<Radio />}\n      label={playerCount.name}\n    />\n  ))\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedPlayerCount: selectors.TurnOrder.Configuration.getSelectedPlayerCount(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  selectPlayerCount: actions.TurnOrder.Configuration.selectPlayerCount,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst PlayerCountSelection = React.memo(\n  ({ selectPlayerCount, selectedPlayerCount }: Props) => (\n    <Card>\n      <CardContent>\n        <FormControl component={'fieldset' as 'div'}>\n          <FormLabel>Amount of Players</FormLabel>\n          <RadioGroup\n            aria-label=\"Players\"\n            name=\"turnOrderPlayerCountOptions\"\n            value={selectedPlayerCount.id}\n            onChange={(event: React.ChangeEvent<any>) => {\n              selectPlayerCount(event.currentTarget.value)\n            }}\n            row={true}\n          >\n            {renderPlayerCountOptions()}\n          </RadioGroup>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlayerCountSelection)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\n\nimport config from '../../../config'\nimport { ITurnOrderPlayerCount } from '../../../types'\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nimport Card from './Card'\n\nconst renderSetupOptions = (selectedPlayerCount: ITurnOrderPlayerCount) =>\n  Object.values(config.TURNORDERSETUPS[selectedPlayerCount.id].variations).map(\n    setup => (\n      <FormControlLabel\n        key={setup.id}\n        value={setup.id}\n        control={<Radio />}\n        label={setup.name}\n      />\n    )\n  )\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedPlayerCount: selectors.TurnOrder.Configuration.getSelectedPlayerCount(\n    state\n  ),\n  selectedSetup: selectors.TurnOrder.Configuration.getSelectedSetup(state),\n})\n\nconst mapDispatchToProps = {\n  selectSetup: actions.TurnOrder.Configuration.selectSetup,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst SetupSelection = React.memo(\n  ({ selectSetup, selectedSetup, selectedPlayerCount }: Props) => (\n    <Card>\n      <CardContent>\n        <FormControl component={'fieldset' as 'div'}>\n          <FormLabel>Player Cards Variants</FormLabel>\n          <RadioGroup\n            aria-label=\"Players Variant\"\n            name=\"turnOrderOptions\"\n            value={selectedSetup.id}\n            onChange={(event: React.ChangeEvent<any>) => {\n              selectSetup(event.currentTarget.value)\n            }}\n          >\n            {renderSetupOptions(selectedPlayerCount)}\n          </RadioGroup>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n)\n\nSetupSelection.displayName = 'SetupSelection'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SetupSelection)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions, selectors } from '../../../Redux/Store'\n\nimport ShuffleButton from '../../ShuffleButton'\nimport CardNameDisplay from './CardNameDisplay'\nimport ModeSelection from './ModeSelection'\nimport PlayerCountSelection from './PlayerCountSelection'\nimport SetupSelection from './SetupSelection'\n\nconst mapStateToProps = (state: RootState) => ({\n  currentConfiguration: selectors.TurnOrder.Configuration.getConfiguration(\n    state\n  ),\n  selectedPlayerCount: selectors.TurnOrder.Configuration.getSelectedPlayerCount(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  startGame: actions.TurnOrder.ActiveGame.startGame,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst TurnOrderConfiguration = React.memo(\n  ({ currentConfiguration, startGame, selectedPlayerCount }: Props) => {\n    const availableVariations = Object.keys(selectedPlayerCount.variations).map(\n      key => [selectedPlayerCount.variations[key]]\n    )\n\n    const hasMoreThanOneVariant: boolean = availableVariations.length > 1\n\n    return (\n      <React.Fragment>\n        <PlayerCountSelection />\n        {hasMoreThanOneVariant ? <SetupSelection /> : null}\n        <ModeSelection />\n        <CardNameDisplay turnOrderSetup={currentConfiguration} />\n        <ShuffleButton\n          color=\"primary\"\n          variant=\"extended\"\n          onClick={() => startGame(currentConfiguration.turnOrderCards)}\n        >\n          Start Game\n        </ShuffleButton>\n      </React.Fragment>\n    )\n  }\n)\n\nTurnOrderConfiguration.displayName = 'TurnOrderConfiguration'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TurnOrderConfiguration)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors } from '../../../Redux/Store'\n\nimport ActiveGame from './ActiveGame'\nimport TurnOrderConfiguration from './TurnOrderConfiguration'\n\nconst mapStateToProps = (state: RootState) => ({\n  gameHasStarted: selectors.TurnOrder.ActiveGame.getHasStarted(state),\n})\n\nconst mapDispatchToProps = {}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    gameHasStarted: boolean\n  }\n\nconst TurnOrder = React.memo(({ gameHasStarted }: Props) => (\n  <React.Fragment>\n    {gameHasStarted ? <ActiveGame /> : <TurnOrderConfiguration />}\n  </React.Fragment>\n))\n\nTurnOrder.displayName = 'TurnOrder'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TurnOrder)\n","import styled from 'styled-components/macro'\n\nconst HeaderPlaceholder = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: 0 8px;\n  justify-content: flex-end;\n\n  min-height: 56px;\n\n  @media (min-width: 0px) and (orientation: landscape) {\n    min-height: 48px;\n  }\n\n  @media (min-width: 600px) {\n    min-height: 64px;\n  }\n`\n\nexport default HeaderPlaceholder\n","import styled, { css } from 'styled-components/macro'\n\ntype Props = {\n  drawerIsOpen: boolean\n  isLoading: boolean\n}\n\nconst openDrawerMixin = css`\n  margin-left: 0;\n  transition: ${props => props.theme.muiTransitions.contentShift};\n`\n\nconst Wrapper = styled('div')<Props>`\n  flex-grow: 1;\n  padding: ${props => props.theme.spacing.unit * 3}px;\n  margin-left: -${props => props.theme.drawerWidth}px;\n  transition: ${props => props.theme.muiTransitions.content};\n\n  ${props => (props.drawerIsOpen ? openDrawerMixin : '')}\n\n  ${props =>\n    props.isLoading\n      ? `\n      text-align: center;\n      padding-top: 150px;\n    `\n      : ''}\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport Nemeses from '../pages/Nemeses'\nimport Mages from '../pages/Mages'\nimport Supply from '../pages/Supply'\nimport Settings from '../pages/Settings'\nimport TurnOrder from '../pages/TurnOrder'\n\nimport { ROUTES } from '../../routes'\nimport HeaderPlaceholder from './HeaderPlaceholder'\nimport Wrapper from './Wrapper'\n\ntype Props = {\n  route: string\n  isLoading: boolean\n  drawerIsOpen: boolean\n}\n\nconst Content = React.memo(({ route, isLoading, drawerIsOpen }: Props) => (\n  <Wrapper isLoading={isLoading} drawerIsOpen={drawerIsOpen}>\n    <HeaderPlaceholder />\n    {isLoading ? (\n      <CircularProgress />\n    ) : (\n      {\n        [ROUTES.nemeses]: <Nemeses />,\n        [ROUTES.mages]: <Mages />,\n        [ROUTES.supply]: <Supply />,\n        [ROUTES.turnOrder]: <TurnOrder />,\n        [ROUTES.settings]: <Settings />,\n      }[route]\n    )}\n  </Wrapper>\n))\n\nContent.displayName = 'Content'\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nimport Typography from '@material-ui/core/Typography'\n\nconst Title = styled(Typography)``\n\nexport default Title\n","import React from 'react'\nimport styled, { css } from 'styled-components/macro'\nimport MuiAppBar from '@material-ui/core/AppBar'\n\ntype Props = {\n  drawerIsOpen: boolean\n}\n\nconst openDrawerMixin = css`\n  width: calc(100% - ${props => props.theme.drawerWidth}px);\n  margin-left: ${props => props.theme.drawerWidth}px;\n  transition: ${props => props.theme.muiTransitions.appBarShift};\n`\n\nconst AppBar = styled(({ drawerIsOpen, ...rest }) => <MuiAppBar {...rest} />)<\n  Props\n>`\n  position: fixed;\n\n  ${props => (props.drawerIsOpen ? openDrawerMixin : '')}\n`\n\nexport default AppBar\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport MuiIconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\n\ntype WrapperProps = {\n  drawerIsOpen: boolean\n}\n\nconst Wrapper = styled('div')<WrapperProps>`\n  margin-left: 12px;\n  margin-right: 20px;\n\n  color: #fff;\n\n  ${props => (props.drawerIsOpen ? `display: none;` : '')}\n`\n\nconst IconButton = styled(MuiIconButton)`\n  color: #fff;\n`\n\ntype Props = {\n  drawerIsOpen: boolean\n  onClick: () => void\n}\n\nconst MenuButton = ({ drawerIsOpen, onClick }: Props) => (\n  <Wrapper drawerIsOpen={drawerIsOpen}>\n    <IconButton aria-label=\"Menu\" onClick={onClick}>\n      <MenuIcon />\n    </IconButton>\n  </Wrapper>\n)\n\nexport default MenuButton\n","import React from 'react'\n\nimport Toolbar from '@material-ui/core/Toolbar'\n\nimport Title from './Title'\nimport AppBar from './AppBar'\nimport MenuButton from './MenuButton'\n\ntype Props = {\n  drawerIsOpen: boolean\n  currentLocation: string\n  toggleDrawer: () => void\n}\n\nconst TopBar = React.memo(\n  ({ drawerIsOpen, currentLocation, toggleDrawer }: Props) => (\n    <AppBar drawerIsOpen={drawerIsOpen}>\n      <Toolbar disableGutters={!drawerIsOpen}>\n        <MenuButton drawerIsOpen={drawerIsOpen} onClick={toggleDrawer} />\n        <Title variant=\"h6\" color=\"inherit\">\n          {currentLocation}\n        </Title>\n      </Toolbar>\n    </AppBar>\n  )\n)\n\nTopBar.displayName = 'TopBar'\n\nexport default TopBar\n","import React from 'react'\n\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\n\ntype Props = {\n  route: string\n  clickhandler: (route: string) => any\n  children: any\n}\n\nconst RouteItem = React.memo(({ route, clickhandler, children }: Props) => (\n  <ListItem button key={route} onClick={() => clickhandler(route)}>\n    <ListItemIcon>{children}</ListItemIcon>\n    <ListItemText primary={route} />\n  </ListItem>\n))\n\nRouteItem.displayName = 'RouteItem'\n\nexport default RouteItem\n","import React from 'react'\n\nimport BuildIcon from '@material-ui/icons/Build'\nimport List from '@material-ui/core/List'\n\nimport { ROUTES } from '../routes'\nimport RouteItem from './RouteItem'\n\ntype Props = {\n  locationhandler: (route: string) => void\n}\n\nconst Routes = React.memo(({ locationhandler }: Props) => (\n  <List>\n    <RouteItem route={ROUTES.nemeses} clickhandler={locationhandler}>\n      <i className=\"ra ra-lg ra-broken-skull\" />\n    </RouteItem>\n    <RouteItem route={ROUTES.mages} clickhandler={locationhandler}>\n      <i className=\"ra ra-lg ra-crystal-wand\" />\n    </RouteItem>\n    <RouteItem route={ROUTES.supply} clickhandler={locationhandler}>\n      <i className=\"ra ra-lg ra-campfire\" />\n    </RouteItem>\n    <RouteItem route={ROUTES.turnOrder} clickhandler={locationhandler}>\n      <i className=\"ra ra-lg ra-player-lift\" />\n    </RouteItem>\n    <RouteItem route={ROUTES.settings} clickhandler={locationhandler}>\n      <BuildIcon\n        style={{\n          width: '0.9em',\n        }}\n      />\n    </RouteItem>\n  </List>\n))\n\nRoutes.displayName = 'Routes'\n\nexport default Routes\n","import styled from 'styled-components/macro'\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: 0 8px;\n  justify-content: flex-end;\n\n  min-height: 56px;\n\n  @media (min-width: 0px) and (orientation: landscape) {\n    min-height: 48px;\n  }\n\n  @media (min-width: 600px) {\n    min-height: 64px;\n  }\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\nimport Typography from '@material-ui/core/Typography'\n\nconst AppInfo = styled(Typography)`\n  margin: ${props => props.theme.spacing.unit * 2}px;\n`\n\nexport default AppInfo\n","import styled from 'styled-components/macro'\nimport Link from '@material-ui/core/Link'\n\nconst GithHubLink = styled(Link)`\n  display: block;\n  line-height: 24px;\n  margin-top: ${props => props.theme.spacing.unit * 2}px;\n`\n\nexport default GithHubLink\n","import styled from 'styled-components/macro'\n\nconst GitHubLogo = styled('img')`\n  width: 24px;\n  display: inline-block;\n  vertical-align: middle;\n  margin-right: ${props => props.theme.spacing.unit}px;\n`\n\nexport default GitHubLogo\n","import styled from 'styled-components/macro'\nimport MuiDrawer from '@material-ui/core/Drawer'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst Drawer = styled(MuiDrawer)`\n  width: 240px;\n  flex-shrink: 0;\n`\n\n// FIXME remove withStyles call\nexport default withStyles({\n  paper: {\n    width: 240,\n  },\n})(Drawer)\n","import React from 'react'\n\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\n\nimport Routes from '../Routes'\nimport Header from './Header'\nimport AppInfo from './AppInfo'\nimport GitHubLink from './GitHubLink'\nimport GitHubLogo from './GitHubLogo'\nimport Drawer from './Drawer'\n\ntype Props = {\n  drawerIsOpen: boolean\n  toggleDrawer: () => void\n  moveTo: (route: string) => void\n}\n\nconst DrawerMenu = React.memo(\n  ({ drawerIsOpen, toggleDrawer, moveTo }: Props) => (\n    <Drawer\n      open={drawerIsOpen}\n      onClose={toggleDrawer}\n      variant=\"persistent\"\n      anchor=\"left\"\n    >\n      <Header>\n        <IconButton onClick={toggleDrawer}>\n          <ChevronLeftIcon />\n        </IconButton>\n      </Header>\n      <Divider />\n      <Routes locationhandler={moveTo} />\n      <Divider />\n      <AppInfo>\n        Version: {process.env.REACT_APP_VERSION}\n        <GitHubLink\n          href=\"https://github.com/on3iro/aeons-end-randomizer\"\n          color=\"inherit\"\n          target=\"_blank\"\n        >\n          <GitHubLogo src=\"images/github-logo.svg\" alt=\"SVG: Github logo\" />\n          Github\n        </GitHubLink>\n      </AppInfo>\n    </Drawer>\n  )\n)\n\nDrawerMenu.displayName = 'DrawerMenu'\n\nexport default DrawerMenu\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions, selectors } from '../../Redux/Store'\n\nimport { ROUTES } from '../../routes'\nimport Content from '../Content'\nimport TopBar from '../TopBar'\nimport DrawerMenu from '../DrawerMenu'\n\nconst mapStateToProps = (state: RootState) => ({\n  isLoading: selectors.Main.ContentLoading.getIsLoading(state),\n})\n\nconst mapDispatchToProps = {\n  getUserConfiguration: actions.Main.getUserConfiguration,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    isLoading: boolean\n  }\n\nconst MainApp = ({ getUserConfiguration, isLoading }: Props) => {\n  const [currentLocation, setCurrentLocation] = useState(ROUTES.nemeses)\n  const moveTo = (route: string) => {\n    toggleDrawer()\n    setCurrentLocation(route)\n  }\n\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false)\n  const toggleDrawer = () => setDrawerIsOpen(!drawerIsOpen)\n\n  useEffect(() => {\n    getUserConfiguration()\n  }, [])\n\n  return (\n    <React.Fragment>\n      <TopBar\n        drawerIsOpen={drawerIsOpen}\n        currentLocation={currentLocation}\n        toggleDrawer={toggleDrawer}\n      />\n      <DrawerMenu\n        drawerIsOpen={drawerIsOpen}\n        toggleDrawer={toggleDrawer}\n        moveTo={moveTo}\n      />\n      <Content\n        isLoading={isLoading}\n        route={currentLocation}\n        drawerIsOpen={drawerIsOpen}\n      />\n    </React.Fragment>\n  )\n}\n\nMainApp.displayName = 'MainApp'\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainApp)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  display: flex;\n  padding-bottom: 72px;\n`\n\nexport default Wrapper\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport 'rpg-awesome/css/rpg-awesome.min.css'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\n\nimport { mainTheme, muiTheme } from '../../mainTheme'\n\nimport MainApp from './MainApp'\nimport Wrapper from './Wrapper'\n\ntype Props = { classes: any }\n\nconst App = React.memo(() => (\n  <ThemeProvider theme={mainTheme}>\n    <MuiThemeProvider theme={muiTheme}>\n      <Wrapper>\n        <CssBaseline />\n        <MainApp />\n      </Wrapper>\n    </MuiThemeProvider>\n  </ThemeProvider>\n))\n\nApp.displayName = 'App'\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport JssProvider from 'react-jss/lib/JssProvider'\nimport { create } from 'jss'\nimport { createGenerateClassName, jssPreset } from '@material-ui/core/styles'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nconst store = configureStore(initialState)\n\nconst generateClassName = createGenerateClassName()\n// @ts-ignore\nconst jss = create({\n  ...jssPreset(),\n  // We define a custom insertion point that JSS will look for injecting the styles in the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <JssProvider jss={jss} generateClassName={generateClassName}>\n      <App />\n    </JssProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// @ts-ignore\nserviceWorker.register()\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}